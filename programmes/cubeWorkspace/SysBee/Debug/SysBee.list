
SysBee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ae8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08005ba8  08005ba8  00015ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cdc  08005cdc  0002015c  2**0
                  CONTENTS
  4 .ARM          00000008  08005cdc  08005cdc  00015cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ce4  08005ce4  0002015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ce4  08005ce4  00015ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ce8  08005ce8  00015ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  08005cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  2000015c  08005e48  0002015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  08005e48  0002049c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112d5  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026d0  00000000  00000000  00031459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  00033b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  000348e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001563c  00000000  00000000  000355a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107e4  00000000  00000000  0004abe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000872e0  00000000  00000000  0005b3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e26a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a8  00000000  00000000  000e26f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000015c 	.word	0x2000015c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005b90 	.word	0x08005b90

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000160 	.word	0x20000160
 8000104:	08005b90 	.word	0x08005b90

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f834 	bl	80004b4 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	46ce      	mov	lr, r9
 800045c:	4647      	mov	r7, r8
 800045e:	b580      	push	{r7, lr}
 8000460:	0007      	movs	r7, r0
 8000462:	4699      	mov	r9, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	469c      	mov	ip, r3
 8000468:	0413      	lsls	r3, r2, #16
 800046a:	0c1b      	lsrs	r3, r3, #16
 800046c:	001d      	movs	r5, r3
 800046e:	000e      	movs	r6, r1
 8000470:	4661      	mov	r1, ip
 8000472:	0400      	lsls	r0, r0, #16
 8000474:	0c14      	lsrs	r4, r2, #16
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	4345      	muls	r5, r0
 800047a:	434b      	muls	r3, r1
 800047c:	4360      	muls	r0, r4
 800047e:	4361      	muls	r1, r4
 8000480:	18c0      	adds	r0, r0, r3
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	1820      	adds	r0, r4, r0
 8000486:	468c      	mov	ip, r1
 8000488:	4283      	cmp	r3, r0
 800048a:	d903      	bls.n	8000494 <__aeabi_lmul+0x3c>
 800048c:	2380      	movs	r3, #128	; 0x80
 800048e:	025b      	lsls	r3, r3, #9
 8000490:	4698      	mov	r8, r3
 8000492:	44c4      	add	ip, r8
 8000494:	4649      	mov	r1, r9
 8000496:	4379      	muls	r1, r7
 8000498:	4372      	muls	r2, r6
 800049a:	0c03      	lsrs	r3, r0, #16
 800049c:	4463      	add	r3, ip
 800049e:	042d      	lsls	r5, r5, #16
 80004a0:	0c2d      	lsrs	r5, r5, #16
 80004a2:	18c9      	adds	r1, r1, r3
 80004a4:	0400      	lsls	r0, r0, #16
 80004a6:	1940      	adds	r0, r0, r5
 80004a8:	1889      	adds	r1, r1, r2
 80004aa:	bcc0      	pop	{r6, r7}
 80004ac:	46b9      	mov	r9, r7
 80004ae:	46b0      	mov	r8, r6
 80004b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__udivmoddi4>:
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b6:	4657      	mov	r7, sl
 80004b8:	464e      	mov	r6, r9
 80004ba:	4645      	mov	r5, r8
 80004bc:	46de      	mov	lr, fp
 80004be:	b5e0      	push	{r5, r6, r7, lr}
 80004c0:	0004      	movs	r4, r0
 80004c2:	000d      	movs	r5, r1
 80004c4:	4692      	mov	sl, r2
 80004c6:	4699      	mov	r9, r3
 80004c8:	b083      	sub	sp, #12
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d830      	bhi.n	8000530 <__udivmoddi4+0x7c>
 80004ce:	d02d      	beq.n	800052c <__udivmoddi4+0x78>
 80004d0:	4649      	mov	r1, r9
 80004d2:	4650      	mov	r0, sl
 80004d4:	f000 f8ba 	bl	800064c <__clzdi2>
 80004d8:	0029      	movs	r1, r5
 80004da:	0006      	movs	r6, r0
 80004dc:	0020      	movs	r0, r4
 80004de:	f000 f8b5 	bl	800064c <__clzdi2>
 80004e2:	1a33      	subs	r3, r6, r0
 80004e4:	4698      	mov	r8, r3
 80004e6:	3b20      	subs	r3, #32
 80004e8:	469b      	mov	fp, r3
 80004ea:	d433      	bmi.n	8000554 <__udivmoddi4+0xa0>
 80004ec:	465a      	mov	r2, fp
 80004ee:	4653      	mov	r3, sl
 80004f0:	4093      	lsls	r3, r2
 80004f2:	4642      	mov	r2, r8
 80004f4:	001f      	movs	r7, r3
 80004f6:	4653      	mov	r3, sl
 80004f8:	4093      	lsls	r3, r2
 80004fa:	001e      	movs	r6, r3
 80004fc:	42af      	cmp	r7, r5
 80004fe:	d83a      	bhi.n	8000576 <__udivmoddi4+0xc2>
 8000500:	42af      	cmp	r7, r5
 8000502:	d100      	bne.n	8000506 <__udivmoddi4+0x52>
 8000504:	e078      	b.n	80005f8 <__udivmoddi4+0x144>
 8000506:	465b      	mov	r3, fp
 8000508:	1ba4      	subs	r4, r4, r6
 800050a:	41bd      	sbcs	r5, r7
 800050c:	2b00      	cmp	r3, #0
 800050e:	da00      	bge.n	8000512 <__udivmoddi4+0x5e>
 8000510:	e075      	b.n	80005fe <__udivmoddi4+0x14a>
 8000512:	2200      	movs	r2, #0
 8000514:	2300      	movs	r3, #0
 8000516:	9200      	str	r2, [sp, #0]
 8000518:	9301      	str	r3, [sp, #4]
 800051a:	2301      	movs	r3, #1
 800051c:	465a      	mov	r2, fp
 800051e:	4093      	lsls	r3, r2
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2301      	movs	r3, #1
 8000524:	4642      	mov	r2, r8
 8000526:	4093      	lsls	r3, r2
 8000528:	9300      	str	r3, [sp, #0]
 800052a:	e028      	b.n	800057e <__udivmoddi4+0xca>
 800052c:	4282      	cmp	r2, r0
 800052e:	d9cf      	bls.n	80004d0 <__udivmoddi4+0x1c>
 8000530:	2200      	movs	r2, #0
 8000532:	2300      	movs	r3, #0
 8000534:	9200      	str	r2, [sp, #0]
 8000536:	9301      	str	r3, [sp, #4]
 8000538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <__udivmoddi4+0x8e>
 800053e:	601c      	str	r4, [r3, #0]
 8000540:	605d      	str	r5, [r3, #4]
 8000542:	9800      	ldr	r0, [sp, #0]
 8000544:	9901      	ldr	r1, [sp, #4]
 8000546:	b003      	add	sp, #12
 8000548:	bcf0      	pop	{r4, r5, r6, r7}
 800054a:	46bb      	mov	fp, r7
 800054c:	46b2      	mov	sl, r6
 800054e:	46a9      	mov	r9, r5
 8000550:	46a0      	mov	r8, r4
 8000552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000554:	4642      	mov	r2, r8
 8000556:	2320      	movs	r3, #32
 8000558:	1a9b      	subs	r3, r3, r2
 800055a:	4652      	mov	r2, sl
 800055c:	40da      	lsrs	r2, r3
 800055e:	4641      	mov	r1, r8
 8000560:	0013      	movs	r3, r2
 8000562:	464a      	mov	r2, r9
 8000564:	408a      	lsls	r2, r1
 8000566:	0017      	movs	r7, r2
 8000568:	4642      	mov	r2, r8
 800056a:	431f      	orrs	r7, r3
 800056c:	4653      	mov	r3, sl
 800056e:	4093      	lsls	r3, r2
 8000570:	001e      	movs	r6, r3
 8000572:	42af      	cmp	r7, r5
 8000574:	d9c4      	bls.n	8000500 <__udivmoddi4+0x4c>
 8000576:	2200      	movs	r2, #0
 8000578:	2300      	movs	r3, #0
 800057a:	9200      	str	r2, [sp, #0]
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	4643      	mov	r3, r8
 8000580:	2b00      	cmp	r3, #0
 8000582:	d0d9      	beq.n	8000538 <__udivmoddi4+0x84>
 8000584:	07fb      	lsls	r3, r7, #31
 8000586:	0872      	lsrs	r2, r6, #1
 8000588:	431a      	orrs	r2, r3
 800058a:	4646      	mov	r6, r8
 800058c:	087b      	lsrs	r3, r7, #1
 800058e:	e00e      	b.n	80005ae <__udivmoddi4+0xfa>
 8000590:	42ab      	cmp	r3, r5
 8000592:	d101      	bne.n	8000598 <__udivmoddi4+0xe4>
 8000594:	42a2      	cmp	r2, r4
 8000596:	d80c      	bhi.n	80005b2 <__udivmoddi4+0xfe>
 8000598:	1aa4      	subs	r4, r4, r2
 800059a:	419d      	sbcs	r5, r3
 800059c:	2001      	movs	r0, #1
 800059e:	1924      	adds	r4, r4, r4
 80005a0:	416d      	adcs	r5, r5
 80005a2:	2100      	movs	r1, #0
 80005a4:	3e01      	subs	r6, #1
 80005a6:	1824      	adds	r4, r4, r0
 80005a8:	414d      	adcs	r5, r1
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d006      	beq.n	80005bc <__udivmoddi4+0x108>
 80005ae:	42ab      	cmp	r3, r5
 80005b0:	d9ee      	bls.n	8000590 <__udivmoddi4+0xdc>
 80005b2:	3e01      	subs	r6, #1
 80005b4:	1924      	adds	r4, r4, r4
 80005b6:	416d      	adcs	r5, r5
 80005b8:	2e00      	cmp	r6, #0
 80005ba:	d1f8      	bne.n	80005ae <__udivmoddi4+0xfa>
 80005bc:	9800      	ldr	r0, [sp, #0]
 80005be:	9901      	ldr	r1, [sp, #4]
 80005c0:	465b      	mov	r3, fp
 80005c2:	1900      	adds	r0, r0, r4
 80005c4:	4169      	adcs	r1, r5
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	db24      	blt.n	8000614 <__udivmoddi4+0x160>
 80005ca:	002b      	movs	r3, r5
 80005cc:	465a      	mov	r2, fp
 80005ce:	4644      	mov	r4, r8
 80005d0:	40d3      	lsrs	r3, r2
 80005d2:	002a      	movs	r2, r5
 80005d4:	40e2      	lsrs	r2, r4
 80005d6:	001c      	movs	r4, r3
 80005d8:	465b      	mov	r3, fp
 80005da:	0015      	movs	r5, r2
 80005dc:	2b00      	cmp	r3, #0
 80005de:	db2a      	blt.n	8000636 <__udivmoddi4+0x182>
 80005e0:	0026      	movs	r6, r4
 80005e2:	409e      	lsls	r6, r3
 80005e4:	0033      	movs	r3, r6
 80005e6:	0026      	movs	r6, r4
 80005e8:	4647      	mov	r7, r8
 80005ea:	40be      	lsls	r6, r7
 80005ec:	0032      	movs	r2, r6
 80005ee:	1a80      	subs	r0, r0, r2
 80005f0:	4199      	sbcs	r1, r3
 80005f2:	9000      	str	r0, [sp, #0]
 80005f4:	9101      	str	r1, [sp, #4]
 80005f6:	e79f      	b.n	8000538 <__udivmoddi4+0x84>
 80005f8:	42a3      	cmp	r3, r4
 80005fa:	d8bc      	bhi.n	8000576 <__udivmoddi4+0xc2>
 80005fc:	e783      	b.n	8000506 <__udivmoddi4+0x52>
 80005fe:	4642      	mov	r2, r8
 8000600:	2320      	movs	r3, #32
 8000602:	2100      	movs	r1, #0
 8000604:	1a9b      	subs	r3, r3, r2
 8000606:	2200      	movs	r2, #0
 8000608:	9100      	str	r1, [sp, #0]
 800060a:	9201      	str	r2, [sp, #4]
 800060c:	2201      	movs	r2, #1
 800060e:	40da      	lsrs	r2, r3
 8000610:	9201      	str	r2, [sp, #4]
 8000612:	e786      	b.n	8000522 <__udivmoddi4+0x6e>
 8000614:	4642      	mov	r2, r8
 8000616:	2320      	movs	r3, #32
 8000618:	1a9b      	subs	r3, r3, r2
 800061a:	002a      	movs	r2, r5
 800061c:	4646      	mov	r6, r8
 800061e:	409a      	lsls	r2, r3
 8000620:	0023      	movs	r3, r4
 8000622:	40f3      	lsrs	r3, r6
 8000624:	4644      	mov	r4, r8
 8000626:	4313      	orrs	r3, r2
 8000628:	002a      	movs	r2, r5
 800062a:	40e2      	lsrs	r2, r4
 800062c:	001c      	movs	r4, r3
 800062e:	465b      	mov	r3, fp
 8000630:	0015      	movs	r5, r2
 8000632:	2b00      	cmp	r3, #0
 8000634:	dad4      	bge.n	80005e0 <__udivmoddi4+0x12c>
 8000636:	4642      	mov	r2, r8
 8000638:	002f      	movs	r7, r5
 800063a:	2320      	movs	r3, #32
 800063c:	0026      	movs	r6, r4
 800063e:	4097      	lsls	r7, r2
 8000640:	1a9b      	subs	r3, r3, r2
 8000642:	40de      	lsrs	r6, r3
 8000644:	003b      	movs	r3, r7
 8000646:	4333      	orrs	r3, r6
 8000648:	e7cd      	b.n	80005e6 <__udivmoddi4+0x132>
 800064a:	46c0      	nop			; (mov r8, r8)

0800064c <__clzdi2>:
 800064c:	b510      	push	{r4, lr}
 800064e:	2900      	cmp	r1, #0
 8000650:	d103      	bne.n	800065a <__clzdi2+0xe>
 8000652:	f000 f807 	bl	8000664 <__clzsi2>
 8000656:	3020      	adds	r0, #32
 8000658:	e002      	b.n	8000660 <__clzdi2+0x14>
 800065a:	0008      	movs	r0, r1
 800065c:	f000 f802 	bl	8000664 <__clzsi2>
 8000660:	bd10      	pop	{r4, pc}
 8000662:	46c0      	nop			; (mov r8, r8)

08000664 <__clzsi2>:
 8000664:	211c      	movs	r1, #28
 8000666:	2301      	movs	r3, #1
 8000668:	041b      	lsls	r3, r3, #16
 800066a:	4298      	cmp	r0, r3
 800066c:	d301      	bcc.n	8000672 <__clzsi2+0xe>
 800066e:	0c00      	lsrs	r0, r0, #16
 8000670:	3910      	subs	r1, #16
 8000672:	0a1b      	lsrs	r3, r3, #8
 8000674:	4298      	cmp	r0, r3
 8000676:	d301      	bcc.n	800067c <__clzsi2+0x18>
 8000678:	0a00      	lsrs	r0, r0, #8
 800067a:	3908      	subs	r1, #8
 800067c:	091b      	lsrs	r3, r3, #4
 800067e:	4298      	cmp	r0, r3
 8000680:	d301      	bcc.n	8000686 <__clzsi2+0x22>
 8000682:	0900      	lsrs	r0, r0, #4
 8000684:	3904      	subs	r1, #4
 8000686:	a202      	add	r2, pc, #8	; (adr r2, 8000690 <__clzsi2+0x2c>)
 8000688:	5c10      	ldrb	r0, [r2, r0]
 800068a:	1840      	adds	r0, r0, r1
 800068c:	4770      	bx	lr
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	02020304 	.word	0x02020304
 8000694:	01010101 	.word	0x01010101
	...

080006a0 <select_mux>:
		{27, 26},
		{25, 24}
};


void select_mux(uint8_t sel){ //selection de la bonne entrée du MUX
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	0002      	movs	r2, r0
 80006a8:	1dfb      	adds	r3, r7, #7
 80006aa:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOH, S0_Pin, (sel & 0b0001)>>0);
 80006ac:	1dfb      	adds	r3, r7, #7
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2201      	movs	r2, #1
 80006b2:	4013      	ands	r3, r2
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	4817      	ldr	r0, [pc, #92]	; (8000714 <select_mux+0x74>)
 80006b8:	001a      	movs	r2, r3
 80006ba:	2102      	movs	r1, #2
 80006bc:	f002 f98c 	bl	80029d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, S1_Pin, (sel & 0b0010)>>1);
 80006c0:	1dfb      	adds	r3, r7, #7
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	105b      	asrs	r3, r3, #1
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	2201      	movs	r2, #1
 80006ca:	4013      	ands	r3, r2
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	23a0      	movs	r3, #160	; 0xa0
 80006d0:	05db      	lsls	r3, r3, #23
 80006d2:	2101      	movs	r1, #1
 80006d4:	0018      	movs	r0, r3
 80006d6:	f002 f97f 	bl	80029d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOH, S2_Pin, (sel & 0b0100)>>2);
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	109b      	asrs	r3, r3, #2
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	2201      	movs	r2, #1
 80006e4:	4013      	ands	r3, r2
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	480a      	ldr	r0, [pc, #40]	; (8000714 <select_mux+0x74>)
 80006ea:	001a      	movs	r2, r3
 80006ec:	2101      	movs	r1, #1
 80006ee:	f002 f973 	bl	80029d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, S3_Pin, (sel & 0b1000)>>3);
 80006f2:	1dfb      	adds	r3, r7, #7
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	10db      	asrs	r3, r3, #3
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	2201      	movs	r2, #1
 80006fc:	4013      	ands	r3, r2
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	019b      	lsls	r3, r3, #6
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <select_mux+0x78>)
 8000706:	0019      	movs	r1, r3
 8000708:	f002 f966 	bl	80029d8 <HAL_GPIO_WritePin>
}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	b002      	add	sp, #8
 8000712:	bd80      	pop	{r7, pc}
 8000714:	50001c00 	.word	0x50001c00
 8000718:	50000800 	.word	0x50000800

0800071c <scan_sensor_unit>:
	HAL_GPIO_WritePin(GPIOA, LED_EN_Pin, 1); //allume les LEDs des capteurs, à NE PAS OUBLIER !!! --> sinon pas de lecture :(
	for (int i = 0; i <= 15; i ++) scan_sensor_unit(i);
	HAL_GPIO_WritePin(GPIOA, LED_EN_Pin, 0); //éteint les LEDs des capteurs, à NE PAS OUBLIER !!! --> sinon plus de conso :(
}

void scan_sensor_unit(uint8_t rangee_active) {
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	0002      	movs	r2, r0
 8000724:	1dfb      	adds	r3, r7, #7
 8000726:	701a      	strb	r2, [r3, #0]
	uint8_t sensor_pair_value = 0b11; //combine les lectures des 2 capteurs d'une rangée
 8000728:	230f      	movs	r3, #15
 800072a:	18fb      	adds	r3, r7, r3
 800072c:	2203      	movs	r2, #3
 800072e:	701a      	strb	r2, [r3, #0]
	uint8_t capteur_ext; //lecture analogique du capteur extérieur
	uint8_t capteur_int; //lecture analogique du capteur intérieur

	sprintf(buffer_rangee_active, "%d", rangee_active);
 8000730:	1dfb      	adds	r3, r7, #7
 8000732:	781a      	ldrb	r2, [r3, #0]
 8000734:	49e4      	ldr	r1, [pc, #912]	; (8000ac8 <scan_sensor_unit+0x3ac>)
 8000736:	4be5      	ldr	r3, [pc, #916]	; (8000acc <scan_sensor_unit+0x3b0>)
 8000738:	0018      	movs	r0, r3
 800073a:	f004 fdc9 	bl	80052d0 <siprintf>

	sprintf(buffer_compteur_abeilles_entrantes, "%lu", compteur_abeilles_entrantes);
 800073e:	4be4      	ldr	r3, [pc, #912]	; (8000ad0 <scan_sensor_unit+0x3b4>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	49e4      	ldr	r1, [pc, #912]	; (8000ad4 <scan_sensor_unit+0x3b8>)
 8000744:	4be4      	ldr	r3, [pc, #912]	; (8000ad8 <scan_sensor_unit+0x3bc>)
 8000746:	0018      	movs	r0, r3
 8000748:	f004 fdc2 	bl	80052d0 <siprintf>

	if (rangee_active > 7) { //pour les 8 dernières rangées (8 --> 15)
 800074c:	1dfb      	adds	r3, r7, #7
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	2b07      	cmp	r3, #7
 8000752:	d95e      	bls.n	8000812 <scan_sensor_unit+0xf6>
		hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000754:	4be1      	ldr	r3, [pc, #900]	; (8000adc <scan_sensor_unit+0x3c0>)
 8000756:	2201      	movs	r2, #1
 8000758:	611a      	str	r2, [r3, #16]
		  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800075a:	4be0      	ldr	r3, [pc, #896]	; (8000adc <scan_sensor_unit+0x3c0>)
 800075c:	0018      	movs	r0, r3
 800075e:	f001 f8a5 	bl	80018ac <HAL_ADC_Init>
 8000762:	1e03      	subs	r3, r0, #0
 8000764:	d001      	beq.n	800076a <scan_sensor_unit+0x4e>
		  {
		    Error_Handler();
 8000766:	f000 fd89 	bl	800127c <Error_Handler>
		  }

		select_mux(sensor_pair[rangee_active][0]);
 800076a:	1dfb      	adds	r3, r7, #7
 800076c:	781a      	ldrb	r2, [r3, #0]
 800076e:	4bdc      	ldr	r3, [pc, #880]	; (8000ae0 <scan_sensor_unit+0x3c4>)
 8000770:	0052      	lsls	r2, r2, #1
 8000772:	5cd3      	ldrb	r3, [r2, r3]
 8000774:	0018      	movs	r0, r3
 8000776:	f7ff ff93 	bl	80006a0 <select_mux>

		HAL_ADC_Start(&hadc);
 800077a:	4bd8      	ldr	r3, [pc, #864]	; (8000adc <scan_sensor_unit+0x3c0>)
 800077c:	0018      	movs	r0, r3
 800077e:	f001 fa09 	bl	8001b94 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 1);
 8000782:	4bd6      	ldr	r3, [pc, #856]	; (8000adc <scan_sensor_unit+0x3c0>)
 8000784:	2101      	movs	r1, #1
 8000786:	0018      	movs	r0, r3
 8000788:	f001 fa98 	bl	8001cbc <HAL_ADC_PollForConversion>
		capteur_ext = (uint8_t)HAL_ADC_GetValue(&hadc); //lecture du capteur extérieur sur le MUX1
 800078c:	4bd3      	ldr	r3, [pc, #844]	; (8000adc <scan_sensor_unit+0x3c0>)
 800078e:	0018      	movs	r0, r3
 8000790:	f001 fb30 	bl	8001df4 <HAL_ADC_GetValue>
 8000794:	0002      	movs	r2, r0
 8000796:	240e      	movs	r4, #14
 8000798:	193b      	adds	r3, r7, r4
 800079a:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Stop(&hadc);
 800079c:	4bcf      	ldr	r3, [pc, #828]	; (8000adc <scan_sensor_unit+0x3c0>)
 800079e:	0018      	movs	r0, r3
 80007a0:	f001 fa4c 	bl	8001c3c <HAL_ADC_Stop>

		select_mux(sensor_pair[rangee_active][1]);
 80007a4:	1dfb      	adds	r3, r7, #7
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	4acd      	ldr	r2, [pc, #820]	; (8000ae0 <scan_sensor_unit+0x3c4>)
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	18d3      	adds	r3, r2, r3
 80007ae:	3301      	adds	r3, #1
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	0018      	movs	r0, r3
 80007b4:	f7ff ff74 	bl	80006a0 <select_mux>
		HAL_ADC_Start(&hadc);
 80007b8:	4bc8      	ldr	r3, [pc, #800]	; (8000adc <scan_sensor_unit+0x3c0>)
 80007ba:	0018      	movs	r0, r3
 80007bc:	f001 f9ea 	bl	8001b94 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 1);
 80007c0:	4bc6      	ldr	r3, [pc, #792]	; (8000adc <scan_sensor_unit+0x3c0>)
 80007c2:	2101      	movs	r1, #1
 80007c4:	0018      	movs	r0, r3
 80007c6:	f001 fa79 	bl	8001cbc <HAL_ADC_PollForConversion>
		capteur_int = (uint8_t)HAL_ADC_GetValue(&hadc); //lecture du capteur intérieur sur le MUX1
 80007ca:	4bc4      	ldr	r3, [pc, #784]	; (8000adc <scan_sensor_unit+0x3c0>)
 80007cc:	0018      	movs	r0, r3
 80007ce:	f001 fb11 	bl	8001df4 <HAL_ADC_GetValue>
 80007d2:	0002      	movs	r2, r0
 80007d4:	230d      	movs	r3, #13
 80007d6:	18fb      	adds	r3, r7, r3
 80007d8:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Stop(&hadc);
 80007da:	4bc0      	ldr	r3, [pc, #768]	; (8000adc <scan_sensor_unit+0x3c0>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f001 fa2d 	bl	8001c3c <HAL_ADC_Stop>

		if (capteur_ext < SEUIL_DECLENCHEMENT) {
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b1d      	cmp	r3, #29
 80007e8:	d806      	bhi.n	80007f8 <scan_sensor_unit+0xdc>
			sensor_pair_value = sensor_pair_value & 0b01;
 80007ea:	220f      	movs	r2, #15
 80007ec:	18bb      	adds	r3, r7, r2
 80007ee:	18ba      	adds	r2, r7, r2
 80007f0:	7812      	ldrb	r2, [r2, #0]
 80007f2:	2101      	movs	r1, #1
 80007f4:	400a      	ands	r2, r1
 80007f6:	701a      	strb	r2, [r3, #0]
		}
		if (capteur_int < SEUIL_DECLENCHEMENT) {
 80007f8:	230d      	movs	r3, #13
 80007fa:	18fb      	adds	r3, r7, r3
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2b1d      	cmp	r3, #29
 8000800:	d865      	bhi.n	80008ce <scan_sensor_unit+0x1b2>
			sensor_pair_value = sensor_pair_value & 0b10;
 8000802:	220f      	movs	r2, #15
 8000804:	18bb      	adds	r3, r7, r2
 8000806:	18ba      	adds	r2, r7, r2
 8000808:	7812      	ldrb	r2, [r2, #0]
 800080a:	2102      	movs	r1, #2
 800080c:	400a      	ands	r2, r1
 800080e:	701a      	strb	r2, [r3, #0]
 8000810:	e05d      	b.n	80008ce <scan_sensor_unit+0x1b2>
		}
	}
	else {					  //pour les 8 premières rangées (0 --> 7)
		hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_BACKWARD;
 8000812:	4bb2      	ldr	r3, [pc, #712]	; (8000adc <scan_sensor_unit+0x3c0>)
 8000814:	2202      	movs	r2, #2
 8000816:	611a      	str	r2, [r3, #16]
		  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000818:	4bb0      	ldr	r3, [pc, #704]	; (8000adc <scan_sensor_unit+0x3c0>)
 800081a:	0018      	movs	r0, r3
 800081c:	f001 f846 	bl	80018ac <HAL_ADC_Init>
 8000820:	1e03      	subs	r3, r0, #0
 8000822:	d001      	beq.n	8000828 <scan_sensor_unit+0x10c>
		  {
		    Error_Handler();
 8000824:	f000 fd2a 	bl	800127c <Error_Handler>
		  }

		select_mux(sensor_pair[rangee_active][0]);
 8000828:	1dfb      	adds	r3, r7, #7
 800082a:	781a      	ldrb	r2, [r3, #0]
 800082c:	4bac      	ldr	r3, [pc, #688]	; (8000ae0 <scan_sensor_unit+0x3c4>)
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	5cd3      	ldrb	r3, [r2, r3]
 8000832:	0018      	movs	r0, r3
 8000834:	f7ff ff34 	bl	80006a0 <select_mux>

		HAL_ADC_Start(&hadc);
 8000838:	4ba8      	ldr	r3, [pc, #672]	; (8000adc <scan_sensor_unit+0x3c0>)
 800083a:	0018      	movs	r0, r3
 800083c:	f001 f9aa 	bl	8001b94 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 1);
 8000840:	4ba6      	ldr	r3, [pc, #664]	; (8000adc <scan_sensor_unit+0x3c0>)
 8000842:	2101      	movs	r1, #1
 8000844:	0018      	movs	r0, r3
 8000846:	f001 fa39 	bl	8001cbc <HAL_ADC_PollForConversion>
		capteur_ext = (uint8_t)HAL_ADC_GetValue(&hadc); //lecture du capteur extérieur sur le MUX2
 800084a:	4ba4      	ldr	r3, [pc, #656]	; (8000adc <scan_sensor_unit+0x3c0>)
 800084c:	0018      	movs	r0, r3
 800084e:	f001 fad1 	bl	8001df4 <HAL_ADC_GetValue>
 8000852:	0002      	movs	r2, r0
 8000854:	240e      	movs	r4, #14
 8000856:	193b      	adds	r3, r7, r4
 8000858:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Stop(&hadc);
 800085a:	4ba0      	ldr	r3, [pc, #640]	; (8000adc <scan_sensor_unit+0x3c0>)
 800085c:	0018      	movs	r0, r3
 800085e:	f001 f9ed 	bl	8001c3c <HAL_ADC_Stop>

		select_mux(sensor_pair[rangee_active][1]);
 8000862:	1dfb      	adds	r3, r7, #7
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	4a9e      	ldr	r2, [pc, #632]	; (8000ae0 <scan_sensor_unit+0x3c4>)
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	18d3      	adds	r3, r2, r3
 800086c:	3301      	adds	r3, #1
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	0018      	movs	r0, r3
 8000872:	f7ff ff15 	bl	80006a0 <select_mux>
		HAL_ADC_Start(&hadc);
 8000876:	4b99      	ldr	r3, [pc, #612]	; (8000adc <scan_sensor_unit+0x3c0>)
 8000878:	0018      	movs	r0, r3
 800087a:	f001 f98b 	bl	8001b94 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 1);
 800087e:	4b97      	ldr	r3, [pc, #604]	; (8000adc <scan_sensor_unit+0x3c0>)
 8000880:	2101      	movs	r1, #1
 8000882:	0018      	movs	r0, r3
 8000884:	f001 fa1a 	bl	8001cbc <HAL_ADC_PollForConversion>
		capteur_int = (uint8_t)HAL_ADC_GetValue(&hadc); //lecture du capteur intérieur sur le MUX2
 8000888:	4b94      	ldr	r3, [pc, #592]	; (8000adc <scan_sensor_unit+0x3c0>)
 800088a:	0018      	movs	r0, r3
 800088c:	f001 fab2 	bl	8001df4 <HAL_ADC_GetValue>
 8000890:	0002      	movs	r2, r0
 8000892:	230d      	movs	r3, #13
 8000894:	18fb      	adds	r3, r7, r3
 8000896:	701a      	strb	r2, [r3, #0]
		HAL_ADC_Stop(&hadc);
 8000898:	4b90      	ldr	r3, [pc, #576]	; (8000adc <scan_sensor_unit+0x3c0>)
 800089a:	0018      	movs	r0, r3
 800089c:	f001 f9ce 	bl	8001c3c <HAL_ADC_Stop>
		if (capteur_ext < SEUIL_DECLENCHEMENT) {
 80008a0:	193b      	adds	r3, r7, r4
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b1d      	cmp	r3, #29
 80008a6:	d806      	bhi.n	80008b6 <scan_sensor_unit+0x19a>
			sensor_pair_value = sensor_pair_value & 0b01;
 80008a8:	220f      	movs	r2, #15
 80008aa:	18bb      	adds	r3, r7, r2
 80008ac:	18ba      	adds	r2, r7, r2
 80008ae:	7812      	ldrb	r2, [r2, #0]
 80008b0:	2101      	movs	r1, #1
 80008b2:	400a      	ands	r2, r1
 80008b4:	701a      	strb	r2, [r3, #0]
		}
		if (capteur_int < SEUIL_DECLENCHEMENT) {
 80008b6:	230d      	movs	r3, #13
 80008b8:	18fb      	adds	r3, r7, r3
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b1d      	cmp	r3, #29
 80008be:	d806      	bhi.n	80008ce <scan_sensor_unit+0x1b2>
			sensor_pair_value = sensor_pair_value & 0b10;
 80008c0:	220f      	movs	r2, #15
 80008c2:	18bb      	adds	r3, r7, r2
 80008c4:	18ba      	adds	r2, r7, r2
 80008c6:	7812      	ldrb	r2, [r2, #0]
 80008c8:	2102      	movs	r1, #2
 80008ca:	400a      	ands	r2, r1
 80008cc:	701a      	strb	r2, [r3, #0]
		}
	}

	sprintf(buffer_rangee_active, "%d\r\n", sensor_pair_value);
 80008ce:	230f      	movs	r3, #15
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	781a      	ldrb	r2, [r3, #0]
 80008d4:	4983      	ldr	r1, [pc, #524]	; (8000ae4 <scan_sensor_unit+0x3c8>)
 80008d6:	4b7d      	ldr	r3, [pc, #500]	; (8000acc <scan_sensor_unit+0x3b0>)
 80008d8:	0018      	movs	r0, r3
 80008da:	f004 fcf9 	bl	80052d0 <siprintf>
	HAL_UART_Transmit(&huart2, buffer_rangee_active, sizeof(buffer_rangee_active), HAL_MAX_DELAY);
 80008de:	2301      	movs	r3, #1
 80008e0:	425b      	negs	r3, r3
 80008e2:	497a      	ldr	r1, [pc, #488]	; (8000acc <scan_sensor_unit+0x3b0>)
 80008e4:	4880      	ldr	r0, [pc, #512]	; (8000ae8 <scan_sensor_unit+0x3cc>)
 80008e6:	220a      	movs	r2, #10
 80008e8:	f003 fc18 	bl	800411c <HAL_UART_Transmit>

	switch(sensors_state[rangee_active]) {
 80008ec:	1dfb      	adds	r3, r7, #7
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4a7e      	ldr	r2, [pc, #504]	; (8000aec <scan_sensor_unit+0x3d0>)
 80008f2:	5cd3      	ldrb	r3, [r2, r3]
 80008f4:	2b03      	cmp	r3, #3
 80008f6:	d100      	bne.n	80008fa <scan_sensor_unit+0x1de>
 80008f8:	e0a8      	b.n	8000a4c <scan_sensor_unit+0x330>
 80008fa:	dd00      	ble.n	80008fe <scan_sensor_unit+0x1e2>
 80008fc:	e105      	b.n	8000b0a <scan_sensor_unit+0x3ee>
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d100      	bne.n	8000904 <scan_sensor_unit+0x1e8>
 8000902:	e081      	b.n	8000a08 <scan_sensor_unit+0x2ec>
 8000904:	dd00      	ble.n	8000908 <scan_sensor_unit+0x1ec>
 8000906:	e100      	b.n	8000b0a <scan_sensor_unit+0x3ee>
 8000908:	2b00      	cmp	r3, #0
 800090a:	d002      	beq.n	8000912 <scan_sensor_unit+0x1f6>
 800090c:	2b01      	cmp	r3, #1
 800090e:	d042      	beq.n	8000996 <scan_sensor_unit+0x27a>
						  compteur_etats_sortie[rangee_active] += 1; //on avance dans le cycle de sortie
						  sensors_state[rangee_active] = capteurs_occupes;
					  }
				  break;
			  }
}
 8000910:	e0fb      	b.n	8000b0a <scan_sensor_unit+0x3ee>
					  HAL_GPIO_WritePin(GPIOB, LED_R_Pin, 0);
 8000912:	4b77      	ldr	r3, [pc, #476]	; (8000af0 <scan_sensor_unit+0x3d4>)
 8000914:	2200      	movs	r2, #0
 8000916:	2104      	movs	r1, #4
 8000918:	0018      	movs	r0, r3
 800091a:	f002 f85d 	bl	80029d8 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOB, LED_V_Pin, 0);
 800091e:	2380      	movs	r3, #128	; 0x80
 8000920:	00db      	lsls	r3, r3, #3
 8000922:	4873      	ldr	r0, [pc, #460]	; (8000af0 <scan_sensor_unit+0x3d4>)
 8000924:	2200      	movs	r2, #0
 8000926:	0019      	movs	r1, r3
 8000928:	f002 f856 	bl	80029d8 <HAL_GPIO_WritePin>
					  compteur_etats_entree[rangee_active] = 0; //on réinitialise l'avancée dans le cycle d'entrée
 800092c:	1dfb      	adds	r3, r7, #7
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	4a70      	ldr	r2, [pc, #448]	; (8000af4 <scan_sensor_unit+0x3d8>)
 8000932:	2100      	movs	r1, #0
 8000934:	54d1      	strb	r1, [r2, r3]
					  compteur_etats_sortie[rangee_active] = 0; //on réinitialise l'avancée dans le cycle de sortie
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	4a6f      	ldr	r2, [pc, #444]	; (8000af8 <scan_sensor_unit+0x3dc>)
 800093c:	2100      	movs	r1, #0
 800093e:	54d1      	strb	r1, [r2, r3]
					  if(sensor_pair_value == 0b10){ //si le capteur intérieur est occupé
 8000940:	230f      	movs	r3, #15
 8000942:	18fb      	adds	r3, r7, r3
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b02      	cmp	r3, #2
 8000948:	d10f      	bne.n	800096a <scan_sensor_unit+0x24e>
						  compteur_etats_sortie[rangee_active] += 1; //on avance dans le cycle de sortie
 800094a:	1dfb      	adds	r3, r7, #7
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	4a6a      	ldr	r2, [pc, #424]	; (8000af8 <scan_sensor_unit+0x3dc>)
 8000950:	5cd2      	ldrb	r2, [r2, r3]
 8000952:	1dfb      	adds	r3, r7, #7
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	3201      	adds	r2, #1
 8000958:	b2d1      	uxtb	r1, r2
 800095a:	4a67      	ldr	r2, [pc, #412]	; (8000af8 <scan_sensor_unit+0x3dc>)
 800095c:	54d1      	strb	r1, [r2, r3]
						  sensors_state[rangee_active] = interieur_occupe;
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	4a62      	ldr	r2, [pc, #392]	; (8000aec <scan_sensor_unit+0x3d0>)
 8000964:	2103      	movs	r1, #3
 8000966:	54d1      	strb	r1, [r2, r3]
				  break;
 8000968:	e0a7      	b.n	8000aba <scan_sensor_unit+0x39e>
					  else if (sensor_pair_value == 0b00) { //si les capteurs sont occupés
 800096a:	230f      	movs	r3, #15
 800096c:	18fb      	adds	r3, r7, r3
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d000      	beq.n	8000976 <scan_sensor_unit+0x25a>
 8000974:	e0a1      	b.n	8000aba <scan_sensor_unit+0x39e>
					  	  compteur_etats_sortie[rangee_active] += 1; //on avance dans le cycle de sortie
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	4a5f      	ldr	r2, [pc, #380]	; (8000af8 <scan_sensor_unit+0x3dc>)
 800097c:	5cd2      	ldrb	r2, [r2, r3]
 800097e:	1dfb      	adds	r3, r7, #7
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	3201      	adds	r2, #1
 8000984:	b2d1      	uxtb	r1, r2
 8000986:	4a5c      	ldr	r2, [pc, #368]	; (8000af8 <scan_sensor_unit+0x3dc>)
 8000988:	54d1      	strb	r1, [r2, r3]
					  	  sensors_state[rangee_active] = capteurs_occupes;
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	4a57      	ldr	r2, [pc, #348]	; (8000aec <scan_sensor_unit+0x3d0>)
 8000990:	2102      	movs	r1, #2
 8000992:	54d1      	strb	r1, [r2, r3]
				  break;
 8000994:	e091      	b.n	8000aba <scan_sensor_unit+0x39e>
					  HAL_GPIO_WritePin(GPIOB, LED_R_Pin, 0);
 8000996:	4b56      	ldr	r3, [pc, #344]	; (8000af0 <scan_sensor_unit+0x3d4>)
 8000998:	2200      	movs	r2, #0
 800099a:	2104      	movs	r1, #4
 800099c:	0018      	movs	r0, r3
 800099e:	f002 f81b 	bl	80029d8 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOB, LED_V_Pin, 1);
 80009a2:	2380      	movs	r3, #128	; 0x80
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	4852      	ldr	r0, [pc, #328]	; (8000af0 <scan_sensor_unit+0x3d4>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	0019      	movs	r1, r3
 80009ac:	f002 f814 	bl	80029d8 <HAL_GPIO_WritePin>
					  if (sensor_pair_value == 0b11) { //si les capteurs sont libres
 80009b0:	230f      	movs	r3, #15
 80009b2:	18fb      	adds	r3, r7, r3
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b03      	cmp	r3, #3
 80009b8:	d000      	beq.n	80009bc <scan_sensor_unit+0x2a0>
 80009ba:	e080      	b.n	8000abe <scan_sensor_unit+0x3a2>
						  if (compteur_etats_sortie[rangee_active] >= 1) { //si on a fait 3 ou + étapes dans le cycle de sortie
 80009bc:	1dfb      	adds	r3, r7, #7
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	4a4d      	ldr	r2, [pc, #308]	; (8000af8 <scan_sensor_unit+0x3dc>)
 80009c2:	5cd3      	ldrb	r3, [r2, r3]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d019      	beq.n	80009fc <scan_sensor_unit+0x2e0>
							  compteur_abeilles_sortantes += 1; //une abeille est sortie, on incrémente le compteur
 80009c8:	4b4c      	ldr	r3, [pc, #304]	; (8000afc <scan_sensor_unit+0x3e0>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	1c5a      	adds	r2, r3, #1
 80009ce:	4b4b      	ldr	r3, [pc, #300]	; (8000afc <scan_sensor_unit+0x3e0>)
 80009d0:	601a      	str	r2, [r3, #0]
							  HAL_UART_Transmit(&huart2, (uint8_t*)"abeille sortie rangee ", sizeof("abeille sortie rangee "), HAL_MAX_DELAY);
 80009d2:	2301      	movs	r3, #1
 80009d4:	425b      	negs	r3, r3
 80009d6:	494a      	ldr	r1, [pc, #296]	; (8000b00 <scan_sensor_unit+0x3e4>)
 80009d8:	4843      	ldr	r0, [pc, #268]	; (8000ae8 <scan_sensor_unit+0x3cc>)
 80009da:	2217      	movs	r2, #23
 80009dc:	f003 fb9e 	bl	800411c <HAL_UART_Transmit>
							  HAL_UART_Transmit(&huart2, buffer_rangee_active, sizeof(buffer_rangee_active), HAL_MAX_DELAY);
 80009e0:	2301      	movs	r3, #1
 80009e2:	425b      	negs	r3, r3
 80009e4:	4939      	ldr	r1, [pc, #228]	; (8000acc <scan_sensor_unit+0x3b0>)
 80009e6:	4840      	ldr	r0, [pc, #256]	; (8000ae8 <scan_sensor_unit+0x3cc>)
 80009e8:	220a      	movs	r2, #10
 80009ea:	f003 fb97 	bl	800411c <HAL_UART_Transmit>
							  HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", sizeof("\r\n"), HAL_MAX_DELAY);
 80009ee:	2301      	movs	r3, #1
 80009f0:	425b      	negs	r3, r3
 80009f2:	4944      	ldr	r1, [pc, #272]	; (8000b04 <scan_sensor_unit+0x3e8>)
 80009f4:	483c      	ldr	r0, [pc, #240]	; (8000ae8 <scan_sensor_unit+0x3cc>)
 80009f6:	2203      	movs	r2, #3
 80009f8:	f003 fb90 	bl	800411c <HAL_UART_Transmit>
						  sensors_state[rangee_active] = capteurs_libres;
 80009fc:	1dfb      	adds	r3, r7, #7
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	4a3a      	ldr	r2, [pc, #232]	; (8000aec <scan_sensor_unit+0x3d0>)
 8000a02:	2100      	movs	r1, #0
 8000a04:	54d1      	strb	r1, [r2, r3]
				  break;
 8000a06:	e05a      	b.n	8000abe <scan_sensor_unit+0x3a2>
					  HAL_GPIO_WritePin(GPIOB, LED_R_Pin, 1);
 8000a08:	4b39      	ldr	r3, [pc, #228]	; (8000af0 <scan_sensor_unit+0x3d4>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	2104      	movs	r1, #4
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f001 ffe2 	bl	80029d8 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOB, LED_V_Pin, 1);
 8000a14:	2380      	movs	r3, #128	; 0x80
 8000a16:	00db      	lsls	r3, r3, #3
 8000a18:	4835      	ldr	r0, [pc, #212]	; (8000af0 <scan_sensor_unit+0x3d4>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	0019      	movs	r1, r3
 8000a1e:	f001 ffdb 	bl	80029d8 <HAL_GPIO_WritePin>
					  if (sensor_pair_value == 0b01) { //si le capteur extérieur est occupé
 8000a22:	230f      	movs	r3, #15
 8000a24:	18fb      	adds	r3, r7, r3
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d14a      	bne.n	8000ac2 <scan_sensor_unit+0x3a6>
						  compteur_etats_sortie[rangee_active] += 1; //on avance dans le cycle de sortie
 8000a2c:	1dfb      	adds	r3, r7, #7
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4a31      	ldr	r2, [pc, #196]	; (8000af8 <scan_sensor_unit+0x3dc>)
 8000a32:	5cd2      	ldrb	r2, [r2, r3]
 8000a34:	1dfb      	adds	r3, r7, #7
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	3201      	adds	r2, #1
 8000a3a:	b2d1      	uxtb	r1, r2
 8000a3c:	4a2e      	ldr	r2, [pc, #184]	; (8000af8 <scan_sensor_unit+0x3dc>)
 8000a3e:	54d1      	strb	r1, [r2, r3]
						  sensors_state[rangee_active] = exterieur_occupe;
 8000a40:	1dfb      	adds	r3, r7, #7
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	4a29      	ldr	r2, [pc, #164]	; (8000aec <scan_sensor_unit+0x3d0>)
 8000a46:	2101      	movs	r1, #1
 8000a48:	54d1      	strb	r1, [r2, r3]
				  break;
 8000a4a:	e03a      	b.n	8000ac2 <scan_sensor_unit+0x3a6>
					  HAL_GPIO_WritePin(GPIOB, LED_R_Pin, 1);
 8000a4c:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <scan_sensor_unit+0x3d4>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	2104      	movs	r1, #4
 8000a52:	0018      	movs	r0, r3
 8000a54:	f001 ffc0 	bl	80029d8 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOB, LED_V_Pin, 0);
 8000a58:	2380      	movs	r3, #128	; 0x80
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	4824      	ldr	r0, [pc, #144]	; (8000af0 <scan_sensor_unit+0x3d4>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	0019      	movs	r1, r3
 8000a62:	f001 ffb9 	bl	80029d8 <HAL_GPIO_WritePin>
					  if (sensor_pair_value == 0b01) { //si le capteur extérieur est occupé
 8000a66:	230f      	movs	r3, #15
 8000a68:	18fb      	adds	r3, r7, r3
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d10f      	bne.n	8000a90 <scan_sensor_unit+0x374>
					  	  compteur_etats_sortie[rangee_active] += 1; //on avance dans le cycle de sortie
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	4a20      	ldr	r2, [pc, #128]	; (8000af8 <scan_sensor_unit+0x3dc>)
 8000a76:	5cd2      	ldrb	r2, [r2, r3]
 8000a78:	1dfb      	adds	r3, r7, #7
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	3201      	adds	r2, #1
 8000a7e:	b2d1      	uxtb	r1, r2
 8000a80:	4a1d      	ldr	r2, [pc, #116]	; (8000af8 <scan_sensor_unit+0x3dc>)
 8000a82:	54d1      	strb	r1, [r2, r3]
					  	  sensors_state[rangee_active] = exterieur_occupe;
 8000a84:	1dfb      	adds	r3, r7, #7
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4a18      	ldr	r2, [pc, #96]	; (8000aec <scan_sensor_unit+0x3d0>)
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	54d1      	strb	r1, [r2, r3]
				  break;
 8000a8e:	e03b      	b.n	8000b08 <scan_sensor_unit+0x3ec>
					  else if (sensor_pair_value == 0b00) { //si les capteurs sont occupés
 8000a90:	230f      	movs	r3, #15
 8000a92:	18fb      	adds	r3, r7, r3
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d136      	bne.n	8000b08 <scan_sensor_unit+0x3ec>
						  compteur_etats_sortie[rangee_active] += 1; //on avance dans le cycle de sortie
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	4a16      	ldr	r2, [pc, #88]	; (8000af8 <scan_sensor_unit+0x3dc>)
 8000aa0:	5cd2      	ldrb	r2, [r2, r3]
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	3201      	adds	r2, #1
 8000aa8:	b2d1      	uxtb	r1, r2
 8000aaa:	4a13      	ldr	r2, [pc, #76]	; (8000af8 <scan_sensor_unit+0x3dc>)
 8000aac:	54d1      	strb	r1, [r2, r3]
						  sensors_state[rangee_active] = capteurs_occupes;
 8000aae:	1dfb      	adds	r3, r7, #7
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	4a0e      	ldr	r2, [pc, #56]	; (8000aec <scan_sensor_unit+0x3d0>)
 8000ab4:	2102      	movs	r1, #2
 8000ab6:	54d1      	strb	r1, [r2, r3]
				  break;
 8000ab8:	e026      	b.n	8000b08 <scan_sensor_unit+0x3ec>
				  break;
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	e025      	b.n	8000b0a <scan_sensor_unit+0x3ee>
				  break;
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	e023      	b.n	8000b0a <scan_sensor_unit+0x3ee>
				  break;
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	e021      	b.n	8000b0a <scan_sensor_unit+0x3ee>
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	08005ba8 	.word	0x08005ba8
 8000acc:	200001bc 	.word	0x200001bc
 8000ad0:	20000188 	.word	0x20000188
 8000ad4:	08005bac 	.word	0x08005bac
 8000ad8:	20000190 	.word	0x20000190
 8000adc:	200001c8 	.word	0x200001c8
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	08005bb0 	.word	0x08005bb0
 8000ae8:	20000368 	.word	0x20000368
 8000aec:	20000178 	.word	0x20000178
 8000af0:	50000400 	.word	0x50000400
 8000af4:	200001ac 	.word	0x200001ac
 8000af8:	2000019c 	.word	0x2000019c
 8000afc:	2000018c 	.word	0x2000018c
 8000b00:	08005bb8 	.word	0x08005bb8
 8000b04:	08005bd0 	.word	0x08005bd0
				  break;
 8000b08:	46c0      	nop			; (mov r8, r8)
}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b005      	add	sp, #20
 8000b10:	bd90      	pop	{r4, r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)

08000b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b087      	sub	sp, #28
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b1a:	f000 fe33 	bl	8001784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b1e:	f000 f849 	bl	8000bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b22:	f000 faa9 	bl	8001078 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b26:	f000 fa89 	bl	800103c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b2a:	f000 fa57 	bl	8000fdc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000b2e:	f000 f923 	bl	8000d78 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b32:	f000 f975 	bl	8000e20 <MX_TIM3_Init>
  MX_TIM21_Init();
 8000b36:	f000 f9c9 	bl	8000ecc <MX_TIM21_Init>
  MX_USART1_UART_Init();
 8000b3a:	f000 fa1b 	bl	8000f74 <MX_USART1_UART_Init>
  MX_ADC_Init();
 8000b3e:	f000 f8a7 	bl	8000c90 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b42:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <main+0x8c>)
 8000b44:	0018      	movs	r0, r3
 8000b46:	f002 ff11 	bl	800396c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <main+0x90>)
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f002 ff0d 	bl	800396c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim21);
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <main+0x94>)
 8000b54:	0018      	movs	r0, r3
 8000b56:	f002 ff09 	bl	800396c <HAL_TIM_Base_Start_IT>
  /*if (HAL_OK != HAL_UART_Transmit_DMA(&huart1, "\xF0\xF0\xF0\xF0", 4))     	// Fire Transmission DMA
  	{
  		Error_Handler();
  	}*/
  //*message = "Xbee - Test DMA RX TX...\r\n ";
  uint8_t aTextInfoStart[] = "\r\nXbEE - config...\r\n";
 8000b5a:	003b      	movs	r3, r7
 8000b5c:	4a13      	ldr	r2, [pc, #76]	; (8000bac <main+0x98>)
 8000b5e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000b60:	c313      	stmia	r3!, {r0, r1, r4}
 8000b62:	ca03      	ldmia	r2!, {r0, r1}
 8000b64:	c303      	stmia	r3!, {r0, r1}
 8000b66:	7812      	ldrb	r2, [r2, #0]
 8000b68:	701a      	strb	r2, [r3, #0]

  HAL_UART_Transmit(&huart2, aTextInfoStart, strlen(aTextInfoStart),HAL_MAX_DELAY);
 8000b6a:	003b      	movs	r3, r7
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f7ff facb 	bl	8000108 <strlen>
 8000b72:	0003      	movs	r3, r0
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	2301      	movs	r3, #1
 8000b78:	425b      	negs	r3, r3
 8000b7a:	0039      	movs	r1, r7
 8000b7c:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <main+0x9c>)
 8000b7e:	f003 facd 	bl	800411c <HAL_UART_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //sysbee_app_fsm();
	  //scan_sensors();
	  HAL_GPIO_WritePin(GPIOA, LED_EN_Pin, 1); //allume les LEDs des capteurs, à NE PAS OUBLIER !!! --> sinon pas de lecture :(
 8000b82:	23a0      	movs	r3, #160	; 0xa0
 8000b84:	05db      	lsls	r3, r3, #23
 8000b86:	2201      	movs	r2, #1
 8000b88:	2120      	movs	r1, #32
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f001 ff24 	bl	80029d8 <HAL_GPIO_WritePin>
	  scan_sensor_unit(15);
 8000b90:	200f      	movs	r0, #15
 8000b92:	f7ff fdc3 	bl	800071c <scan_sensor_unit>
	  //debug_sensors();
	  HAL_Delay(100);
 8000b96:	2064      	movs	r0, #100	; 0x64
 8000b98:	f000 fe64 	bl	8001864 <HAL_Delay>
  {
 8000b9c:	e7f1      	b.n	8000b82 <main+0x6e>
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	20000224 	.word	0x20000224
 8000ba4:	20000264 	.word	0x20000264
 8000ba8:	200002a4 	.word	0x200002a4
 8000bac:	08005bf0 	.word	0x08005bf0
 8000bb0:	20000368 	.word	0x20000368

08000bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b09f      	sub	sp, #124	; 0x7c
 8000bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bba:	2440      	movs	r4, #64	; 0x40
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	2338      	movs	r3, #56	; 0x38
 8000bc2:	001a      	movs	r2, r3
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f004 fb7a 	bl	80052be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bca:	232c      	movs	r3, #44	; 0x2c
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	0018      	movs	r0, r3
 8000bd0:	2314      	movs	r3, #20
 8000bd2:	001a      	movs	r2, r3
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	f004 fb72 	bl	80052be <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	0018      	movs	r0, r3
 8000bde:	2328      	movs	r3, #40	; 0x28
 8000be0:	001a      	movs	r2, r3
 8000be2:	2100      	movs	r1, #0
 8000be4:	f004 fb6b 	bl	80052be <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be8:	4b27      	ldr	r3, [pc, #156]	; (8000c88 <SystemClock_Config+0xd4>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a27      	ldr	r2, [pc, #156]	; (8000c8c <SystemClock_Config+0xd8>)
 8000bee:	401a      	ands	r2, r3
 8000bf0:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <SystemClock_Config+0xd4>)
 8000bf2:	2180      	movs	r1, #128	; 0x80
 8000bf4:	0109      	lsls	r1, r1, #4
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000bfa:	0021      	movs	r1, r4
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2210      	movs	r2, #16
 8000c00:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	2201      	movs	r2, #1
 8000c06:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	22a0      	movs	r2, #160	; 0xa0
 8000c12:	0212      	lsls	r2, r2, #8
 8000c14:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	2200      	movs	r2, #0
 8000c1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f001 fef8 	bl	8002a14 <HAL_RCC_OscConfig>
 8000c24:	1e03      	subs	r3, r0, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000c28:	f000 fb28 	bl	800127c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2c:	212c      	movs	r1, #44	; 0x2c
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	220f      	movs	r2, #15
 8000c32:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	2200      	movs	r2, #0
 8000c38:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2100      	movs	r1, #0
 8000c50:	0018      	movs	r0, r3
 8000c52:	f002 fab3 	bl	80031bc <HAL_RCC_ClockConfig>
 8000c56:	1e03      	subs	r3, r0, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000c5a:	f000 fb0f 	bl	800127c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2203      	movs	r2, #3
 8000c62:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	0018      	movs	r0, r3
 8000c74:	f002 fcc6 	bl	8003604 <HAL_RCCEx_PeriphCLKConfig>
 8000c78:	1e03      	subs	r3, r0, #0
 8000c7a:	d001      	beq.n	8000c80 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000c7c:	f000 fafe 	bl	800127c <Error_Handler>
  }
}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b01f      	add	sp, #124	; 0x7c
 8000c86:	bd90      	pop	{r4, r7, pc}
 8000c88:	40007000 	.word	0x40007000
 8000c8c:	ffffe7ff 	.word	0xffffe7ff

08000c90 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c96:	003b      	movs	r3, r7
 8000c98:	0018      	movs	r0, r3
 8000c9a:	2308      	movs	r3, #8
 8000c9c:	001a      	movs	r2, r3
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	f004 fb0d 	bl	80052be <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000ca4:	4b30      	ldr	r3, [pc, #192]	; (8000d68 <MX_ADC_Init+0xd8>)
 8000ca6:	4a31      	ldr	r2, [pc, #196]	; (8000d6c <MX_ADC_Init+0xdc>)
 8000ca8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000caa:	4b2f      	ldr	r3, [pc, #188]	; (8000d68 <MX_ADC_Init+0xd8>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000cb0:	4b2d      	ldr	r3, [pc, #180]	; (8000d68 <MX_ADC_Init+0xd8>)
 8000cb2:	22c0      	movs	r2, #192	; 0xc0
 8000cb4:	0612      	lsls	r2, r2, #24
 8000cb6:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 8000cb8:	4b2b      	ldr	r3, [pc, #172]	; (8000d68 <MX_ADC_Init+0xd8>)
 8000cba:	2210      	movs	r2, #16
 8000cbc:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cbe:	4b2a      	ldr	r3, [pc, #168]	; (8000d68 <MX_ADC_Init+0xd8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000cc4:	4b28      	ldr	r3, [pc, #160]	; (8000d68 <MX_ADC_Init+0xd8>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cca:	4b27      	ldr	r3, [pc, #156]	; (8000d68 <MX_ADC_Init+0xd8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000cd0:	4b25      	ldr	r3, [pc, #148]	; (8000d68 <MX_ADC_Init+0xd8>)
 8000cd2:	2220      	movs	r2, #32
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000cd8:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <MX_ADC_Init+0xd8>)
 8000cda:	2221      	movs	r2, #33	; 0x21
 8000cdc:	2100      	movs	r1, #0
 8000cde:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ce0:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <MX_ADC_Init+0xd8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ce6:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <MX_ADC_Init+0xd8>)
 8000ce8:	22c2      	movs	r2, #194	; 0xc2
 8000cea:	32ff      	adds	r2, #255	; 0xff
 8000cec:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000cee:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <MX_ADC_Init+0xd8>)
 8000cf0:	222c      	movs	r2, #44	; 0x2c
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <MX_ADC_Init+0xd8>)
 8000cf8:	2204      	movs	r2, #4
 8000cfa:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <MX_ADC_Init+0xd8>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000d02:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <MX_ADC_Init+0xd8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000d08:	4b17      	ldr	r3, [pc, #92]	; (8000d68 <MX_ADC_Init+0xd8>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000d0e:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <MX_ADC_Init+0xd8>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <MX_ADC_Init+0xd8>)
 8000d16:	0018      	movs	r0, r3
 8000d18:	f000 fdc8 	bl	80018ac <HAL_ADC_Init>
 8000d1c:	1e03      	subs	r3, r0, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000d20:	f000 faac 	bl	800127c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d24:	003b      	movs	r3, r7
 8000d26:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <MX_ADC_Init+0xe0>)
 8000d28:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000d2a:	003b      	movs	r3, r7
 8000d2c:	2280      	movs	r2, #128	; 0x80
 8000d2e:	0152      	lsls	r2, r2, #5
 8000d30:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d32:	003a      	movs	r2, r7
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <MX_ADC_Init+0xd8>)
 8000d36:	0011      	movs	r1, r2
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f001 f867 	bl	8001e0c <HAL_ADC_ConfigChannel>
 8000d3e:	1e03      	subs	r3, r0, #0
 8000d40:	d001      	beq.n	8000d46 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000d42:	f000 fa9b 	bl	800127c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d46:	003b      	movs	r3, r7
 8000d48:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <MX_ADC_Init+0xe4>)
 8000d4a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d4c:	003a      	movs	r2, r7
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <MX_ADC_Init+0xd8>)
 8000d50:	0011      	movs	r1, r2
 8000d52:	0018      	movs	r0, r3
 8000d54:	f001 f85a 	bl	8001e0c <HAL_ADC_ConfigChannel>
 8000d58:	1e03      	subs	r3, r0, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000d5c:	f000 fa8e 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b002      	add	sp, #8
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	200001c8 	.word	0x200001c8
 8000d6c:	40012400 	.word	0x40012400
 8000d70:	04000002 	.word	0x04000002
 8000d74:	10000010 	.word	0x10000010

08000d78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d7e:	2308      	movs	r3, #8
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	0018      	movs	r0, r3
 8000d84:	2310      	movs	r3, #16
 8000d86:	001a      	movs	r2, r3
 8000d88:	2100      	movs	r1, #0
 8000d8a:	f004 fa98 	bl	80052be <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d8e:	003b      	movs	r3, r7
 8000d90:	0018      	movs	r0, r3
 8000d92:	2308      	movs	r3, #8
 8000d94:	001a      	movs	r2, r3
 8000d96:	2100      	movs	r1, #0
 8000d98:	f004 fa91 	bl	80052be <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d9c:	4b1e      	ldr	r3, [pc, #120]	; (8000e18 <MX_TIM2_Init+0xa0>)
 8000d9e:	2280      	movs	r2, #128	; 0x80
 8000da0:	05d2      	lsls	r2, r2, #23
 8000da2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 65535;
 8000da4:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <MX_TIM2_Init+0xa0>)
 8000da6:	4a1d      	ldr	r2, [pc, #116]	; (8000e1c <MX_TIM2_Init+0xa4>)
 8000da8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000daa:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <MX_TIM2_Init+0xa0>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 14;
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <MX_TIM2_Init+0xa0>)
 8000db2:	220e      	movs	r2, #14
 8000db4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <MX_TIM2_Init+0xa0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dbc:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <MX_TIM2_Init+0xa0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <MX_TIM2_Init+0xa0>)
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f002 fd91 	bl	80038ec <HAL_TIM_Base_Init>
 8000dca:	1e03      	subs	r3, r0, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000dce:	f000 fa55 	bl	800127c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd2:	2108      	movs	r1, #8
 8000dd4:	187b      	adds	r3, r7, r1
 8000dd6:	2280      	movs	r2, #128	; 0x80
 8000dd8:	0152      	lsls	r2, r2, #5
 8000dda:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ddc:	187a      	adds	r2, r7, r1
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <MX_TIM2_Init+0xa0>)
 8000de0:	0011      	movs	r1, r2
 8000de2:	0018      	movs	r0, r3
 8000de4:	f002 fefc 	bl	8003be0 <HAL_TIM_ConfigClockSource>
 8000de8:	1e03      	subs	r3, r0, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000dec:	f000 fa46 	bl	800127c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df0:	003b      	movs	r3, r7
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df6:	003b      	movs	r3, r7
 8000df8:	2200      	movs	r2, #0
 8000dfa:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dfc:	003a      	movs	r2, r7
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <MX_TIM2_Init+0xa0>)
 8000e00:	0011      	movs	r1, r2
 8000e02:	0018      	movs	r0, r3
 8000e04:	f003 f8d8 	bl	8003fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e08:	1e03      	subs	r3, r0, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000e0c:	f000 fa36 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e10:	46c0      	nop			; (mov r8, r8)
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b006      	add	sp, #24
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000224 	.word	0x20000224
 8000e1c:	0000ffff 	.word	0x0000ffff

08000e20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e26:	2308      	movs	r3, #8
 8000e28:	18fb      	adds	r3, r7, r3
 8000e2a:	0018      	movs	r0, r3
 8000e2c:	2310      	movs	r3, #16
 8000e2e:	001a      	movs	r2, r3
 8000e30:	2100      	movs	r1, #0
 8000e32:	f004 fa44 	bl	80052be <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e36:	003b      	movs	r3, r7
 8000e38:	0018      	movs	r0, r3
 8000e3a:	2308      	movs	r3, #8
 8000e3c:	001a      	movs	r2, r3
 8000e3e:	2100      	movs	r1, #0
 8000e40:	f004 fa3d 	bl	80052be <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e44:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <MX_TIM3_Init+0xa0>)
 8000e46:	4a1f      	ldr	r2, [pc, #124]	; (8000ec4 <MX_TIM3_Init+0xa4>)
 8000e48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 65535;
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <MX_TIM3_Init+0xa0>)
 8000e4c:	4a1e      	ldr	r2, [pc, #120]	; (8000ec8 <MX_TIM3_Init+0xa8>)
 8000e4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000e50:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <MX_TIM3_Init+0xa0>)
 8000e52:	2210      	movs	r2, #16
 8000e54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 319;
 8000e56:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <MX_TIM3_Init+0xa0>)
 8000e58:	2240      	movs	r2, #64	; 0x40
 8000e5a:	32ff      	adds	r2, #255	; 0xff
 8000e5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5e:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <MX_TIM3_Init+0xa0>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e64:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <MX_TIM3_Init+0xa0>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <MX_TIM3_Init+0xa0>)
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f002 fd3d 	bl	80038ec <HAL_TIM_Base_Init>
 8000e72:	1e03      	subs	r3, r0, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000e76:	f000 fa01 	bl	800127c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e7a:	2108      	movs	r1, #8
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	2280      	movs	r2, #128	; 0x80
 8000e80:	0152      	lsls	r2, r2, #5
 8000e82:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e84:	187a      	adds	r2, r7, r1
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <MX_TIM3_Init+0xa0>)
 8000e88:	0011      	movs	r1, r2
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f002 fea8 	bl	8003be0 <HAL_TIM_ConfigClockSource>
 8000e90:	1e03      	subs	r3, r0, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000e94:	f000 f9f2 	bl	800127c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e98:	003b      	movs	r3, r7
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e9e:	003b      	movs	r3, r7
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ea4:	003a      	movs	r2, r7
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_TIM3_Init+0xa0>)
 8000ea8:	0011      	movs	r1, r2
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f003 f884 	bl	8003fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb0:	1e03      	subs	r3, r0, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000eb4:	f000 f9e2 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b006      	add	sp, #24
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000264 	.word	0x20000264
 8000ec4:	40000400 	.word	0x40000400
 8000ec8:	0000ffff 	.word	0x0000ffff

08000ecc <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed2:	2308      	movs	r3, #8
 8000ed4:	18fb      	adds	r3, r7, r3
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	2310      	movs	r3, #16
 8000eda:	001a      	movs	r2, r3
 8000edc:	2100      	movs	r1, #0
 8000ede:	f004 f9ee 	bl	80052be <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee2:	003b      	movs	r3, r7
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	2308      	movs	r3, #8
 8000ee8:	001a      	movs	r2, r3
 8000eea:	2100      	movs	r1, #0
 8000eec:	f004 f9e7 	bl	80052be <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000ef0:	4b1e      	ldr	r3, [pc, #120]	; (8000f6c <MX_TIM21_Init+0xa0>)
 8000ef2:	4a1f      	ldr	r2, [pc, #124]	; (8000f70 <MX_TIM21_Init+0xa4>)
 8000ef4:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 8192;
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <MX_TIM21_Init+0xa0>)
 8000ef8:	2280      	movs	r2, #128	; 0x80
 8000efa:	0192      	lsls	r2, r2, #6
 8000efc:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efe:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <MX_TIM21_Init+0xa0>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 2;
 8000f04:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <MX_TIM21_Init+0xa0>)
 8000f06:	2202      	movs	r2, #2
 8000f08:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0a:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <MX_TIM21_Init+0xa0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f10:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <MX_TIM21_Init+0xa0>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <MX_TIM21_Init+0xa0>)
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f002 fce7 	bl	80038ec <HAL_TIM_Base_Init>
 8000f1e:	1e03      	subs	r3, r0, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM21_Init+0x5a>
  {
    Error_Handler();
 8000f22:	f000 f9ab 	bl	800127c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f26:	2108      	movs	r1, #8
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	2280      	movs	r2, #128	; 0x80
 8000f2c:	0152      	lsls	r2, r2, #5
 8000f2e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000f30:	187a      	adds	r2, r7, r1
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <MX_TIM21_Init+0xa0>)
 8000f34:	0011      	movs	r1, r2
 8000f36:	0018      	movs	r0, r3
 8000f38:	f002 fe52 	bl	8003be0 <HAL_TIM_ConfigClockSource>
 8000f3c:	1e03      	subs	r3, r0, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM21_Init+0x78>
  {
    Error_Handler();
 8000f40:	f000 f99c 	bl	800127c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f44:	003b      	movs	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4a:	003b      	movs	r3, r7
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000f50:	003a      	movs	r2, r7
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <MX_TIM21_Init+0xa0>)
 8000f54:	0011      	movs	r1, r2
 8000f56:	0018      	movs	r0, r3
 8000f58:	f003 f82e 	bl	8003fb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5c:	1e03      	subs	r3, r0, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM21_Init+0x98>
  {
    Error_Handler();
 8000f60:	f000 f98c 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8000f64:	46c0      	nop			; (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	b006      	add	sp, #24
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200002a4 	.word	0x200002a4
 8000f70:	40010800 	.word	0x40010800

08000f74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f78:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <MX_USART1_UART_Init+0x60>)
 8000f7a:	4a17      	ldr	r2, [pc, #92]	; (8000fd8 <MX_USART1_UART_Init+0x64>)
 8000f7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <MX_USART1_UART_Init+0x60>)
 8000f80:	2296      	movs	r2, #150	; 0x96
 8000f82:	0192      	lsls	r2, r2, #6
 8000f84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <MX_USART1_UART_Init+0x60>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MX_USART1_UART_Init+0x60>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <MX_USART1_UART_Init+0x60>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f98:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_USART1_UART_Init+0x60>)
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9e:	4b0d      	ldr	r3, [pc, #52]	; (8000fd4 <MX_USART1_UART_Init+0x60>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa4:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <MX_USART1_UART_Init+0x60>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <MX_USART1_UART_Init+0x60>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <MX_USART1_UART_Init+0x60>)
 8000fb2:	2280      	movs	r2, #128	; 0x80
 8000fb4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 8000fb6:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <MX_USART1_UART_Init+0x60>)
 8000fb8:	2280      	movs	r2, #128	; 0x80
 8000fba:	0312      	lsls	r2, r2, #12
 8000fbc:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fbe:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <MX_USART1_UART_Init+0x60>)
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f003 f857 	bl	8004074 <HAL_UART_Init>
 8000fc6:	1e03      	subs	r3, r0, #0
 8000fc8:	d001      	beq.n	8000fce <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000fca:	f000 f957 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200002e4 	.word	0x200002e4
 8000fd8:	40013800 	.word	0x40013800

08000fdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_USART2_UART_Init+0x58>)
 8000fe2:	4a15      	ldr	r2, [pc, #84]	; (8001038 <MX_USART2_UART_Init+0x5c>)
 8000fe4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <MX_USART2_UART_Init+0x58>)
 8000fe8:	22e1      	movs	r2, #225	; 0xe1
 8000fea:	0252      	lsls	r2, r2, #9
 8000fec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_USART2_UART_Init+0x58>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <MX_USART2_UART_Init+0x58>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <MX_USART2_UART_Init+0x58>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <MX_USART2_UART_Init+0x58>)
 8001002:	220c      	movs	r2, #12
 8001004:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <MX_USART2_UART_Init+0x58>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_USART2_UART_Init+0x58>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <MX_USART2_UART_Init+0x58>)
 8001014:	2200      	movs	r2, #0
 8001016:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <MX_USART2_UART_Init+0x58>)
 800101a:	2200      	movs	r2, #0
 800101c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800101e:	4b05      	ldr	r3, [pc, #20]	; (8001034 <MX_USART2_UART_Init+0x58>)
 8001020:	0018      	movs	r0, r3
 8001022:	f003 f827 	bl	8004074 <HAL_UART_Init>
 8001026:	1e03      	subs	r3, r0, #0
 8001028:	d001      	beq.n	800102e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800102a:	f000 f927 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800102e:	46c0      	nop			; (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000368 	.word	0x20000368
 8001038:	40004400 	.word	0x40004400

0800103c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_DMA_Init+0x38>)
 8001044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <MX_DMA_Init+0x38>)
 8001048:	2101      	movs	r1, #1
 800104a:	430a      	orrs	r2, r1
 800104c:	631a      	str	r2, [r3, #48]	; 0x30
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_DMA_Init+0x38>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	2201      	movs	r2, #1
 8001054:	4013      	ands	r3, r2
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2100      	movs	r1, #0
 800105e:	200b      	movs	r0, #11
 8001060:	f001 f95c 	bl	800231c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8001064:	200b      	movs	r0, #11
 8001066:	f001 f96e 	bl	8002346 <HAL_NVIC_EnableIRQ>

}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	46bd      	mov	sp, r7
 800106e:	b002      	add	sp, #8
 8001070:	bd80      	pop	{r7, pc}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	40021000 	.word	0x40021000

08001078 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001078:	b590      	push	{r4, r7, lr}
 800107a:	b08b      	sub	sp, #44	; 0x2c
 800107c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107e:	2414      	movs	r4, #20
 8001080:	193b      	adds	r3, r7, r4
 8001082:	0018      	movs	r0, r3
 8001084:	2314      	movs	r3, #20
 8001086:	001a      	movs	r2, r3
 8001088:	2100      	movs	r1, #0
 800108a:	f004 f918 	bl	80052be <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800108e:	4b4c      	ldr	r3, [pc, #304]	; (80011c0 <MX_GPIO_Init+0x148>)
 8001090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001092:	4b4b      	ldr	r3, [pc, #300]	; (80011c0 <MX_GPIO_Init+0x148>)
 8001094:	2104      	movs	r1, #4
 8001096:	430a      	orrs	r2, r1
 8001098:	62da      	str	r2, [r3, #44]	; 0x2c
 800109a:	4b49      	ldr	r3, [pc, #292]	; (80011c0 <MX_GPIO_Init+0x148>)
 800109c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109e:	2204      	movs	r2, #4
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a6:	4b46      	ldr	r3, [pc, #280]	; (80011c0 <MX_GPIO_Init+0x148>)
 80010a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010aa:	4b45      	ldr	r3, [pc, #276]	; (80011c0 <MX_GPIO_Init+0x148>)
 80010ac:	2180      	movs	r1, #128	; 0x80
 80010ae:	430a      	orrs	r2, r1
 80010b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80010b2:	4b43      	ldr	r3, [pc, #268]	; (80011c0 <MX_GPIO_Init+0x148>)
 80010b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b6:	2280      	movs	r2, #128	; 0x80
 80010b8:	4013      	ands	r3, r2
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b40      	ldr	r3, [pc, #256]	; (80011c0 <MX_GPIO_Init+0x148>)
 80010c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010c2:	4b3f      	ldr	r3, [pc, #252]	; (80011c0 <MX_GPIO_Init+0x148>)
 80010c4:	2101      	movs	r1, #1
 80010c6:	430a      	orrs	r2, r1
 80010c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80010ca:	4b3d      	ldr	r3, [pc, #244]	; (80011c0 <MX_GPIO_Init+0x148>)
 80010cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ce:	2201      	movs	r2, #1
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	4b3a      	ldr	r3, [pc, #232]	; (80011c0 <MX_GPIO_Init+0x148>)
 80010d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010da:	4b39      	ldr	r3, [pc, #228]	; (80011c0 <MX_GPIO_Init+0x148>)
 80010dc:	2102      	movs	r1, #2
 80010de:	430a      	orrs	r2, r1
 80010e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80010e2:	4b37      	ldr	r3, [pc, #220]	; (80011c0 <MX_GPIO_Init+0x148>)
 80010e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e6:	2202      	movs	r2, #2
 80010e8:	4013      	ands	r3, r2
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	019b      	lsls	r3, r3, #6
 80010f2:	4834      	ldr	r0, [pc, #208]	; (80011c4 <MX_GPIO_Init+0x14c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	0019      	movs	r1, r3
 80010f8:	f001 fc6e 	bl	80029d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, S2_Pin|S0_Pin, GPIO_PIN_RESET);
 80010fc:	4b32      	ldr	r3, [pc, #200]	; (80011c8 <MX_GPIO_Init+0x150>)
 80010fe:	2200      	movs	r2, #0
 8001100:	2103      	movs	r1, #3
 8001102:	0018      	movs	r0, r3
 8001104:	f001 fc68 	bl	80029d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, S1_Pin|LED_EN_Pin, GPIO_PIN_RESET);
 8001108:	23a0      	movs	r3, #160	; 0xa0
 800110a:	05db      	lsls	r3, r3, #23
 800110c:	2200      	movs	r2, #0
 800110e:	2121      	movs	r1, #33	; 0x21
 8001110:	0018      	movs	r0, r3
 8001112:	f001 fc61 	bl	80029d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_Pin|LED_V_Pin, GPIO_PIN_RESET);
 8001116:	492d      	ldr	r1, [pc, #180]	; (80011cc <MX_GPIO_Init+0x154>)
 8001118:	4b2d      	ldr	r3, [pc, #180]	; (80011d0 <MX_GPIO_Init+0x158>)
 800111a:	2200      	movs	r2, #0
 800111c:	0018      	movs	r0, r3
 800111e:	f001 fc5b 	bl	80029d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : S3_Pin */
  GPIO_InitStruct.Pin = S3_Pin;
 8001122:	193b      	adds	r3, r7, r4
 8001124:	2280      	movs	r2, #128	; 0x80
 8001126:	0192      	lsls	r2, r2, #6
 8001128:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112a:	193b      	adds	r3, r7, r4
 800112c:	2201      	movs	r2, #1
 800112e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	193b      	adds	r3, r7, r4
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	193b      	adds	r3, r7, r4
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(S3_GPIO_Port, &GPIO_InitStruct);
 800113c:	193b      	adds	r3, r7, r4
 800113e:	4a21      	ldr	r2, [pc, #132]	; (80011c4 <MX_GPIO_Init+0x14c>)
 8001140:	0019      	movs	r1, r3
 8001142:	0010      	movs	r0, r2
 8001144:	f001 faca 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S0_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S0_Pin;
 8001148:	193b      	adds	r3, r7, r4
 800114a:	2203      	movs	r2, #3
 800114c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	193b      	adds	r3, r7, r4
 8001150:	2201      	movs	r2, #1
 8001152:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	193b      	adds	r3, r7, r4
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	193b      	adds	r3, r7, r4
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001160:	193b      	adds	r3, r7, r4
 8001162:	4a19      	ldr	r2, [pc, #100]	; (80011c8 <MX_GPIO_Init+0x150>)
 8001164:	0019      	movs	r1, r3
 8001166:	0010      	movs	r0, r2
 8001168:	f001 fab8 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_Pin LED_EN_Pin */
  GPIO_InitStruct.Pin = S1_Pin|LED_EN_Pin;
 800116c:	193b      	adds	r3, r7, r4
 800116e:	2221      	movs	r2, #33	; 0x21
 8001170:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001172:	193b      	adds	r3, r7, r4
 8001174:	2201      	movs	r2, #1
 8001176:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	193b      	adds	r3, r7, r4
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	193b      	adds	r3, r7, r4
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001184:	193a      	adds	r2, r7, r4
 8001186:	23a0      	movs	r3, #160	; 0xa0
 8001188:	05db      	lsls	r3, r3, #23
 800118a:	0011      	movs	r1, r2
 800118c:	0018      	movs	r0, r3
 800118e:	f001 faa5 	bl	80026dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_V_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_V_Pin;
 8001192:	0021      	movs	r1, r4
 8001194:	187b      	adds	r3, r7, r1
 8001196:	4a0d      	ldr	r2, [pc, #52]	; (80011cc <MX_GPIO_Init+0x154>)
 8001198:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119a:	187b      	adds	r3, r7, r1
 800119c:	2201      	movs	r2, #1
 800119e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	187b      	adds	r3, r7, r1
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	2200      	movs	r2, #0
 80011aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ac:	187b      	adds	r3, r7, r1
 80011ae:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <MX_GPIO_Init+0x158>)
 80011b0:	0019      	movs	r1, r3
 80011b2:	0010      	movs	r0, r2
 80011b4:	f001 fa92 	bl	80026dc <HAL_GPIO_Init>

}
 80011b8:	46c0      	nop			; (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b00b      	add	sp, #44	; 0x2c
 80011be:	bd90      	pop	{r4, r7, pc}
 80011c0:	40021000 	.word	0x40021000
 80011c4:	50000800 	.word	0x50000800
 80011c8:	50001c00 	.word	0x50001c00
 80011cc:	00000404 	.word	0x00000404
 80011d0:	50000400 	.word	0x50000400

080011d4 <HAL_UARTEx_RxEventCallback>:
	HAL_UART_Transmit(&huart2, message, strlen(message),HAL_MAX_DELAY);

}


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	000a      	movs	r2, r1
 80011de:	1cbb      	adds	r3, r7, #2
 80011e0:	801a      	strh	r2, [r3, #0]
	if (huart->Instance == USART1){
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a0d      	ldr	r2, [pc, #52]	; (800121c <HAL_UARTEx_RxEventCallback+0x48>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d112      	bne.n	8001212 <HAL_UARTEx_RxEventCallback+0x3e>
		if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) == SET)
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <HAL_UARTEx_RxEventCallback+0x4c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	2210      	movs	r2, #16
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b10      	cmp	r3, #16
 80011f8:	d10b      	bne.n	8001212 <HAL_UARTEx_RxEventCallback+0x3e>
	    {
		     __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <HAL_UARTEx_RxEventCallback+0x4c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2210      	movs	r2, #16
 8001200:	621a      	str	r2, [r3, #32]
		     xbee_usart1_rx_flag = HAL_OK;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <HAL_UARTEx_RxEventCallback+0x50>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
		     xbee_usart1_rx_size = Size;
 8001208:	1cbb      	adds	r3, r7, #2
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_UARTEx_RxEventCallback+0x54>)
 8001210:	701a      	strb	r2, [r3, #0]
	}
	//if (huart->Instance == USART2)
		//HAL_UART_Transmit(&huart2, "IT-USART2\r", 10,HAL_MAX_DELAY);

	//on y fera d'autres if (gnagnagna) dans le cas ou on utilise d'autres usart
}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	46bd      	mov	sp, r7
 8001216:	b002      	add	sp, #8
 8001218:	bd80      	pop	{r7, pc}
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	40013800 	.word	0x40013800
 8001220:	200002e4 	.word	0x200002e4
 8001224:	20000020 	.word	0x20000020
 8001228:	2000047c 	.word	0x2000047c

0800122c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ //permet de lancer les fonctions sur interruption des timers
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	if (htim == &htim21) {
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001238:	429a      	cmp	r2, r3
 800123a:	d103      	bne.n	8001244 <HAL_TIM_PeriodElapsedCallback+0x18>
		scan_abeilles_flag = 1;
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
		calcul_trafic_flag = 1;
	}
	else if (htim == &htim2) {
		update_led();
	}
}
 8001242:	e00d      	b.n	8001260 <HAL_TIM_PeriodElapsedCallback+0x34>
	else if (htim == &htim3) {
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001248:	429a      	cmp	r2, r3
 800124a:	d103      	bne.n	8001254 <HAL_TIM_PeriodElapsedCallback+0x28>
		calcul_trafic_flag = 1;
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800124e:	2201      	movs	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]
}
 8001252:	e005      	b.n	8001260 <HAL_TIM_PeriodElapsedCallback+0x34>
	else if (htim == &htim2) {
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001258:	429a      	cmp	r2, r3
 800125a:	d101      	bne.n	8001260 <HAL_TIM_PeriodElapsedCallback+0x34>
		update_led();
 800125c:	f000 f9ea 	bl	8001634 <update_led>
}
 8001260:	46c0      	nop			; (mov r8, r8)
 8001262:	46bd      	mov	sp, r7
 8001264:	b002      	add	sp, #8
 8001266:	bd80      	pop	{r7, pc}
 8001268:	200002a4 	.word	0x200002a4
 800126c:	2000047d 	.word	0x2000047d
 8001270:	20000264 	.word	0x20000264
 8001274:	2000047e 	.word	0x2000047e
 8001278:	20000224 	.word	0x20000224

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	  HAL_GPIO_WritePin(LED_V_GPIO_Port, LED_V_Pin, GPIO_PIN_SET);
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	4803      	ldr	r0, [pc, #12]	; (8001294 <Error_Handler+0x18>)
 8001286:	2201      	movs	r2, #1
 8001288:	0019      	movs	r1, r3
 800128a:	f001 fba5 	bl	80029d8 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800128e:	b672      	cpsid	i
}
 8001290:	46c0      	nop			; (mov r8, r8)

  //sprintf(texte,"%d",traqueur);
  //HAL_UART_Transmit(&huart2, texte, strlen(texte),HAL_MAX_DELAY);
  __disable_irq();
  while (1)
 8001292:	e7fe      	b.n	8001292 <Error_Handler+0x16>
 8001294:	50000400 	.word	0x50000400

08001298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129c:	4b07      	ldr	r3, [pc, #28]	; (80012bc <HAL_MspInit+0x24>)
 800129e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_MspInit+0x24>)
 80012a2:	2101      	movs	r1, #1
 80012a4:	430a      	orrs	r2, r1
 80012a6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <HAL_MspInit+0x24>)
 80012aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <HAL_MspInit+0x24>)
 80012ae:	2180      	movs	r1, #128	; 0x80
 80012b0:	0549      	lsls	r1, r1, #21
 80012b2:	430a      	orrs	r2, r1
 80012b4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40021000 	.word	0x40021000

080012c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	240c      	movs	r4, #12
 80012ca:	193b      	adds	r3, r7, r4
 80012cc:	0018      	movs	r0, r3
 80012ce:	2314      	movs	r3, #20
 80012d0:	001a      	movs	r2, r3
 80012d2:	2100      	movs	r1, #0
 80012d4:	f003 fff3 	bl	80052be <memset>
  if(hadc->Instance==ADC1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a14      	ldr	r2, [pc, #80]	; (8001330 <HAL_ADC_MspInit+0x70>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d122      	bne.n	8001328 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012e2:	4b14      	ldr	r3, [pc, #80]	; (8001334 <HAL_ADC_MspInit+0x74>)
 80012e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012e6:	4b13      	ldr	r3, [pc, #76]	; (8001334 <HAL_ADC_MspInit+0x74>)
 80012e8:	2180      	movs	r1, #128	; 0x80
 80012ea:	0089      	lsls	r1, r1, #2
 80012ec:	430a      	orrs	r2, r1
 80012ee:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f0:	4b10      	ldr	r3, [pc, #64]	; (8001334 <HAL_ADC_MspInit+0x74>)
 80012f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_ADC_MspInit+0x74>)
 80012f6:	2101      	movs	r1, #1
 80012f8:	430a      	orrs	r2, r1
 80012fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80012fc:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <HAL_ADC_MspInit+0x74>)
 80012fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001300:	2201      	movs	r2, #1
 8001302:	4013      	ands	r3, r2
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = MUX1_Pin|MUX2_Pin;
 8001308:	193b      	adds	r3, r7, r4
 800130a:	2212      	movs	r2, #18
 800130c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800130e:	193b      	adds	r3, r7, r4
 8001310:	2203      	movs	r2, #3
 8001312:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	193b      	adds	r3, r7, r4
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	193a      	adds	r2, r7, r4
 800131c:	23a0      	movs	r3, #160	; 0xa0
 800131e:	05db      	lsls	r3, r3, #23
 8001320:	0011      	movs	r1, r2
 8001322:	0018      	movs	r0, r3
 8001324:	f001 f9da 	bl	80026dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001328:	46c0      	nop			; (mov r8, r8)
 800132a:	46bd      	mov	sp, r7
 800132c:	b009      	add	sp, #36	; 0x24
 800132e:	bd90      	pop	{r4, r7, pc}
 8001330:	40012400 	.word	0x40012400
 8001334:	40021000 	.word	0x40021000

08001338 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	05db      	lsls	r3, r3, #23
 8001348:	429a      	cmp	r2, r3
 800134a:	d10e      	bne.n	800136a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800134c:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <HAL_TIM_Base_MspInit+0x88>)
 800134e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <HAL_TIM_Base_MspInit+0x88>)
 8001352:	2101      	movs	r1, #1
 8001354:	430a      	orrs	r2, r1
 8001356:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001358:	2200      	movs	r2, #0
 800135a:	2100      	movs	r1, #0
 800135c:	200f      	movs	r0, #15
 800135e:	f000 ffdd 	bl	800231c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001362:	200f      	movs	r0, #15
 8001364:	f000 ffef 	bl	8002346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }

}
 8001368:	e026      	b.n	80013b8 <HAL_TIM_Base_MspInit+0x80>
  else if(htim_base->Instance==TIM3)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a15      	ldr	r2, [pc, #84]	; (80013c4 <HAL_TIM_Base_MspInit+0x8c>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d10e      	bne.n	8001392 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_TIM_Base_MspInit+0x88>)
 8001376:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <HAL_TIM_Base_MspInit+0x88>)
 800137a:	2102      	movs	r1, #2
 800137c:	430a      	orrs	r2, r1
 800137e:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	2100      	movs	r1, #0
 8001384:	2010      	movs	r0, #16
 8001386:	f000 ffc9 	bl	800231c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800138a:	2010      	movs	r0, #16
 800138c:	f000 ffdb 	bl	8002346 <HAL_NVIC_EnableIRQ>
}
 8001390:	e012      	b.n	80013b8 <HAL_TIM_Base_MspInit+0x80>
  else if(htim_base->Instance==TIM21)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <HAL_TIM_Base_MspInit+0x90>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d10d      	bne.n	80013b8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM21_CLK_ENABLE();
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <HAL_TIM_Base_MspInit+0x88>)
 800139e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013a0:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <HAL_TIM_Base_MspInit+0x88>)
 80013a2:	2104      	movs	r1, #4
 80013a4:	430a      	orrs	r2, r1
 80013a6:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80013a8:	2200      	movs	r2, #0
 80013aa:	2100      	movs	r1, #0
 80013ac:	2014      	movs	r0, #20
 80013ae:	f000 ffb5 	bl	800231c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80013b2:	2014      	movs	r0, #20
 80013b4:	f000 ffc7 	bl	8002346 <HAL_NVIC_EnableIRQ>
}
 80013b8:	46c0      	nop			; (mov r8, r8)
 80013ba:	46bd      	mov	sp, r7
 80013bc:	b002      	add	sp, #8
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40000400 	.word	0x40000400
 80013c8:	40010800 	.word	0x40010800

080013cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b08b      	sub	sp, #44	; 0x2c
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	2414      	movs	r4, #20
 80013d6:	193b      	adds	r3, r7, r4
 80013d8:	0018      	movs	r0, r3
 80013da:	2314      	movs	r3, #20
 80013dc:	001a      	movs	r2, r3
 80013de:	2100      	movs	r1, #0
 80013e0:	f003 ff6d 	bl	80052be <memset>
  if(huart->Instance==USART1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a5e      	ldr	r2, [pc, #376]	; (8001564 <HAL_UART_MspInit+0x198>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d133      	bne.n	8001456 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ee:	4b5e      	ldr	r3, [pc, #376]	; (8001568 <HAL_UART_MspInit+0x19c>)
 80013f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013f2:	4b5d      	ldr	r3, [pc, #372]	; (8001568 <HAL_UART_MspInit+0x19c>)
 80013f4:	2180      	movs	r1, #128	; 0x80
 80013f6:	01c9      	lsls	r1, r1, #7
 80013f8:	430a      	orrs	r2, r1
 80013fa:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fc:	4b5a      	ldr	r3, [pc, #360]	; (8001568 <HAL_UART_MspInit+0x19c>)
 80013fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001400:	4b59      	ldr	r3, [pc, #356]	; (8001568 <HAL_UART_MspInit+0x19c>)
 8001402:	2101      	movs	r1, #1
 8001404:	430a      	orrs	r2, r1
 8001406:	62da      	str	r2, [r3, #44]	; 0x2c
 8001408:	4b57      	ldr	r3, [pc, #348]	; (8001568 <HAL_UART_MspInit+0x19c>)
 800140a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140c:	2201      	movs	r2, #1
 800140e:	4013      	ands	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART_XBEE_TX_Pin|USART_XBEE_RX_Pin;
 8001414:	193b      	adds	r3, r7, r4
 8001416:	22c0      	movs	r2, #192	; 0xc0
 8001418:	00d2      	lsls	r2, r2, #3
 800141a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	0021      	movs	r1, r4
 800141e:	187b      	adds	r3, r7, r1
 8001420:	2202      	movs	r2, #2
 8001422:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	187b      	adds	r3, r7, r1
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142a:	187b      	adds	r3, r7, r1
 800142c:	2203      	movs	r2, #3
 800142e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001430:	187b      	adds	r3, r7, r1
 8001432:	2204      	movs	r2, #4
 8001434:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001436:	187a      	adds	r2, r7, r1
 8001438:	23a0      	movs	r3, #160	; 0xa0
 800143a:	05db      	lsls	r3, r3, #23
 800143c:	0011      	movs	r1, r2
 800143e:	0018      	movs	r0, r3
 8001440:	f001 f94c 	bl	80026dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	201b      	movs	r0, #27
 800144a:	f000 ff67 	bl	800231c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800144e:	201b      	movs	r0, #27
 8001450:	f000 ff79 	bl	8002346 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001454:	e081      	b.n	800155a <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART2)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a44      	ldr	r2, [pc, #272]	; (800156c <HAL_UART_MspInit+0x1a0>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d000      	beq.n	8001462 <HAL_UART_MspInit+0x96>
 8001460:	e07b      	b.n	800155a <HAL_UART_MspInit+0x18e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001462:	4b41      	ldr	r3, [pc, #260]	; (8001568 <HAL_UART_MspInit+0x19c>)
 8001464:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001466:	4b40      	ldr	r3, [pc, #256]	; (8001568 <HAL_UART_MspInit+0x19c>)
 8001468:	2180      	movs	r1, #128	; 0x80
 800146a:	0289      	lsls	r1, r1, #10
 800146c:	430a      	orrs	r2, r1
 800146e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001470:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <HAL_UART_MspInit+0x19c>)
 8001472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001474:	4b3c      	ldr	r3, [pc, #240]	; (8001568 <HAL_UART_MspInit+0x19c>)
 8001476:	2101      	movs	r1, #1
 8001478:	430a      	orrs	r2, r1
 800147a:	62da      	str	r2, [r3, #44]	; 0x2c
 800147c:	4b3a      	ldr	r3, [pc, #232]	; (8001568 <HAL_UART_MspInit+0x19c>)
 800147e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001480:	2201      	movs	r2, #1
 8001482:	4013      	ands	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8001488:	2114      	movs	r1, #20
 800148a:	187b      	adds	r3, r7, r1
 800148c:	220c      	movs	r2, #12
 800148e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	187b      	adds	r3, r7, r1
 8001492:	2202      	movs	r2, #2
 8001494:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	187b      	adds	r3, r7, r1
 8001498:	2200      	movs	r2, #0
 800149a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149c:	187b      	adds	r3, r7, r1
 800149e:	2203      	movs	r2, #3
 80014a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80014a2:	187b      	adds	r3, r7, r1
 80014a4:	2204      	movs	r2, #4
 80014a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a8:	187a      	adds	r2, r7, r1
 80014aa:	23a0      	movs	r3, #160	; 0xa0
 80014ac:	05db      	lsls	r3, r3, #23
 80014ae:	0011      	movs	r1, r2
 80014b0:	0018      	movs	r0, r3
 80014b2:	f001 f913 	bl	80026dc <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80014b6:	4b2e      	ldr	r3, [pc, #184]	; (8001570 <HAL_UART_MspInit+0x1a4>)
 80014b8:	4a2e      	ldr	r2, [pc, #184]	; (8001574 <HAL_UART_MspInit+0x1a8>)
 80014ba:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_4;
 80014bc:	4b2c      	ldr	r3, [pc, #176]	; (8001570 <HAL_UART_MspInit+0x1a4>)
 80014be:	2204      	movs	r2, #4
 80014c0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014c2:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <HAL_UART_MspInit+0x1a4>)
 80014c4:	2210      	movs	r2, #16
 80014c6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014c8:	4b29      	ldr	r3, [pc, #164]	; (8001570 <HAL_UART_MspInit+0x1a4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014ce:	4b28      	ldr	r3, [pc, #160]	; (8001570 <HAL_UART_MspInit+0x1a4>)
 80014d0:	2280      	movs	r2, #128	; 0x80
 80014d2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014d4:	4b26      	ldr	r3, [pc, #152]	; (8001570 <HAL_UART_MspInit+0x1a4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014da:	4b25      	ldr	r3, [pc, #148]	; (8001570 <HAL_UART_MspInit+0x1a4>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80014e0:	4b23      	ldr	r3, [pc, #140]	; (8001570 <HAL_UART_MspInit+0x1a4>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014e6:	4b22      	ldr	r3, [pc, #136]	; (8001570 <HAL_UART_MspInit+0x1a4>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80014ec:	4b20      	ldr	r3, [pc, #128]	; (8001570 <HAL_UART_MspInit+0x1a4>)
 80014ee:	0018      	movs	r0, r3
 80014f0:	f000 ff46 	bl	8002380 <HAL_DMA_Init>
 80014f4:	1e03      	subs	r3, r0, #0
 80014f6:	d001      	beq.n	80014fc <HAL_UART_MspInit+0x130>
      Error_Handler();
 80014f8:	f7ff fec0 	bl	800127c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <HAL_UART_MspInit+0x1a4>)
 8001500:	66da      	str	r2, [r3, #108]	; 0x6c
 8001502:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <HAL_UART_MspInit+0x1a4>)
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <HAL_UART_MspInit+0x1ac>)
 800150a:	4a1c      	ldr	r2, [pc, #112]	; (800157c <HAL_UART_MspInit+0x1b0>)
 800150c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <HAL_UART_MspInit+0x1ac>)
 8001510:	2204      	movs	r2, #4
 8001512:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001514:	4b18      	ldr	r3, [pc, #96]	; (8001578 <HAL_UART_MspInit+0x1ac>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800151a:	4b17      	ldr	r3, [pc, #92]	; (8001578 <HAL_UART_MspInit+0x1ac>)
 800151c:	2200      	movs	r2, #0
 800151e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001520:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_UART_MspInit+0x1ac>)
 8001522:	2280      	movs	r2, #128	; 0x80
 8001524:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001526:	4b14      	ldr	r3, [pc, #80]	; (8001578 <HAL_UART_MspInit+0x1ac>)
 8001528:	2200      	movs	r2, #0
 800152a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_UART_MspInit+0x1ac>)
 800152e:	2200      	movs	r2, #0
 8001530:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <HAL_UART_MspInit+0x1ac>)
 8001534:	2200      	movs	r2, #0
 8001536:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <HAL_UART_MspInit+0x1ac>)
 800153a:	2200      	movs	r2, #0
 800153c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <HAL_UART_MspInit+0x1ac>)
 8001540:	0018      	movs	r0, r3
 8001542:	f000 ff1d 	bl	8002380 <HAL_DMA_Init>
 8001546:	1e03      	subs	r3, r0, #0
 8001548:	d001      	beq.n	800154e <HAL_UART_MspInit+0x182>
      Error_Handler();
 800154a:	f7ff fe97 	bl	800127c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a09      	ldr	r2, [pc, #36]	; (8001578 <HAL_UART_MspInit+0x1ac>)
 8001552:	671a      	str	r2, [r3, #112]	; 0x70
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <HAL_UART_MspInit+0x1ac>)
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	629a      	str	r2, [r3, #40]	; 0x28
}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	46bd      	mov	sp, r7
 800155e:	b00b      	add	sp, #44	; 0x2c
 8001560:	bd90      	pop	{r4, r7, pc}
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	40013800 	.word	0x40013800
 8001568:	40021000 	.word	0x40021000
 800156c:	40004400 	.word	0x40004400
 8001570:	200003ec 	.word	0x200003ec
 8001574:	40020044 	.word	0x40020044
 8001578:	20000434 	.word	0x20000434
 800157c:	40020058 	.word	0x40020058

08001580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <NMI_Handler+0x4>

08001586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <HardFault_Handler+0x4>

0800158c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001590:	46c0      	nop			; (mov r8, r8)
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a4:	f000 f942 	bl	800182c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015a8:	46c0      	nop			; (mov r8, r8)
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80015b4:	4b05      	ldr	r3, [pc, #20]	; (80015cc <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 80015b6:	0018      	movs	r0, r3
 80015b8:	f000 ffe1 	bl	800257e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80015bc:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 80015be:	0018      	movs	r0, r3
 80015c0:	f000 ffdd 	bl	800257e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80015c4:	46c0      	nop			; (mov r8, r8)
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	46c0      	nop			; (mov r8, r8)
 80015cc:	200003ec 	.word	0x200003ec
 80015d0:	20000434 	.word	0x20000434

080015d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <TIM2_IRQHandler+0x14>)
 80015da:	0018      	movs	r0, r3
 80015dc:	f002 fa18 	bl	8003a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015e0:	46c0      	nop			; (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	20000224 	.word	0x20000224

080015ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <TIM3_IRQHandler+0x14>)
 80015f2:	0018      	movs	r0, r3
 80015f4:	f002 fa0c 	bl	8003a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80015f8:	46c0      	nop			; (mov r8, r8)
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	46c0      	nop			; (mov r8, r8)
 8001600:	20000264 	.word	0x20000264

08001604 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <TIM21_IRQHandler+0x14>)
 800160a:	0018      	movs	r0, r3
 800160c:	f002 fa00 	bl	8003a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8001610:	46c0      	nop			; (mov r8, r8)
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	200002a4 	.word	0x200002a4

0800161c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <USART1_IRQHandler+0x14>)
 8001622:	0018      	movs	r0, r3
 8001624:	f002 fe22 	bl	800426c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001628:	46c0      	nop			; (mov r8, r8)
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	200002e4 	.word	0x200002e4

08001634 <update_led>:

void xbee_send_alert(){
//A ECRIRE
}

void update_led(){ //gère les signaux et codes affichés sur les LEDs
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	static uint8_t i = 0;
	HAL_GPIO_WritePin(GPIOB, LED_R_Pin, codes_led[led_state][i][0]);
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <update_led+0x74>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	0019      	movs	r1, r3
 800163e:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <update_led+0x78>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	0018      	movs	r0, r3
 8001644:	4a1a      	ldr	r2, [pc, #104]	; (80016b0 <update_led+0x7c>)
 8001646:	000b      	movs	r3, r1
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	185b      	adds	r3, r3, r1
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	181b      	adds	r3, r3, r0
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	5c9b      	ldrb	r3, [r3, r2]
 8001654:	4817      	ldr	r0, [pc, #92]	; (80016b4 <update_led+0x80>)
 8001656:	001a      	movs	r2, r3
 8001658:	2104      	movs	r1, #4
 800165a:	f001 f9bd 	bl	80029d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED_V_Pin, codes_led[led_state][i][1]);
 800165e:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <update_led+0x74>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	0019      	movs	r1, r3
 8001664:	4b11      	ldr	r3, [pc, #68]	; (80016ac <update_led+0x78>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	0018      	movs	r0, r3
 800166a:	4a11      	ldr	r2, [pc, #68]	; (80016b0 <update_led+0x7c>)
 800166c:	000b      	movs	r3, r1
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	185b      	adds	r3, r3, r1
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	181b      	adds	r3, r3, r0
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	18d3      	adds	r3, r2, r3
 800167a:	3301      	adds	r3, #1
 800167c:	781a      	ldrb	r2, [r3, #0]
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	480c      	ldr	r0, [pc, #48]	; (80016b4 <update_led+0x80>)
 8001684:	0019      	movs	r1, r3
 8001686:	f001 f9a7 	bl	80029d8 <HAL_GPIO_WritePin>
	i = (i+1)%20;
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <update_led+0x78>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	3301      	adds	r3, #1
 8001690:	2114      	movs	r1, #20
 8001692:	0018      	movs	r0, r3
 8001694:	f7fe feba 	bl	800040c <__aeabi_idivmod>
 8001698:	000b      	movs	r3, r1
 800169a:	b2da      	uxtb	r2, r3
 800169c:	4b03      	ldr	r3, [pc, #12]	; (80016ac <update_led+0x78>)
 800169e:	701a      	strb	r2, [r3, #0]
}
 80016a0:	46c0      	nop			; (mov r8, r8)
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	2000047f 	.word	0x2000047f
 80016ac:	20000480 	.word	0x20000480
 80016b0:	20000024 	.word	0x20000024
 80016b4:	50000400 	.word	0x50000400

080016b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c0:	4a14      	ldr	r2, [pc, #80]	; (8001714 <_sbrk+0x5c>)
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <_sbrk+0x60>)
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <_sbrk+0x64>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d102      	bne.n	80016da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <_sbrk+0x64>)
 80016d6:	4a12      	ldr	r2, [pc, #72]	; (8001720 <_sbrk+0x68>)
 80016d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <_sbrk+0x64>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	18d3      	adds	r3, r2, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d207      	bcs.n	80016f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e8:	f003 fdb6 	bl	8005258 <__errno>
 80016ec:	0003      	movs	r3, r0
 80016ee:	220c      	movs	r2, #12
 80016f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f2:	2301      	movs	r3, #1
 80016f4:	425b      	negs	r3, r3
 80016f6:	e009      	b.n	800170c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <_sbrk+0x64>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	18d2      	adds	r2, r2, r3
 8001706:	4b05      	ldr	r3, [pc, #20]	; (800171c <_sbrk+0x64>)
 8001708:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800170a:	68fb      	ldr	r3, [r7, #12]
}
 800170c:	0018      	movs	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	b006      	add	sp, #24
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20005000 	.word	0x20005000
 8001718:	00000400 	.word	0x00000400
 800171c:	20000484 	.word	0x20000484
 8001720:	200004a0 	.word	0x200004a0

08001724 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001728:	46c0      	nop			; (mov r8, r8)
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
    ldr   r0, =_estack
 8001730:	480d      	ldr	r0, [pc, #52]	; (8001768 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001732:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001734:	480d      	ldr	r0, [pc, #52]	; (800176c <LoopForever+0x6>)
  ldr r1, =_edata
 8001736:	490e      	ldr	r1, [pc, #56]	; (8001770 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001738:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <LoopForever+0xe>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800173c:	e002      	b.n	8001744 <LoopCopyDataInit>

0800173e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001742:	3304      	adds	r3, #4

08001744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001748:	d3f9      	bcc.n	800173e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174a:	4a0b      	ldr	r2, [pc, #44]	; (8001778 <LoopForever+0x12>)
  ldr r4, =_ebss
 800174c:	4c0b      	ldr	r4, [pc, #44]	; (800177c <LoopForever+0x16>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001750:	e001      	b.n	8001756 <LoopFillZerobss>

08001752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001754:	3204      	adds	r2, #4

08001756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001758:	d3fb      	bcc.n	8001752 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800175a:	f7ff ffe3 	bl	8001724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800175e:	f003 fd81 	bl	8005264 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001762:	f7ff f9d7 	bl	8000b14 <main>

08001766 <LoopForever>:

LoopForever:
    b LoopForever
 8001766:	e7fe      	b.n	8001766 <LoopForever>
    ldr   r0, =_estack
 8001768:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800176c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001770:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 8001774:	08005cec 	.word	0x08005cec
  ldr r2, =_sbss
 8001778:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 800177c:	2000049c 	.word	0x2000049c

08001780 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001780:	e7fe      	b.n	8001780 <ADC1_COMP_IRQHandler>
	...

08001784 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800178a:	1dfb      	adds	r3, r7, #7
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001790:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <HAL_Init+0x3c>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <HAL_Init+0x3c>)
 8001796:	2140      	movs	r1, #64	; 0x40
 8001798:	430a      	orrs	r2, r1
 800179a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800179c:	2003      	movs	r0, #3
 800179e:	f000 f811 	bl	80017c4 <HAL_InitTick>
 80017a2:	1e03      	subs	r3, r0, #0
 80017a4:	d003      	beq.n	80017ae <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80017a6:	1dfb      	adds	r3, r7, #7
 80017a8:	2201      	movs	r2, #1
 80017aa:	701a      	strb	r2, [r3, #0]
 80017ac:	e001      	b.n	80017b2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017ae:	f7ff fd73 	bl	8001298 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017b2:	1dfb      	adds	r3, r7, #7
 80017b4:	781b      	ldrb	r3, [r3, #0]
}
 80017b6:	0018      	movs	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b002      	add	sp, #8
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	40022000 	.word	0x40022000

080017c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <HAL_InitTick+0x5c>)
 80017ce:	681c      	ldr	r4, [r3, #0]
 80017d0:	4b14      	ldr	r3, [pc, #80]	; (8001824 <HAL_InitTick+0x60>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	0019      	movs	r1, r3
 80017d6:	23fa      	movs	r3, #250	; 0xfa
 80017d8:	0098      	lsls	r0, r3, #2
 80017da:	f7fe fca7 	bl	800012c <__udivsi3>
 80017de:	0003      	movs	r3, r0
 80017e0:	0019      	movs	r1, r3
 80017e2:	0020      	movs	r0, r4
 80017e4:	f7fe fca2 	bl	800012c <__udivsi3>
 80017e8:	0003      	movs	r3, r0
 80017ea:	0018      	movs	r0, r3
 80017ec:	f000 fdbb 	bl	8002366 <HAL_SYSTICK_Config>
 80017f0:	1e03      	subs	r3, r0, #0
 80017f2:	d001      	beq.n	80017f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e00f      	b.n	8001818 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d80b      	bhi.n	8001816 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	2301      	movs	r3, #1
 8001802:	425b      	negs	r3, r3
 8001804:	2200      	movs	r2, #0
 8001806:	0018      	movs	r0, r3
 8001808:	f000 fd88 	bl	800231c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_InitTick+0x64>)
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	e000      	b.n	8001818 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
}
 8001818:	0018      	movs	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	b003      	add	sp, #12
 800181e:	bd90      	pop	{r4, r7, pc}
 8001820:	200000ec 	.word	0x200000ec
 8001824:	200000f4 	.word	0x200000f4
 8001828:	200000f0 	.word	0x200000f0

0800182c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_IncTick+0x1c>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	001a      	movs	r2, r3
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <HAL_IncTick+0x20>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	18d2      	adds	r2, r2, r3
 800183c:	4b03      	ldr	r3, [pc, #12]	; (800184c <HAL_IncTick+0x20>)
 800183e:	601a      	str	r2, [r3, #0]
}
 8001840:	46c0      	nop			; (mov r8, r8)
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	200000f4 	.word	0x200000f4
 800184c:	20000488 	.word	0x20000488

08001850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  return uwTick;
 8001854:	4b02      	ldr	r3, [pc, #8]	; (8001860 <HAL_GetTick+0x10>)
 8001856:	681b      	ldr	r3, [r3, #0]
}
 8001858:	0018      	movs	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	46c0      	nop			; (mov r8, r8)
 8001860:	20000488 	.word	0x20000488

08001864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800186c:	f7ff fff0 	bl	8001850 <HAL_GetTick>
 8001870:	0003      	movs	r3, r0
 8001872:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	3301      	adds	r3, #1
 800187c:	d005      	beq.n	800188a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <HAL_Delay+0x44>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	001a      	movs	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	189b      	adds	r3, r3, r2
 8001888:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	f7ff ffe0 	bl	8001850 <HAL_GetTick>
 8001890:	0002      	movs	r2, r0
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	429a      	cmp	r2, r3
 800189a:	d8f7      	bhi.n	800188c <HAL_Delay+0x28>
  {
  }
}
 800189c:	46c0      	nop			; (mov r8, r8)
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b004      	add	sp, #16
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	200000f4 	.word	0x200000f4

080018ac <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e159      	b.n	8001b72 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10a      	bne.n	80018dc <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2250      	movs	r2, #80	; 0x50
 80018d0:	2100      	movs	r1, #0
 80018d2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	0018      	movs	r0, r3
 80018d8:	f7ff fcf2 	bl	80012c0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e0:	2210      	movs	r2, #16
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b10      	cmp	r3, #16
 80018e6:	d005      	beq.n	80018f4 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2204      	movs	r2, #4
 80018f0:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80018f2:	d00b      	beq.n	800190c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f8:	2210      	movs	r2, #16
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2250      	movs	r2, #80	; 0x50
 8001904:	2100      	movs	r1, #0
 8001906:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e132      	b.n	8001b72 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001910:	4a9a      	ldr	r2, [pc, #616]	; (8001b7c <HAL_ADC_Init+0x2d0>)
 8001912:	4013      	ands	r3, r2
 8001914:	2202      	movs	r2, #2
 8001916:	431a      	orrs	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2203      	movs	r2, #3
 8001924:	4013      	ands	r3, r2
 8001926:	2b01      	cmp	r3, #1
 8001928:	d108      	bne.n	800193c <HAL_ADC_Init+0x90>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2201      	movs	r2, #1
 8001932:	4013      	ands	r3, r2
 8001934:	2b01      	cmp	r3, #1
 8001936:	d101      	bne.n	800193c <HAL_ADC_Init+0x90>
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <HAL_ADC_Init+0x92>
 800193c:	2300      	movs	r3, #0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d149      	bne.n	80019d6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	23c0      	movs	r3, #192	; 0xc0
 8001948:	061b      	lsls	r3, r3, #24
 800194a:	429a      	cmp	r2, r3
 800194c:	d00b      	beq.n	8001966 <HAL_ADC_Init+0xba>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	2380      	movs	r3, #128	; 0x80
 8001954:	05db      	lsls	r3, r3, #23
 8001956:	429a      	cmp	r2, r3
 8001958:	d005      	beq.n	8001966 <HAL_ADC_Init+0xba>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	061b      	lsls	r3, r3, #24
 8001962:	429a      	cmp	r2, r3
 8001964:	d111      	bne.n	800198a <HAL_ADC_Init+0xde>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	691a      	ldr	r2, [r3, #16]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	0092      	lsls	r2, r2, #2
 8001972:	0892      	lsrs	r2, r2, #2
 8001974:	611a      	str	r2, [r3, #16]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6919      	ldr	r1, [r3, #16]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	611a      	str	r2, [r3, #16]
 8001988:	e014      	b.n	80019b4 <HAL_ADC_Init+0x108>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	691a      	ldr	r2, [r3, #16]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	0092      	lsls	r2, r2, #2
 8001996:	0892      	lsrs	r2, r2, #2
 8001998:	611a      	str	r2, [r3, #16]
 800199a:	4b79      	ldr	r3, [pc, #484]	; (8001b80 <HAL_ADC_Init+0x2d4>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	4b78      	ldr	r3, [pc, #480]	; (8001b80 <HAL_ADC_Init+0x2d4>)
 80019a0:	4978      	ldr	r1, [pc, #480]	; (8001b84 <HAL_ADC_Init+0x2d8>)
 80019a2:	400a      	ands	r2, r1
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	4b76      	ldr	r3, [pc, #472]	; (8001b80 <HAL_ADC_Init+0x2d4>)
 80019a8:	6819      	ldr	r1, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	4b74      	ldr	r3, [pc, #464]	; (8001b80 <HAL_ADC_Init+0x2d4>)
 80019b0:	430a      	orrs	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2118      	movs	r1, #24
 80019c0:	438a      	bics	r2, r1
 80019c2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68d9      	ldr	r1, [r3, #12]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	430a      	orrs	r2, r1
 80019d4:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80019d6:	4b6a      	ldr	r3, [pc, #424]	; (8001b80 <HAL_ADC_Init+0x2d4>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	4b69      	ldr	r3, [pc, #420]	; (8001b80 <HAL_ADC_Init+0x2d4>)
 80019dc:	496a      	ldr	r1, [pc, #424]	; (8001b88 <HAL_ADC_Init+0x2dc>)
 80019de:	400a      	ands	r2, r1
 80019e0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80019e2:	4b67      	ldr	r3, [pc, #412]	; (8001b80 <HAL_ADC_Init+0x2d4>)
 80019e4:	6819      	ldr	r1, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ea:	065a      	lsls	r2, r3, #25
 80019ec:	4b64      	ldr	r3, [pc, #400]	; (8001b80 <HAL_ADC_Init+0x2d4>)
 80019ee:	430a      	orrs	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	055b      	lsls	r3, r3, #21
 80019fc:	4013      	ands	r3, r2
 80019fe:	d108      	bne.n	8001a12 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2180      	movs	r1, #128	; 0x80
 8001a0c:	0549      	lsls	r1, r1, #21
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68da      	ldr	r2, [r3, #12]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	495b      	ldr	r1, [pc, #364]	; (8001b8c <HAL_ADC_Init+0x2e0>)
 8001a1e:	400a      	ands	r2, r1
 8001a20:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68d9      	ldr	r1, [r3, #12]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d101      	bne.n	8001a38 <HAL_ADC_Init+0x18c>
 8001a34:	2304      	movs	r3, #4
 8001a36:	e000      	b.n	8001a3a <HAL_ADC_Init+0x18e>
 8001a38:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001a3a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2020      	movs	r0, #32
 8001a40:	5c1b      	ldrb	r3, [r3, r0]
 8001a42:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001a44:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	202c      	movs	r0, #44	; 0x2c
 8001a4a:	5c1b      	ldrb	r3, [r3, r0]
 8001a4c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001a4e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001a54:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001a5c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001a64:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a72:	23c2      	movs	r3, #194	; 0xc2
 8001a74:	33ff      	adds	r3, #255	; 0xff
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d00b      	beq.n	8001a92 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68d9      	ldr	r1, [r3, #12]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2221      	movs	r2, #33	; 0x21
 8001a96:	5c9b      	ldrb	r3, [r3, r2]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d11a      	bne.n	8001ad2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	5c9b      	ldrb	r3, [r3, r2]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d109      	bne.n	8001aba <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68da      	ldr	r2, [r3, #12]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2180      	movs	r1, #128	; 0x80
 8001ab2:	0249      	lsls	r1, r1, #9
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	e00b      	b.n	8001ad2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001abe:	2220      	movs	r2, #32
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aca:	2201      	movs	r2, #1
 8001acc:	431a      	orrs	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d11f      	bne.n	8001b1a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	691a      	ldr	r2, [r3, #16]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	492a      	ldr	r1, [pc, #168]	; (8001b90 <HAL_ADC_Init+0x2e4>)
 8001ae6:	400a      	ands	r2, r1
 8001ae8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6919      	ldr	r1, [r3, #16]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001af8:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8001afe:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	430a      	orrs	r2, r1
 8001b06:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	691a      	ldr	r2, [r3, #16]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2101      	movs	r1, #1
 8001b14:	430a      	orrs	r2, r1
 8001b16:	611a      	str	r2, [r3, #16]
 8001b18:	e00e      	b.n	8001b38 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	2201      	movs	r2, #1
 8001b22:	4013      	ands	r3, r2
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d107      	bne.n	8001b38 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	691a      	ldr	r2, [r3, #16]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2101      	movs	r1, #1
 8001b34:	438a      	bics	r2, r1
 8001b36:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	695a      	ldr	r2, [r3, #20]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2107      	movs	r1, #7
 8001b44:	438a      	bics	r2, r1
 8001b46:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6959      	ldr	r1, [r3, #20]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b64:	2203      	movs	r2, #3
 8001b66:	4393      	bics	r3, r2
 8001b68:	2201      	movs	r2, #1
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	0018      	movs	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	b002      	add	sp, #8
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	fffffefd 	.word	0xfffffefd
 8001b80:	40012708 	.word	0x40012708
 8001b84:	ffc3ffff 	.word	0xffc3ffff
 8001b88:	fdffffff 	.word	0xfdffffff
 8001b8c:	fffe0219 	.word	0xfffe0219
 8001b90:	fffffc03 	.word	0xfffffc03

08001b94 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001b94:	b590      	push	{r4, r7, lr}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b9c:	230f      	movs	r3, #15
 8001b9e:	18fb      	adds	r3, r7, r3
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2204      	movs	r2, #4
 8001bac:	4013      	ands	r3, r2
 8001bae:	d138      	bne.n	8001c22 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2250      	movs	r2, #80	; 0x50
 8001bb4:	5c9b      	ldrb	r3, [r3, r2]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <HAL_ADC_Start+0x2a>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e038      	b.n	8001c30 <HAL_ADC_Start+0x9c>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2250      	movs	r2, #80	; 0x50
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d007      	beq.n	8001bde <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001bce:	230f      	movs	r3, #15
 8001bd0:	18fc      	adds	r4, r7, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f000 f9b9 	bl	8001f4c <ADC_Enable>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001bde:	230f      	movs	r3, #15
 8001be0:	18fb      	adds	r3, r7, r3
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d120      	bne.n	8001c2a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bec:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <HAL_ADC_Start+0xa4>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	2280      	movs	r2, #128	; 0x80
 8001bf2:	0052      	lsls	r2, r2, #1
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2250      	movs	r2, #80	; 0x50
 8001c04:	2100      	movs	r1, #0
 8001c06:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	221c      	movs	r2, #28
 8001c0e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2104      	movs	r1, #4
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	e003      	b.n	8001c2a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c22:	230f      	movs	r3, #15
 8001c24:	18fb      	adds	r3, r7, r3
 8001c26:	2202      	movs	r2, #2
 8001c28:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c2a:	230f      	movs	r3, #15
 8001c2c:	18fb      	adds	r3, r7, r3
 8001c2e:	781b      	ldrb	r3, [r3, #0]
}
 8001c30:	0018      	movs	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	b005      	add	sp, #20
 8001c36:	bd90      	pop	{r4, r7, pc}
 8001c38:	fffff0fe 	.word	0xfffff0fe

08001c3c <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001c3c:	b5b0      	push	{r4, r5, r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c44:	230f      	movs	r3, #15
 8001c46:	18fb      	adds	r3, r7, r3
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2250      	movs	r2, #80	; 0x50
 8001c50:	5c9b      	ldrb	r3, [r3, r2]
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d101      	bne.n	8001c5a <HAL_ADC_Stop+0x1e>
 8001c56:	2302      	movs	r3, #2
 8001c58:	e029      	b.n	8001cae <HAL_ADC_Stop+0x72>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2250      	movs	r2, #80	; 0x50
 8001c5e:	2101      	movs	r1, #1
 8001c60:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001c62:	250f      	movs	r5, #15
 8001c64:	197c      	adds	r4, r7, r5
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f000 fa3e 	bl	80020ea <ADC_ConversionStop>
 8001c6e:	0003      	movs	r3, r0
 8001c70:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001c72:	197b      	adds	r3, r7, r5
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d112      	bne.n	8001ca0 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001c7a:	197c      	adds	r4, r7, r5
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f000 f9cc 	bl	800201c <ADC_Disable>
 8001c84:	0003      	movs	r3, r0
 8001c86:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001c88:	197b      	adds	r3, r7, r5
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d107      	bne.n	8001ca0 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c94:	4a08      	ldr	r2, [pc, #32]	; (8001cb8 <HAL_ADC_Stop+0x7c>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	2201      	movs	r2, #1
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2250      	movs	r2, #80	; 0x50
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001ca8:	230f      	movs	r3, #15
 8001caa:	18fb      	adds	r3, r7, r3
 8001cac:	781b      	ldrb	r3, [r3, #0]
}
 8001cae:	0018      	movs	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b004      	add	sp, #16
 8001cb4:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	fffffefe 	.word	0xfffffefe

08001cbc <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	2b08      	cmp	r3, #8
 8001cd4:	d102      	bne.n	8001cdc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001cd6:	2308      	movs	r3, #8
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	e014      	b.n	8001d06 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d10b      	bne.n	8001d02 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cee:	2220      	movs	r2, #32
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2250      	movs	r2, #80	; 0x50
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e072      	b.n	8001de8 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001d02:	230c      	movs	r3, #12
 8001d04:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001d06:	f7ff fda3 	bl	8001850 <HAL_GetTick>
 8001d0a:	0003      	movs	r3, r0
 8001d0c:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001d0e:	e01f      	b.n	8001d50 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	3301      	adds	r3, #1
 8001d14:	d01c      	beq.n	8001d50 <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d007      	beq.n	8001d2c <HAL_ADC_PollForConversion+0x70>
 8001d1c:	f7ff fd98 	bl	8001850 <HAL_GetTick>
 8001d20:	0002      	movs	r2, r0
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d211      	bcs.n	8001d50 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	4013      	ands	r3, r2
 8001d36:	d10b      	bne.n	8001d50 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2250      	movs	r2, #80	; 0x50
 8001d48:	2100      	movs	r1, #0
 8001d4a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e04b      	b.n	8001de8 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d0d9      	beq.n	8001d10 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d60:	2280      	movs	r2, #128	; 0x80
 8001d62:	0092      	lsls	r2, r2, #2
 8001d64:	431a      	orrs	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	23c0      	movs	r3, #192	; 0xc0
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	4013      	ands	r3, r2
 8001d76:	d12e      	bne.n	8001dd6 <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d129      	bne.n	8001dd6 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2208      	movs	r2, #8
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d122      	bne.n	8001dd6 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2204      	movs	r2, #4
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d110      	bne.n	8001dbe <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	210c      	movs	r1, #12
 8001da8:	438a      	bics	r2, r1
 8001daa:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db0:	4a0f      	ldr	r2, [pc, #60]	; (8001df0 <HAL_ADC_PollForConversion+0x134>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	2201      	movs	r2, #1
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	655a      	str	r2, [r3, #84]	; 0x54
 8001dbc:	e00b      	b.n	8001dd6 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dce:	2201      	movs	r2, #1
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d103      	bne.n	8001de6 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	220c      	movs	r2, #12
 8001de4:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	0018      	movs	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b004      	add	sp, #16
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	fffffefe 	.word	0xfffffefe

08001df4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001e02:	0018      	movs	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	b002      	add	sp, #8
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2250      	movs	r2, #80	; 0x50
 8001e1a:	5c9b      	ldrb	r3, [r3, r2]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x18>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e085      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x124>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2250      	movs	r2, #80	; 0x50
 8001e28:	2101      	movs	r1, #1
 8001e2a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2204      	movs	r2, #4
 8001e34:	4013      	ands	r3, r2
 8001e36:	d00b      	beq.n	8001e50 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2250      	movs	r2, #80	; 0x50
 8001e48:	2100      	movs	r1, #0
 8001e4a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e06f      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	4a38      	ldr	r2, [pc, #224]	; (8001f38 <HAL_ADC_ConfigChannel+0x12c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d035      	beq.n	8001ec6 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	035b      	lsls	r3, r3, #13
 8001e66:	0b5a      	lsrs	r2, r3, #13
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	2380      	movs	r3, #128	; 0x80
 8001e76:	02db      	lsls	r3, r3, #11
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d009      	beq.n	8001e90 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8001e7c:	4b2f      	ldr	r3, [pc, #188]	; (8001f3c <HAL_ADC_ConfigChannel+0x130>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	4b2e      	ldr	r3, [pc, #184]	; (8001f3c <HAL_ADC_ConfigChannel+0x130>)
 8001e82:	2180      	movs	r1, #128	; 0x80
 8001e84:	0409      	lsls	r1, r1, #16
 8001e86:	430a      	orrs	r2, r1
 8001e88:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001e8a:	200a      	movs	r0, #10
 8001e8c:	f000 f97a 	bl	8002184 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	029b      	lsls	r3, r3, #10
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d006      	beq.n	8001eaa <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001e9c:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <HAL_ADC_ConfigChannel+0x130>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <HAL_ADC_ConfigChannel+0x130>)
 8001ea2:	2180      	movs	r1, #128	; 0x80
 8001ea4:	03c9      	lsls	r1, r1, #15
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	025b      	lsls	r3, r3, #9
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d037      	beq.n	8001f26 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8001eb6:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <HAL_ADC_ConfigChannel+0x130>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <HAL_ADC_ConfigChannel+0x130>)
 8001ebc:	2180      	movs	r1, #128	; 0x80
 8001ebe:	0449      	lsls	r1, r1, #17
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	e02f      	b.n	8001f26 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	035b      	lsls	r3, r3, #13
 8001ed2:	0b5b      	lsrs	r3, r3, #13
 8001ed4:	43d9      	mvns	r1, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	400a      	ands	r2, r1
 8001edc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	02db      	lsls	r3, r3, #11
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d005      	beq.n	8001ef6 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8001eea:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <HAL_ADC_ConfigChannel+0x130>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <HAL_ADC_ConfigChannel+0x130>)
 8001ef0:	4913      	ldr	r1, [pc, #76]	; (8001f40 <HAL_ADC_ConfigChannel+0x134>)
 8001ef2:	400a      	ands	r2, r1
 8001ef4:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	2380      	movs	r3, #128	; 0x80
 8001efc:	029b      	lsls	r3, r3, #10
 8001efe:	4013      	ands	r3, r2
 8001f00:	d005      	beq.n	8001f0e <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001f02:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <HAL_ADC_ConfigChannel+0x130>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <HAL_ADC_ConfigChannel+0x130>)
 8001f08:	490e      	ldr	r1, [pc, #56]	; (8001f44 <HAL_ADC_ConfigChannel+0x138>)
 8001f0a:	400a      	ands	r2, r1
 8001f0c:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	025b      	lsls	r3, r3, #9
 8001f16:	4013      	ands	r3, r2
 8001f18:	d005      	beq.n	8001f26 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8001f1a:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <HAL_ADC_ConfigChannel+0x130>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <HAL_ADC_ConfigChannel+0x130>)
 8001f20:	4909      	ldr	r1, [pc, #36]	; (8001f48 <HAL_ADC_ConfigChannel+0x13c>)
 8001f22:	400a      	ands	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2250      	movs	r2, #80	; 0x50
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	0018      	movs	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	b002      	add	sp, #8
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	00001001 	.word	0x00001001
 8001f3c:	40012708 	.word	0x40012708
 8001f40:	ff7fffff 	.word	0xff7fffff
 8001f44:	ffbfffff 	.word	0xffbfffff
 8001f48:	feffffff 	.word	0xfeffffff

08001f4c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	2203      	movs	r2, #3
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d108      	bne.n	8001f78 <ADC_Enable+0x2c>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	4013      	ands	r3, r2
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <ADC_Enable+0x2c>
 8001f74:	2301      	movs	r3, #1
 8001f76:	e000      	b.n	8001f7a <ADC_Enable+0x2e>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d146      	bne.n	800200c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	4a24      	ldr	r2, [pc, #144]	; (8002018 <ADC_Enable+0xcc>)
 8001f86:	4013      	ands	r3, r2
 8001f88:	d00d      	beq.n	8001fa6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8e:	2210      	movs	r2, #16
 8001f90:	431a      	orrs	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e033      	b.n	800200e <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2101      	movs	r1, #1
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001fb6:	2001      	movs	r0, #1
 8001fb8:	f000 f8e4 	bl	8002184 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001fbc:	f7ff fc48 	bl	8001850 <HAL_GetTick>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001fc4:	e01b      	b.n	8001ffe <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fc6:	f7ff fc43 	bl	8001850 <HAL_GetTick>
 8001fca:	0002      	movs	r2, r0
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b0a      	cmp	r3, #10
 8001fd2:	d914      	bls.n	8001ffe <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d00d      	beq.n	8001ffe <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe6:	2210      	movs	r2, #16
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	431a      	orrs	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e007      	b.n	800200e <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2201      	movs	r2, #1
 8002006:	4013      	ands	r3, r2
 8002008:	2b01      	cmp	r3, #1
 800200a:	d1dc      	bne.n	8001fc6 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	0018      	movs	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	b004      	add	sp, #16
 8002014:	bd80      	pop	{r7, pc}
 8002016:	46c0      	nop			; (mov r8, r8)
 8002018:	80000017 	.word	0x80000017

0800201c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2203      	movs	r2, #3
 8002030:	4013      	ands	r3, r2
 8002032:	2b01      	cmp	r3, #1
 8002034:	d108      	bne.n	8002048 <ADC_Disable+0x2c>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2201      	movs	r2, #1
 800203e:	4013      	ands	r3, r2
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <ADC_Disable+0x2c>
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <ADC_Disable+0x2e>
 8002048:	2300      	movs	r3, #0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d048      	beq.n	80020e0 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	2205      	movs	r2, #5
 8002056:	4013      	ands	r3, r2
 8002058:	2b01      	cmp	r3, #1
 800205a:	d110      	bne.n	800207e <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2102      	movs	r1, #2
 8002068:	430a      	orrs	r2, r1
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2203      	movs	r2, #3
 8002072:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002074:	f7ff fbec 	bl	8001850 <HAL_GetTick>
 8002078:	0003      	movs	r3, r0
 800207a:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800207c:	e029      	b.n	80020d2 <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002082:	2210      	movs	r2, #16
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208e:	2201      	movs	r2, #1
 8002090:	431a      	orrs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e023      	b.n	80020e2 <ADC_Disable+0xc6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800209a:	f7ff fbd9 	bl	8001850 <HAL_GetTick>
 800209e:	0002      	movs	r2, r0
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b0a      	cmp	r3, #10
 80020a6:	d914      	bls.n	80020d2 <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2201      	movs	r2, #1
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d10d      	bne.n	80020d2 <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ba:	2210      	movs	r2, #16
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c6:	2201      	movs	r2, #1
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e007      	b.n	80020e2 <ADC_Disable+0xc6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2201      	movs	r2, #1
 80020da:	4013      	ands	r3, r2
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d0dc      	beq.n	800209a <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	0018      	movs	r0, r3
 80020e4:	46bd      	mov	sp, r7
 80020e6:	b004      	add	sp, #16
 80020e8:	bd80      	pop	{r7, pc}

080020ea <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b084      	sub	sp, #16
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2204      	movs	r2, #4
 80020fe:	4013      	ands	r3, r2
 8002100:	d03a      	beq.n	8002178 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	2204      	movs	r2, #4
 800210a:	4013      	ands	r3, r2
 800210c:	2b04      	cmp	r3, #4
 800210e:	d10d      	bne.n	800212c <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2202      	movs	r2, #2
 8002118:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800211a:	d107      	bne.n	800212c <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2110      	movs	r1, #16
 8002128:	430a      	orrs	r2, r1
 800212a:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800212c:	f7ff fb90 	bl	8001850 <HAL_GetTick>
 8002130:	0003      	movs	r3, r0
 8002132:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002134:	e01a      	b.n	800216c <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002136:	f7ff fb8b 	bl	8001850 <HAL_GetTick>
 800213a:	0002      	movs	r2, r0
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b0a      	cmp	r3, #10
 8002142:	d913      	bls.n	800216c <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2204      	movs	r2, #4
 800214c:	4013      	ands	r3, r2
 800214e:	d00d      	beq.n	800216c <ADC_ConversionStop+0x82>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002154:	2210      	movs	r2, #16
 8002156:	431a      	orrs	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	2201      	movs	r2, #1
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e006      	b.n	800217a <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2204      	movs	r2, #4
 8002174:	4013      	ands	r3, r2
 8002176:	d1de      	bne.n	8002136 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	0018      	movs	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	b004      	add	sp, #16
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <ADC_DelayMicroSecond+0x38>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	490b      	ldr	r1, [pc, #44]	; (80021c0 <ADC_DelayMicroSecond+0x3c>)
 8002192:	0018      	movs	r0, r3
 8002194:	f7fd ffca 	bl	800012c <__udivsi3>
 8002198:	0003      	movs	r3, r0
 800219a:	001a      	movs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4353      	muls	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80021a2:	e002      	b.n	80021aa <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f9      	bne.n	80021a4 <ADC_DelayMicroSecond+0x20>
  } 
}
 80021b0:	46c0      	nop			; (mov r8, r8)
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b004      	add	sp, #16
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	200000ec 	.word	0x200000ec
 80021c0:	000f4240 	.word	0x000f4240

080021c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	0002      	movs	r2, r0
 80021cc:	1dfb      	adds	r3, r7, #7
 80021ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021d0:	1dfb      	adds	r3, r7, #7
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b7f      	cmp	r3, #127	; 0x7f
 80021d6:	d809      	bhi.n	80021ec <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021d8:	1dfb      	adds	r3, r7, #7
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	001a      	movs	r2, r3
 80021de:	231f      	movs	r3, #31
 80021e0:	401a      	ands	r2, r3
 80021e2:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <__NVIC_EnableIRQ+0x30>)
 80021e4:	2101      	movs	r1, #1
 80021e6:	4091      	lsls	r1, r2
 80021e8:	000a      	movs	r2, r1
 80021ea:	601a      	str	r2, [r3, #0]
  }
}
 80021ec:	46c0      	nop			; (mov r8, r8)
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b002      	add	sp, #8
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	e000e100 	.word	0xe000e100

080021f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021f8:	b590      	push	{r4, r7, lr}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	0002      	movs	r2, r0
 8002200:	6039      	str	r1, [r7, #0]
 8002202:	1dfb      	adds	r3, r7, #7
 8002204:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002206:	1dfb      	adds	r3, r7, #7
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b7f      	cmp	r3, #127	; 0x7f
 800220c:	d828      	bhi.n	8002260 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800220e:	4a2f      	ldr	r2, [pc, #188]	; (80022cc <__NVIC_SetPriority+0xd4>)
 8002210:	1dfb      	adds	r3, r7, #7
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	b25b      	sxtb	r3, r3
 8002216:	089b      	lsrs	r3, r3, #2
 8002218:	33c0      	adds	r3, #192	; 0xc0
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	589b      	ldr	r3, [r3, r2]
 800221e:	1dfa      	adds	r2, r7, #7
 8002220:	7812      	ldrb	r2, [r2, #0]
 8002222:	0011      	movs	r1, r2
 8002224:	2203      	movs	r2, #3
 8002226:	400a      	ands	r2, r1
 8002228:	00d2      	lsls	r2, r2, #3
 800222a:	21ff      	movs	r1, #255	; 0xff
 800222c:	4091      	lsls	r1, r2
 800222e:	000a      	movs	r2, r1
 8002230:	43d2      	mvns	r2, r2
 8002232:	401a      	ands	r2, r3
 8002234:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	019b      	lsls	r3, r3, #6
 800223a:	22ff      	movs	r2, #255	; 0xff
 800223c:	401a      	ands	r2, r3
 800223e:	1dfb      	adds	r3, r7, #7
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	0018      	movs	r0, r3
 8002244:	2303      	movs	r3, #3
 8002246:	4003      	ands	r3, r0
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800224c:	481f      	ldr	r0, [pc, #124]	; (80022cc <__NVIC_SetPriority+0xd4>)
 800224e:	1dfb      	adds	r3, r7, #7
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	b25b      	sxtb	r3, r3
 8002254:	089b      	lsrs	r3, r3, #2
 8002256:	430a      	orrs	r2, r1
 8002258:	33c0      	adds	r3, #192	; 0xc0
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800225e:	e031      	b.n	80022c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002260:	4a1b      	ldr	r2, [pc, #108]	; (80022d0 <__NVIC_SetPriority+0xd8>)
 8002262:	1dfb      	adds	r3, r7, #7
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	0019      	movs	r1, r3
 8002268:	230f      	movs	r3, #15
 800226a:	400b      	ands	r3, r1
 800226c:	3b08      	subs	r3, #8
 800226e:	089b      	lsrs	r3, r3, #2
 8002270:	3306      	adds	r3, #6
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	18d3      	adds	r3, r2, r3
 8002276:	3304      	adds	r3, #4
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	1dfa      	adds	r2, r7, #7
 800227c:	7812      	ldrb	r2, [r2, #0]
 800227e:	0011      	movs	r1, r2
 8002280:	2203      	movs	r2, #3
 8002282:	400a      	ands	r2, r1
 8002284:	00d2      	lsls	r2, r2, #3
 8002286:	21ff      	movs	r1, #255	; 0xff
 8002288:	4091      	lsls	r1, r2
 800228a:	000a      	movs	r2, r1
 800228c:	43d2      	mvns	r2, r2
 800228e:	401a      	ands	r2, r3
 8002290:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	019b      	lsls	r3, r3, #6
 8002296:	22ff      	movs	r2, #255	; 0xff
 8002298:	401a      	ands	r2, r3
 800229a:	1dfb      	adds	r3, r7, #7
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	0018      	movs	r0, r3
 80022a0:	2303      	movs	r3, #3
 80022a2:	4003      	ands	r3, r0
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022a8:	4809      	ldr	r0, [pc, #36]	; (80022d0 <__NVIC_SetPriority+0xd8>)
 80022aa:	1dfb      	adds	r3, r7, #7
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	001c      	movs	r4, r3
 80022b0:	230f      	movs	r3, #15
 80022b2:	4023      	ands	r3, r4
 80022b4:	3b08      	subs	r3, #8
 80022b6:	089b      	lsrs	r3, r3, #2
 80022b8:	430a      	orrs	r2, r1
 80022ba:	3306      	adds	r3, #6
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	18c3      	adds	r3, r0, r3
 80022c0:	3304      	adds	r3, #4
 80022c2:	601a      	str	r2, [r3, #0]
}
 80022c4:	46c0      	nop			; (mov r8, r8)
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b003      	add	sp, #12
 80022ca:	bd90      	pop	{r4, r7, pc}
 80022cc:	e000e100 	.word	0xe000e100
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	1e5a      	subs	r2, r3, #1
 80022e0:	2380      	movs	r3, #128	; 0x80
 80022e2:	045b      	lsls	r3, r3, #17
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d301      	bcc.n	80022ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022e8:	2301      	movs	r3, #1
 80022ea:	e010      	b.n	800230e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ec:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <SysTick_Config+0x44>)
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	3a01      	subs	r2, #1
 80022f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f4:	2301      	movs	r3, #1
 80022f6:	425b      	negs	r3, r3
 80022f8:	2103      	movs	r1, #3
 80022fa:	0018      	movs	r0, r3
 80022fc:	f7ff ff7c 	bl	80021f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <SysTick_Config+0x44>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002306:	4b04      	ldr	r3, [pc, #16]	; (8002318 <SysTick_Config+0x44>)
 8002308:	2207      	movs	r2, #7
 800230a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800230c:	2300      	movs	r3, #0
}
 800230e:	0018      	movs	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	b002      	add	sp, #8
 8002314:	bd80      	pop	{r7, pc}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	e000e010 	.word	0xe000e010

0800231c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	210f      	movs	r1, #15
 8002328:	187b      	adds	r3, r7, r1
 800232a:	1c02      	adds	r2, r0, #0
 800232c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	187b      	adds	r3, r7, r1
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	b25b      	sxtb	r3, r3
 8002336:	0011      	movs	r1, r2
 8002338:	0018      	movs	r0, r3
 800233a:	f7ff ff5d 	bl	80021f8 <__NVIC_SetPriority>
}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	46bd      	mov	sp, r7
 8002342:	b004      	add	sp, #16
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	0002      	movs	r2, r0
 800234e:	1dfb      	adds	r3, r7, #7
 8002350:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002352:	1dfb      	adds	r3, r7, #7
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	b25b      	sxtb	r3, r3
 8002358:	0018      	movs	r0, r3
 800235a:	f7ff ff33 	bl	80021c4 <__NVIC_EnableIRQ>
}
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	46bd      	mov	sp, r7
 8002362:	b002      	add	sp, #8
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	0018      	movs	r0, r3
 8002372:	f7ff ffaf 	bl	80022d4 <SysTick_Config>
 8002376:	0003      	movs	r3, r0
}
 8002378:	0018      	movs	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	b002      	add	sp, #8
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e061      	b.n	8002456 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a32      	ldr	r2, [pc, #200]	; (8002460 <HAL_DMA_Init+0xe0>)
 8002398:	4694      	mov	ip, r2
 800239a:	4463      	add	r3, ip
 800239c:	2114      	movs	r1, #20
 800239e:	0018      	movs	r0, r3
 80023a0:	f7fd fec4 	bl	800012c <__udivsi3>
 80023a4:	0003      	movs	r3, r0
 80023a6:	009a      	lsls	r2, r3, #2
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a2d      	ldr	r2, [pc, #180]	; (8002464 <HAL_DMA_Init+0xe4>)
 80023b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2225      	movs	r2, #37	; 0x25
 80023b6:	2102      	movs	r1, #2
 80023b8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	4a28      	ldr	r2, [pc, #160]	; (8002468 <HAL_DMA_Init+0xe8>)
 80023c6:	4013      	ands	r3, r2
 80023c8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80023d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	01db      	lsls	r3, r3, #7
 8002408:	429a      	cmp	r2, r3
 800240a:	d018      	beq.n	800243e <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800240c:	4b17      	ldr	r3, [pc, #92]	; (800246c <HAL_DMA_Init+0xec>)
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002414:	211c      	movs	r1, #28
 8002416:	400b      	ands	r3, r1
 8002418:	210f      	movs	r1, #15
 800241a:	4099      	lsls	r1, r3
 800241c:	000b      	movs	r3, r1
 800241e:	43d9      	mvns	r1, r3
 8002420:	4b12      	ldr	r3, [pc, #72]	; (800246c <HAL_DMA_Init+0xec>)
 8002422:	400a      	ands	r2, r1
 8002424:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <HAL_DMA_Init+0xec>)
 8002428:	6819      	ldr	r1, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002432:	201c      	movs	r0, #28
 8002434:	4003      	ands	r3, r0
 8002436:	409a      	lsls	r2, r3
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <HAL_DMA_Init+0xec>)
 800243a:	430a      	orrs	r2, r1
 800243c:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2225      	movs	r2, #37	; 0x25
 8002448:	2101      	movs	r1, #1
 800244a:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2224      	movs	r2, #36	; 0x24
 8002450:	2100      	movs	r1, #0
 8002452:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	0018      	movs	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	b004      	add	sp, #16
 800245c:	bd80      	pop	{r7, pc}
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	bffdfff8 	.word	0xbffdfff8
 8002464:	40020000 	.word	0x40020000
 8002468:	ffff800f 	.word	0xffff800f
 800246c:	400200a8 	.word	0x400200a8

08002470 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002478:	230f      	movs	r3, #15
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	2200      	movs	r2, #0
 800247e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2225      	movs	r2, #37	; 0x25
 8002484:	5c9b      	ldrb	r3, [r3, r2]
 8002486:	b2db      	uxtb	r3, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d008      	beq.n	800249e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2204      	movs	r2, #4
 8002490:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2224      	movs	r2, #36	; 0x24
 8002496:	2100      	movs	r1, #0
 8002498:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e024      	b.n	80024e8 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	210e      	movs	r1, #14
 80024aa:	438a      	bics	r2, r1
 80024ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2101      	movs	r1, #1
 80024ba:	438a      	bics	r2, r1
 80024bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	221c      	movs	r2, #28
 80024c4:	401a      	ands	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	2101      	movs	r1, #1
 80024cc:	4091      	lsls	r1, r2
 80024ce:	000a      	movs	r2, r1
 80024d0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2225      	movs	r2, #37	; 0x25
 80024d6:	2101      	movs	r1, #1
 80024d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2224      	movs	r2, #36	; 0x24
 80024de:	2100      	movs	r1, #0
 80024e0:	5499      	strb	r1, [r3, r2]

    return status;
 80024e2:	230f      	movs	r3, #15
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80024e8:	0018      	movs	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b004      	add	sp, #16
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024f8:	210f      	movs	r1, #15
 80024fa:	187b      	adds	r3, r7, r1
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2225      	movs	r2, #37	; 0x25
 8002504:	5c9b      	ldrb	r3, [r3, r2]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d006      	beq.n	800251a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2204      	movs	r2, #4
 8002510:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002512:	187b      	adds	r3, r7, r1
 8002514:	2201      	movs	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]
 8002518:	e02a      	b.n	8002570 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	210e      	movs	r1, #14
 8002526:	438a      	bics	r2, r1
 8002528:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2101      	movs	r1, #1
 8002536:	438a      	bics	r2, r1
 8002538:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	221c      	movs	r2, #28
 8002540:	401a      	ands	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	2101      	movs	r1, #1
 8002548:	4091      	lsls	r1, r2
 800254a:	000a      	movs	r2, r1
 800254c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2225      	movs	r2, #37	; 0x25
 8002552:	2101      	movs	r1, #1
 8002554:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2224      	movs	r2, #36	; 0x24
 800255a:	2100      	movs	r1, #0
 800255c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002562:	2b00      	cmp	r3, #0
 8002564:	d004      	beq.n	8002570 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	0010      	movs	r0, r2
 800256e:	4798      	blx	r3
    }
  }
  return status;
 8002570:	230f      	movs	r3, #15
 8002572:	18fb      	adds	r3, r7, r3
 8002574:	781b      	ldrb	r3, [r3, #0]
}
 8002576:	0018      	movs	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	b004      	add	sp, #16
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259a:	221c      	movs	r2, #28
 800259c:	4013      	ands	r3, r2
 800259e:	2204      	movs	r2, #4
 80025a0:	409a      	lsls	r2, r3
 80025a2:	0013      	movs	r3, r2
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4013      	ands	r3, r2
 80025a8:	d026      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x7a>
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2204      	movs	r2, #4
 80025ae:	4013      	ands	r3, r2
 80025b0:	d022      	beq.n	80025f8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2220      	movs	r2, #32
 80025ba:	4013      	ands	r3, r2
 80025bc:	d107      	bne.n	80025ce <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2104      	movs	r1, #4
 80025ca:	438a      	bics	r2, r1
 80025cc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d2:	221c      	movs	r2, #28
 80025d4:	401a      	ands	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	2104      	movs	r1, #4
 80025dc:	4091      	lsls	r1, r2
 80025de:	000a      	movs	r2, r1
 80025e0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d100      	bne.n	80025ec <HAL_DMA_IRQHandler+0x6e>
 80025ea:	e071      	b.n	80026d0 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	0010      	movs	r0, r2
 80025f4:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80025f6:	e06b      	b.n	80026d0 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fc:	221c      	movs	r2, #28
 80025fe:	4013      	ands	r3, r2
 8002600:	2202      	movs	r2, #2
 8002602:	409a      	lsls	r2, r3
 8002604:	0013      	movs	r3, r2
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4013      	ands	r3, r2
 800260a:	d02d      	beq.n	8002668 <HAL_DMA_IRQHandler+0xea>
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2202      	movs	r2, #2
 8002610:	4013      	ands	r3, r2
 8002612:	d029      	beq.n	8002668 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2220      	movs	r2, #32
 800261c:	4013      	ands	r3, r2
 800261e:	d10b      	bne.n	8002638 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	210a      	movs	r1, #10
 800262c:	438a      	bics	r2, r1
 800262e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2225      	movs	r2, #37	; 0x25
 8002634:	2101      	movs	r1, #1
 8002636:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800263c:	221c      	movs	r2, #28
 800263e:	401a      	ands	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002644:	2102      	movs	r1, #2
 8002646:	4091      	lsls	r1, r2
 8002648:	000a      	movs	r2, r1
 800264a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2224      	movs	r2, #36	; 0x24
 8002650:	2100      	movs	r1, #0
 8002652:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002658:	2b00      	cmp	r3, #0
 800265a:	d039      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	0010      	movs	r0, r2
 8002664:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002666:	e033      	b.n	80026d0 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266c:	221c      	movs	r2, #28
 800266e:	4013      	ands	r3, r2
 8002670:	2208      	movs	r2, #8
 8002672:	409a      	lsls	r2, r3
 8002674:	0013      	movs	r3, r2
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4013      	ands	r3, r2
 800267a:	d02a      	beq.n	80026d2 <HAL_DMA_IRQHandler+0x154>
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2208      	movs	r2, #8
 8002680:	4013      	ands	r3, r2
 8002682:	d026      	beq.n	80026d2 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	210e      	movs	r1, #14
 8002690:	438a      	bics	r2, r1
 8002692:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002698:	221c      	movs	r2, #28
 800269a:	401a      	ands	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a0:	2101      	movs	r1, #1
 80026a2:	4091      	lsls	r1, r2
 80026a4:	000a      	movs	r2, r1
 80026a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2225      	movs	r2, #37	; 0x25
 80026b2:	2101      	movs	r1, #1
 80026b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2224      	movs	r2, #36	; 0x24
 80026ba:	2100      	movs	r1, #0
 80026bc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d005      	beq.n	80026d2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	0010      	movs	r0, r2
 80026ce:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80026d0:	46c0      	nop			; (mov r8, r8)
 80026d2:	46c0      	nop			; (mov r8, r8)
}
 80026d4:	46bd      	mov	sp, r7
 80026d6:	b004      	add	sp, #16
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80026f2:	e155      	b.n	80029a0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2101      	movs	r1, #1
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4091      	lsls	r1, r2
 80026fe:	000a      	movs	r2, r1
 8002700:	4013      	ands	r3, r2
 8002702:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d100      	bne.n	800270c <HAL_GPIO_Init+0x30>
 800270a:	e146      	b.n	800299a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2203      	movs	r2, #3
 8002712:	4013      	ands	r3, r2
 8002714:	2b01      	cmp	r3, #1
 8002716:	d005      	beq.n	8002724 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2203      	movs	r2, #3
 800271e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002720:	2b02      	cmp	r3, #2
 8002722:	d130      	bne.n	8002786 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	2203      	movs	r2, #3
 8002730:	409a      	lsls	r2, r3
 8002732:	0013      	movs	r3, r2
 8002734:	43da      	mvns	r2, r3
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4013      	ands	r3, r2
 800273a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68da      	ldr	r2, [r3, #12]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	409a      	lsls	r2, r3
 8002746:	0013      	movs	r3, r2
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800275a:	2201      	movs	r2, #1
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	409a      	lsls	r2, r3
 8002760:	0013      	movs	r3, r2
 8002762:	43da      	mvns	r2, r3
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4013      	ands	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	091b      	lsrs	r3, r3, #4
 8002770:	2201      	movs	r2, #1
 8002772:	401a      	ands	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	409a      	lsls	r2, r3
 8002778:	0013      	movs	r3, r2
 800277a:	693a      	ldr	r2, [r7, #16]
 800277c:	4313      	orrs	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2203      	movs	r2, #3
 800278c:	4013      	ands	r3, r2
 800278e:	2b03      	cmp	r3, #3
 8002790:	d017      	beq.n	80027c2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	2203      	movs	r2, #3
 800279e:	409a      	lsls	r2, r3
 80027a0:	0013      	movs	r3, r2
 80027a2:	43da      	mvns	r2, r3
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4013      	ands	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	409a      	lsls	r2, r3
 80027b4:	0013      	movs	r3, r2
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2203      	movs	r2, #3
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d123      	bne.n	8002816 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	08da      	lsrs	r2, r3, #3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3208      	adds	r2, #8
 80027d6:	0092      	lsls	r2, r2, #2
 80027d8:	58d3      	ldr	r3, [r2, r3]
 80027da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	2207      	movs	r2, #7
 80027e0:	4013      	ands	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	220f      	movs	r2, #15
 80027e6:	409a      	lsls	r2, r3
 80027e8:	0013      	movs	r3, r2
 80027ea:	43da      	mvns	r2, r3
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	4013      	ands	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	691a      	ldr	r2, [r3, #16]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2107      	movs	r1, #7
 80027fa:	400b      	ands	r3, r1
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	409a      	lsls	r2, r3
 8002800:	0013      	movs	r3, r2
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	08da      	lsrs	r2, r3, #3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3208      	adds	r2, #8
 8002810:	0092      	lsls	r2, r2, #2
 8002812:	6939      	ldr	r1, [r7, #16]
 8002814:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	2203      	movs	r2, #3
 8002822:	409a      	lsls	r2, r3
 8002824:	0013      	movs	r3, r2
 8002826:	43da      	mvns	r2, r3
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4013      	ands	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2203      	movs	r2, #3
 8002834:	401a      	ands	r2, r3
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	409a      	lsls	r2, r3
 800283c:	0013      	movs	r3, r2
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	23c0      	movs	r3, #192	; 0xc0
 8002850:	029b      	lsls	r3, r3, #10
 8002852:	4013      	ands	r3, r2
 8002854:	d100      	bne.n	8002858 <HAL_GPIO_Init+0x17c>
 8002856:	e0a0      	b.n	800299a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002858:	4b57      	ldr	r3, [pc, #348]	; (80029b8 <HAL_GPIO_Init+0x2dc>)
 800285a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800285c:	4b56      	ldr	r3, [pc, #344]	; (80029b8 <HAL_GPIO_Init+0x2dc>)
 800285e:	2101      	movs	r1, #1
 8002860:	430a      	orrs	r2, r1
 8002862:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002864:	4a55      	ldr	r2, [pc, #340]	; (80029bc <HAL_GPIO_Init+0x2e0>)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	089b      	lsrs	r3, r3, #2
 800286a:	3302      	adds	r3, #2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	589b      	ldr	r3, [r3, r2]
 8002870:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2203      	movs	r2, #3
 8002876:	4013      	ands	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	220f      	movs	r2, #15
 800287c:	409a      	lsls	r2, r3
 800287e:	0013      	movs	r3, r2
 8002880:	43da      	mvns	r2, r3
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4013      	ands	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	23a0      	movs	r3, #160	; 0xa0
 800288c:	05db      	lsls	r3, r3, #23
 800288e:	429a      	cmp	r2, r3
 8002890:	d01f      	beq.n	80028d2 <HAL_GPIO_Init+0x1f6>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a4a      	ldr	r2, [pc, #296]	; (80029c0 <HAL_GPIO_Init+0x2e4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d019      	beq.n	80028ce <HAL_GPIO_Init+0x1f2>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a49      	ldr	r2, [pc, #292]	; (80029c4 <HAL_GPIO_Init+0x2e8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d013      	beq.n	80028ca <HAL_GPIO_Init+0x1ee>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a48      	ldr	r2, [pc, #288]	; (80029c8 <HAL_GPIO_Init+0x2ec>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d00d      	beq.n	80028c6 <HAL_GPIO_Init+0x1ea>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a47      	ldr	r2, [pc, #284]	; (80029cc <HAL_GPIO_Init+0x2f0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d007      	beq.n	80028c2 <HAL_GPIO_Init+0x1e6>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a46      	ldr	r2, [pc, #280]	; (80029d0 <HAL_GPIO_Init+0x2f4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d101      	bne.n	80028be <HAL_GPIO_Init+0x1e2>
 80028ba:	2305      	movs	r3, #5
 80028bc:	e00a      	b.n	80028d4 <HAL_GPIO_Init+0x1f8>
 80028be:	2306      	movs	r3, #6
 80028c0:	e008      	b.n	80028d4 <HAL_GPIO_Init+0x1f8>
 80028c2:	2304      	movs	r3, #4
 80028c4:	e006      	b.n	80028d4 <HAL_GPIO_Init+0x1f8>
 80028c6:	2303      	movs	r3, #3
 80028c8:	e004      	b.n	80028d4 <HAL_GPIO_Init+0x1f8>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e002      	b.n	80028d4 <HAL_GPIO_Init+0x1f8>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <HAL_GPIO_Init+0x1f8>
 80028d2:	2300      	movs	r3, #0
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	2103      	movs	r1, #3
 80028d8:	400a      	ands	r2, r1
 80028da:	0092      	lsls	r2, r2, #2
 80028dc:	4093      	lsls	r3, r2
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028e4:	4935      	ldr	r1, [pc, #212]	; (80029bc <HAL_GPIO_Init+0x2e0>)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	089b      	lsrs	r3, r3, #2
 80028ea:	3302      	adds	r3, #2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028f2:	4b38      	ldr	r3, [pc, #224]	; (80029d4 <HAL_GPIO_Init+0x2f8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	43da      	mvns	r2, r3
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4013      	ands	r3, r2
 8002900:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	2380      	movs	r3, #128	; 0x80
 8002908:	025b      	lsls	r3, r3, #9
 800290a:	4013      	ands	r3, r2
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002916:	4b2f      	ldr	r3, [pc, #188]	; (80029d4 <HAL_GPIO_Init+0x2f8>)
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800291c:	4b2d      	ldr	r3, [pc, #180]	; (80029d4 <HAL_GPIO_Init+0x2f8>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	43da      	mvns	r2, r3
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4013      	ands	r3, r2
 800292a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	2380      	movs	r3, #128	; 0x80
 8002932:	029b      	lsls	r3, r3, #10
 8002934:	4013      	ands	r3, r2
 8002936:	d003      	beq.n	8002940 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4313      	orrs	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002940:	4b24      	ldr	r3, [pc, #144]	; (80029d4 <HAL_GPIO_Init+0x2f8>)
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002946:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <HAL_GPIO_Init+0x2f8>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	43da      	mvns	r2, r3
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4013      	ands	r3, r2
 8002954:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	2380      	movs	r3, #128	; 0x80
 800295c:	035b      	lsls	r3, r3, #13
 800295e:	4013      	ands	r3, r2
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800296a:	4b1a      	ldr	r3, [pc, #104]	; (80029d4 <HAL_GPIO_Init+0x2f8>)
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002970:	4b18      	ldr	r3, [pc, #96]	; (80029d4 <HAL_GPIO_Init+0x2f8>)
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	43da      	mvns	r2, r3
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4013      	ands	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	039b      	lsls	r3, r3, #14
 8002988:	4013      	ands	r3, r2
 800298a:	d003      	beq.n	8002994 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002994:	4b0f      	ldr	r3, [pc, #60]	; (80029d4 <HAL_GPIO_Init+0x2f8>)
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	3301      	adds	r3, #1
 800299e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	40da      	lsrs	r2, r3
 80029a8:	1e13      	subs	r3, r2, #0
 80029aa:	d000      	beq.n	80029ae <HAL_GPIO_Init+0x2d2>
 80029ac:	e6a2      	b.n	80026f4 <HAL_GPIO_Init+0x18>
  }
}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	46c0      	nop			; (mov r8, r8)
 80029b2:	46bd      	mov	sp, r7
 80029b4:	b006      	add	sp, #24
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40010000 	.word	0x40010000
 80029c0:	50000400 	.word	0x50000400
 80029c4:	50000800 	.word	0x50000800
 80029c8:	50000c00 	.word	0x50000c00
 80029cc:	50001000 	.word	0x50001000
 80029d0:	50001c00 	.word	0x50001c00
 80029d4:	40010400 	.word	0x40010400

080029d8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	0008      	movs	r0, r1
 80029e2:	0011      	movs	r1, r2
 80029e4:	1cbb      	adds	r3, r7, #2
 80029e6:	1c02      	adds	r2, r0, #0
 80029e8:	801a      	strh	r2, [r3, #0]
 80029ea:	1c7b      	adds	r3, r7, #1
 80029ec:	1c0a      	adds	r2, r1, #0
 80029ee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029f0:	1c7b      	adds	r3, r7, #1
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d004      	beq.n	8002a02 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029f8:	1cbb      	adds	r3, r7, #2
 80029fa:	881a      	ldrh	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002a00:	e003      	b.n	8002a0a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002a02:	1cbb      	adds	r3, r7, #2
 8002a04:	881a      	ldrh	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	b002      	add	sp, #8
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a14:	b5b0      	push	{r4, r5, r7, lr}
 8002a16:	b08a      	sub	sp, #40	; 0x28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d102      	bne.n	8002a28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	f000 fbbf 	bl	80031a6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a28:	4bc9      	ldr	r3, [pc, #804]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	220c      	movs	r2, #12
 8002a2e:	4013      	ands	r3, r2
 8002a30:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a32:	4bc7      	ldr	r3, [pc, #796]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	2380      	movs	r3, #128	; 0x80
 8002a38:	025b      	lsls	r3, r3, #9
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2201      	movs	r2, #1
 8002a44:	4013      	ands	r3, r2
 8002a46:	d100      	bne.n	8002a4a <HAL_RCC_OscConfig+0x36>
 8002a48:	e07e      	b.n	8002b48 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d007      	beq.n	8002a60 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	2b0c      	cmp	r3, #12
 8002a54:	d112      	bne.n	8002a7c <HAL_RCC_OscConfig+0x68>
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	2380      	movs	r3, #128	; 0x80
 8002a5a:	025b      	lsls	r3, r3, #9
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d10d      	bne.n	8002a7c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a60:	4bbb      	ldr	r3, [pc, #748]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	2380      	movs	r3, #128	; 0x80
 8002a66:	029b      	lsls	r3, r3, #10
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d100      	bne.n	8002a6e <HAL_RCC_OscConfig+0x5a>
 8002a6c:	e06b      	b.n	8002b46 <HAL_RCC_OscConfig+0x132>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d167      	bne.n	8002b46 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	f000 fb95 	bl	80031a6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	2380      	movs	r3, #128	; 0x80
 8002a82:	025b      	lsls	r3, r3, #9
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d107      	bne.n	8002a98 <HAL_RCC_OscConfig+0x84>
 8002a88:	4bb1      	ldr	r3, [pc, #708]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	4bb0      	ldr	r3, [pc, #704]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002a8e:	2180      	movs	r1, #128	; 0x80
 8002a90:	0249      	lsls	r1, r1, #9
 8002a92:	430a      	orrs	r2, r1
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	e027      	b.n	8002ae8 <HAL_RCC_OscConfig+0xd4>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	23a0      	movs	r3, #160	; 0xa0
 8002a9e:	02db      	lsls	r3, r3, #11
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d10e      	bne.n	8002ac2 <HAL_RCC_OscConfig+0xae>
 8002aa4:	4baa      	ldr	r3, [pc, #680]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4ba9      	ldr	r3, [pc, #676]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002aaa:	2180      	movs	r1, #128	; 0x80
 8002aac:	02c9      	lsls	r1, r1, #11
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	4ba7      	ldr	r3, [pc, #668]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	4ba6      	ldr	r3, [pc, #664]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002ab8:	2180      	movs	r1, #128	; 0x80
 8002aba:	0249      	lsls	r1, r1, #9
 8002abc:	430a      	orrs	r2, r1
 8002abe:	601a      	str	r2, [r3, #0]
 8002ac0:	e012      	b.n	8002ae8 <HAL_RCC_OscConfig+0xd4>
 8002ac2:	4ba3      	ldr	r3, [pc, #652]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	4ba2      	ldr	r3, [pc, #648]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002ac8:	49a2      	ldr	r1, [pc, #648]	; (8002d54 <HAL_RCC_OscConfig+0x340>)
 8002aca:	400a      	ands	r2, r1
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	4ba0      	ldr	r3, [pc, #640]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	2380      	movs	r3, #128	; 0x80
 8002ad4:	025b      	lsls	r3, r3, #9
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4b9c      	ldr	r3, [pc, #624]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	4b9b      	ldr	r3, [pc, #620]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002ae2:	499d      	ldr	r1, [pc, #628]	; (8002d58 <HAL_RCC_OscConfig+0x344>)
 8002ae4:	400a      	ands	r2, r1
 8002ae6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d015      	beq.n	8002b1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af0:	f7fe feae 	bl	8001850 <HAL_GetTick>
 8002af4:	0003      	movs	r3, r0
 8002af6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002af8:	e009      	b.n	8002b0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002afa:	f7fe fea9 	bl	8001850 <HAL_GetTick>
 8002afe:	0002      	movs	r2, r0
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b64      	cmp	r3, #100	; 0x64
 8002b06:	d902      	bls.n	8002b0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	f000 fb4c 	bl	80031a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b0e:	4b90      	ldr	r3, [pc, #576]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	2380      	movs	r3, #128	; 0x80
 8002b14:	029b      	lsls	r3, r3, #10
 8002b16:	4013      	ands	r3, r2
 8002b18:	d0ef      	beq.n	8002afa <HAL_RCC_OscConfig+0xe6>
 8002b1a:	e015      	b.n	8002b48 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1c:	f7fe fe98 	bl	8001850 <HAL_GetTick>
 8002b20:	0003      	movs	r3, r0
 8002b22:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b26:	f7fe fe93 	bl	8001850 <HAL_GetTick>
 8002b2a:	0002      	movs	r2, r0
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b64      	cmp	r3, #100	; 0x64
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e336      	b.n	80031a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b38:	4b85      	ldr	r3, [pc, #532]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	2380      	movs	r3, #128	; 0x80
 8002b3e:	029b      	lsls	r3, r3, #10
 8002b40:	4013      	ands	r3, r2
 8002b42:	d1f0      	bne.n	8002b26 <HAL_RCC_OscConfig+0x112>
 8002b44:	e000      	b.n	8002b48 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b46:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d100      	bne.n	8002b54 <HAL_RCC_OscConfig+0x140>
 8002b52:	e099      	b.n	8002c88 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d009      	beq.n	8002b76 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002b62:	4b7b      	ldr	r3, [pc, #492]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	4b7a      	ldr	r3, [pc, #488]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002b68:	2120      	movs	r1, #32
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	2220      	movs	r2, #32
 8002b72:	4393      	bics	r3, r2
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d005      	beq.n	8002b88 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	2b0c      	cmp	r3, #12
 8002b80:	d13e      	bne.n	8002c00 <HAL_RCC_OscConfig+0x1ec>
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d13b      	bne.n	8002c00 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002b88:	4b71      	ldr	r3, [pc, #452]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2204      	movs	r2, #4
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d004      	beq.n	8002b9c <HAL_RCC_OscConfig+0x188>
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e304      	b.n	80031a6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9c:	4b6c      	ldr	r3, [pc, #432]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	4a6e      	ldr	r2, [pc, #440]	; (8002d5c <HAL_RCC_OscConfig+0x348>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	0019      	movs	r1, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	021a      	lsls	r2, r3, #8
 8002bac:	4b68      	ldr	r3, [pc, #416]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002bb2:	4b67      	ldr	r3, [pc, #412]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2209      	movs	r2, #9
 8002bb8:	4393      	bics	r3, r2
 8002bba:	0019      	movs	r1, r3
 8002bbc:	4b64      	ldr	r3, [pc, #400]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bc4:	f000 fc42 	bl	800344c <HAL_RCC_GetSysClockFreq>
 8002bc8:	0001      	movs	r1, r0
 8002bca:	4b61      	ldr	r3, [pc, #388]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	091b      	lsrs	r3, r3, #4
 8002bd0:	220f      	movs	r2, #15
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	4a62      	ldr	r2, [pc, #392]	; (8002d60 <HAL_RCC_OscConfig+0x34c>)
 8002bd6:	5cd3      	ldrb	r3, [r2, r3]
 8002bd8:	000a      	movs	r2, r1
 8002bda:	40da      	lsrs	r2, r3
 8002bdc:	4b61      	ldr	r3, [pc, #388]	; (8002d64 <HAL_RCC_OscConfig+0x350>)
 8002bde:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002be0:	4b61      	ldr	r3, [pc, #388]	; (8002d68 <HAL_RCC_OscConfig+0x354>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2513      	movs	r5, #19
 8002be6:	197c      	adds	r4, r7, r5
 8002be8:	0018      	movs	r0, r3
 8002bea:	f7fe fdeb 	bl	80017c4 <HAL_InitTick>
 8002bee:	0003      	movs	r3, r0
 8002bf0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002bf2:	197b      	adds	r3, r7, r5
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d046      	beq.n	8002c88 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002bfa:	197b      	adds	r3, r7, r5
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	e2d2      	b.n	80031a6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d027      	beq.n	8002c56 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002c06:	4b52      	ldr	r3, [pc, #328]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2209      	movs	r2, #9
 8002c0c:	4393      	bics	r3, r2
 8002c0e:	0019      	movs	r1, r3
 8002c10:	4b4f      	ldr	r3, [pc, #316]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c14:	430a      	orrs	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c18:	f7fe fe1a 	bl	8001850 <HAL_GetTick>
 8002c1c:	0003      	movs	r3, r0
 8002c1e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c22:	f7fe fe15 	bl	8001850 <HAL_GetTick>
 8002c26:	0002      	movs	r2, r0
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e2b8      	b.n	80031a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c34:	4b46      	ldr	r3, [pc, #280]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2204      	movs	r2, #4
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d0f1      	beq.n	8002c22 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3e:	4b44      	ldr	r3, [pc, #272]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	4a46      	ldr	r2, [pc, #280]	; (8002d5c <HAL_RCC_OscConfig+0x348>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	0019      	movs	r1, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	021a      	lsls	r2, r3, #8
 8002c4e:	4b40      	ldr	r3, [pc, #256]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002c50:	430a      	orrs	r2, r1
 8002c52:	605a      	str	r2, [r3, #4]
 8002c54:	e018      	b.n	8002c88 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c56:	4b3e      	ldr	r3, [pc, #248]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	4b3d      	ldr	r3, [pc, #244]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	438a      	bics	r2, r1
 8002c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c62:	f7fe fdf5 	bl	8001850 <HAL_GetTick>
 8002c66:	0003      	movs	r3, r0
 8002c68:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c6c:	f7fe fdf0 	bl	8001850 <HAL_GetTick>
 8002c70:	0002      	movs	r2, r0
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e293      	b.n	80031a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c7e:	4b34      	ldr	r3, [pc, #208]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2204      	movs	r2, #4
 8002c84:	4013      	ands	r3, r2
 8002c86:	d1f1      	bne.n	8002c6c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2210      	movs	r2, #16
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d100      	bne.n	8002c94 <HAL_RCC_OscConfig+0x280>
 8002c92:	e0a2      	b.n	8002dda <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d140      	bne.n	8002d1c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c9a:	4b2d      	ldr	r3, [pc, #180]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	2380      	movs	r3, #128	; 0x80
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d005      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x29e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e279      	b.n	80031a6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cb2:	4b27      	ldr	r3, [pc, #156]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	4a2d      	ldr	r2, [pc, #180]	; (8002d6c <HAL_RCC_OscConfig+0x358>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	0019      	movs	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cc0:	4b23      	ldr	r3, [pc, #140]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cc6:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	021b      	lsls	r3, r3, #8
 8002ccc:	0a19      	lsrs	r1, r3, #8
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	061a      	lsls	r2, r3, #24
 8002cd4:	4b1e      	ldr	r3, [pc, #120]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	0b5b      	lsrs	r3, r3, #13
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	2280      	movs	r2, #128	; 0x80
 8002ce4:	0212      	lsls	r2, r2, #8
 8002ce6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002ce8:	4b19      	ldr	r3, [pc, #100]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	091b      	lsrs	r3, r3, #4
 8002cee:	210f      	movs	r1, #15
 8002cf0:	400b      	ands	r3, r1
 8002cf2:	491b      	ldr	r1, [pc, #108]	; (8002d60 <HAL_RCC_OscConfig+0x34c>)
 8002cf4:	5ccb      	ldrb	r3, [r1, r3]
 8002cf6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002cf8:	4b1a      	ldr	r3, [pc, #104]	; (8002d64 <HAL_RCC_OscConfig+0x350>)
 8002cfa:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002cfc:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <HAL_RCC_OscConfig+0x354>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2513      	movs	r5, #19
 8002d02:	197c      	adds	r4, r7, r5
 8002d04:	0018      	movs	r0, r3
 8002d06:	f7fe fd5d 	bl	80017c4 <HAL_InitTick>
 8002d0a:	0003      	movs	r3, r0
 8002d0c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002d0e:	197b      	adds	r3, r7, r5
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d061      	beq.n	8002dda <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002d16:	197b      	adds	r3, r7, r5
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	e244      	b.n	80031a6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69db      	ldr	r3, [r3, #28]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d040      	beq.n	8002da6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d24:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <HAL_RCC_OscConfig+0x33c>)
 8002d2a:	2180      	movs	r1, #128	; 0x80
 8002d2c:	0049      	lsls	r1, r1, #1
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d32:	f7fe fd8d 	bl	8001850 <HAL_GetTick>
 8002d36:	0003      	movs	r3, r0
 8002d38:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d3a:	e019      	b.n	8002d70 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d3c:	f7fe fd88 	bl	8001850 <HAL_GetTick>
 8002d40:	0002      	movs	r2, r0
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d912      	bls.n	8002d70 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e22b      	b.n	80031a6 <HAL_RCC_OscConfig+0x792>
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	40021000 	.word	0x40021000
 8002d54:	fffeffff 	.word	0xfffeffff
 8002d58:	fffbffff 	.word	0xfffbffff
 8002d5c:	ffffe0ff 	.word	0xffffe0ff
 8002d60:	08005c3c 	.word	0x08005c3c
 8002d64:	200000ec 	.word	0x200000ec
 8002d68:	200000f0 	.word	0x200000f0
 8002d6c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d70:	4bca      	ldr	r3, [pc, #808]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	2380      	movs	r3, #128	; 0x80
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4013      	ands	r3, r2
 8002d7a:	d0df      	beq.n	8002d3c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d7c:	4bc7      	ldr	r3, [pc, #796]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	4ac7      	ldr	r2, [pc, #796]	; (80030a0 <HAL_RCC_OscConfig+0x68c>)
 8002d82:	4013      	ands	r3, r2
 8002d84:	0019      	movs	r1, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d8a:	4bc4      	ldr	r3, [pc, #784]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d90:	4bc2      	ldr	r3, [pc, #776]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	021b      	lsls	r3, r3, #8
 8002d96:	0a19      	lsrs	r1, r3, #8
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	061a      	lsls	r2, r3, #24
 8002d9e:	4bbf      	ldr	r3, [pc, #764]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002da0:	430a      	orrs	r2, r1
 8002da2:	605a      	str	r2, [r3, #4]
 8002da4:	e019      	b.n	8002dda <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002da6:	4bbd      	ldr	r3, [pc, #756]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	4bbc      	ldr	r3, [pc, #752]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002dac:	49bd      	ldr	r1, [pc, #756]	; (80030a4 <HAL_RCC_OscConfig+0x690>)
 8002dae:	400a      	ands	r2, r1
 8002db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db2:	f7fe fd4d 	bl	8001850 <HAL_GetTick>
 8002db6:	0003      	movs	r3, r0
 8002db8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dbc:	f7fe fd48 	bl	8001850 <HAL_GetTick>
 8002dc0:	0002      	movs	r2, r0
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e1eb      	b.n	80031a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002dce:	4bb3      	ldr	r3, [pc, #716]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	2380      	movs	r3, #128	; 0x80
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2208      	movs	r2, #8
 8002de0:	4013      	ands	r3, r2
 8002de2:	d036      	beq.n	8002e52 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d019      	beq.n	8002e20 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dec:	4bab      	ldr	r3, [pc, #684]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002dee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002df0:	4baa      	ldr	r3, [pc, #680]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002df2:	2101      	movs	r1, #1
 8002df4:	430a      	orrs	r2, r1
 8002df6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df8:	f7fe fd2a 	bl	8001850 <HAL_GetTick>
 8002dfc:	0003      	movs	r3, r0
 8002dfe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e02:	f7fe fd25 	bl	8001850 <HAL_GetTick>
 8002e06:	0002      	movs	r2, r0
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e1c8      	b.n	80031a6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e14:	4ba1      	ldr	r3, [pc, #644]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e18:	2202      	movs	r2, #2
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d0f1      	beq.n	8002e02 <HAL_RCC_OscConfig+0x3ee>
 8002e1e:	e018      	b.n	8002e52 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e20:	4b9e      	ldr	r3, [pc, #632]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002e22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e24:	4b9d      	ldr	r3, [pc, #628]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002e26:	2101      	movs	r1, #1
 8002e28:	438a      	bics	r2, r1
 8002e2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2c:	f7fe fd10 	bl	8001850 <HAL_GetTick>
 8002e30:	0003      	movs	r3, r0
 8002e32:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e36:	f7fe fd0b 	bl	8001850 <HAL_GetTick>
 8002e3a:	0002      	movs	r2, r0
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e1ae      	b.n	80031a6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e48:	4b94      	ldr	r3, [pc, #592]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d1f1      	bne.n	8002e36 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2204      	movs	r2, #4
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d100      	bne.n	8002e5e <HAL_RCC_OscConfig+0x44a>
 8002e5c:	e0ae      	b.n	8002fbc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e5e:	2023      	movs	r0, #35	; 0x23
 8002e60:	183b      	adds	r3, r7, r0
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e66:	4b8d      	ldr	r3, [pc, #564]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e6a:	2380      	movs	r3, #128	; 0x80
 8002e6c:	055b      	lsls	r3, r3, #21
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d109      	bne.n	8002e86 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e72:	4b8a      	ldr	r3, [pc, #552]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002e74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e76:	4b89      	ldr	r3, [pc, #548]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002e78:	2180      	movs	r1, #128	; 0x80
 8002e7a:	0549      	lsls	r1, r1, #21
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002e80:	183b      	adds	r3, r7, r0
 8002e82:	2201      	movs	r2, #1
 8002e84:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e86:	4b88      	ldr	r3, [pc, #544]	; (80030a8 <HAL_RCC_OscConfig+0x694>)
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	2380      	movs	r3, #128	; 0x80
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d11a      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e92:	4b85      	ldr	r3, [pc, #532]	; (80030a8 <HAL_RCC_OscConfig+0x694>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	4b84      	ldr	r3, [pc, #528]	; (80030a8 <HAL_RCC_OscConfig+0x694>)
 8002e98:	2180      	movs	r1, #128	; 0x80
 8002e9a:	0049      	lsls	r1, r1, #1
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ea0:	f7fe fcd6 	bl	8001850 <HAL_GetTick>
 8002ea4:	0003      	movs	r3, r0
 8002ea6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eaa:	f7fe fcd1 	bl	8001850 <HAL_GetTick>
 8002eae:	0002      	movs	r2, r0
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b64      	cmp	r3, #100	; 0x64
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e174      	b.n	80031a6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ebc:	4b7a      	ldr	r3, [pc, #488]	; (80030a8 <HAL_RCC_OscConfig+0x694>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	2380      	movs	r3, #128	; 0x80
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d0f0      	beq.n	8002eaa <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	2380      	movs	r3, #128	; 0x80
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d107      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x4d0>
 8002ed4:	4b71      	ldr	r3, [pc, #452]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002ed6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ed8:	4b70      	ldr	r3, [pc, #448]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002eda:	2180      	movs	r1, #128	; 0x80
 8002edc:	0049      	lsls	r1, r1, #1
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	651a      	str	r2, [r3, #80]	; 0x50
 8002ee2:	e031      	b.n	8002f48 <HAL_RCC_OscConfig+0x534>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10c      	bne.n	8002f06 <HAL_RCC_OscConfig+0x4f2>
 8002eec:	4b6b      	ldr	r3, [pc, #428]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002eee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ef0:	4b6a      	ldr	r3, [pc, #424]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002ef2:	496c      	ldr	r1, [pc, #432]	; (80030a4 <HAL_RCC_OscConfig+0x690>)
 8002ef4:	400a      	ands	r2, r1
 8002ef6:	651a      	str	r2, [r3, #80]	; 0x50
 8002ef8:	4b68      	ldr	r3, [pc, #416]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002efa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002efc:	4b67      	ldr	r3, [pc, #412]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002efe:	496b      	ldr	r1, [pc, #428]	; (80030ac <HAL_RCC_OscConfig+0x698>)
 8002f00:	400a      	ands	r2, r1
 8002f02:	651a      	str	r2, [r3, #80]	; 0x50
 8002f04:	e020      	b.n	8002f48 <HAL_RCC_OscConfig+0x534>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	23a0      	movs	r3, #160	; 0xa0
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d10e      	bne.n	8002f30 <HAL_RCC_OscConfig+0x51c>
 8002f12:	4b62      	ldr	r3, [pc, #392]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002f14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f16:	4b61      	ldr	r3, [pc, #388]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002f18:	2180      	movs	r1, #128	; 0x80
 8002f1a:	00c9      	lsls	r1, r1, #3
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	651a      	str	r2, [r3, #80]	; 0x50
 8002f20:	4b5e      	ldr	r3, [pc, #376]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002f22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f24:	4b5d      	ldr	r3, [pc, #372]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002f26:	2180      	movs	r1, #128	; 0x80
 8002f28:	0049      	lsls	r1, r1, #1
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	651a      	str	r2, [r3, #80]	; 0x50
 8002f2e:	e00b      	b.n	8002f48 <HAL_RCC_OscConfig+0x534>
 8002f30:	4b5a      	ldr	r3, [pc, #360]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002f32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f34:	4b59      	ldr	r3, [pc, #356]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002f36:	495b      	ldr	r1, [pc, #364]	; (80030a4 <HAL_RCC_OscConfig+0x690>)
 8002f38:	400a      	ands	r2, r1
 8002f3a:	651a      	str	r2, [r3, #80]	; 0x50
 8002f3c:	4b57      	ldr	r3, [pc, #348]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002f3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f40:	4b56      	ldr	r3, [pc, #344]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002f42:	495a      	ldr	r1, [pc, #360]	; (80030ac <HAL_RCC_OscConfig+0x698>)
 8002f44:	400a      	ands	r2, r1
 8002f46:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d015      	beq.n	8002f7c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f50:	f7fe fc7e 	bl	8001850 <HAL_GetTick>
 8002f54:	0003      	movs	r3, r0
 8002f56:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f58:	e009      	b.n	8002f6e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f5a:	f7fe fc79 	bl	8001850 <HAL_GetTick>
 8002f5e:	0002      	movs	r2, r0
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	4a52      	ldr	r2, [pc, #328]	; (80030b0 <HAL_RCC_OscConfig+0x69c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e11b      	b.n	80031a6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f6e:	4b4b      	ldr	r3, [pc, #300]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002f70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4013      	ands	r3, r2
 8002f78:	d0ef      	beq.n	8002f5a <HAL_RCC_OscConfig+0x546>
 8002f7a:	e014      	b.n	8002fa6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f7c:	f7fe fc68 	bl	8001850 <HAL_GetTick>
 8002f80:	0003      	movs	r3, r0
 8002f82:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f84:	e009      	b.n	8002f9a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f86:	f7fe fc63 	bl	8001850 <HAL_GetTick>
 8002f8a:	0002      	movs	r2, r0
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	4a47      	ldr	r2, [pc, #284]	; (80030b0 <HAL_RCC_OscConfig+0x69c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e105      	b.n	80031a6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f9a:	4b40      	ldr	r3, [pc, #256]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002f9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f9e:	2380      	movs	r3, #128	; 0x80
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d1ef      	bne.n	8002f86 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fa6:	2323      	movs	r3, #35	; 0x23
 8002fa8:	18fb      	adds	r3, r7, r3
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d105      	bne.n	8002fbc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb0:	4b3a      	ldr	r3, [pc, #232]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fb4:	4b39      	ldr	r3, [pc, #228]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002fb6:	493f      	ldr	r1, [pc, #252]	; (80030b4 <HAL_RCC_OscConfig+0x6a0>)
 8002fb8:	400a      	ands	r2, r1
 8002fba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d049      	beq.n	800305a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d026      	beq.n	800301c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002fce:	4b33      	ldr	r3, [pc, #204]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	4b32      	ldr	r3, [pc, #200]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	609a      	str	r2, [r3, #8]
 8002fda:	4b30      	ldr	r3, [pc, #192]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fde:	4b2f      	ldr	r3, [pc, #188]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	635a      	str	r2, [r3, #52]	; 0x34
 8002fe6:	4b34      	ldr	r3, [pc, #208]	; (80030b8 <HAL_RCC_OscConfig+0x6a4>)
 8002fe8:	6a1a      	ldr	r2, [r3, #32]
 8002fea:	4b33      	ldr	r3, [pc, #204]	; (80030b8 <HAL_RCC_OscConfig+0x6a4>)
 8002fec:	2180      	movs	r1, #128	; 0x80
 8002fee:	0189      	lsls	r1, r1, #6
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff4:	f7fe fc2c 	bl	8001850 <HAL_GetTick>
 8002ff8:	0003      	movs	r3, r0
 8002ffa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ffe:	f7fe fc27 	bl	8001850 <HAL_GetTick>
 8003002:	0002      	movs	r2, r0
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e0ca      	b.n	80031a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003010:	4b22      	ldr	r3, [pc, #136]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	2202      	movs	r2, #2
 8003016:	4013      	ands	r3, r2
 8003018:	d0f1      	beq.n	8002ffe <HAL_RCC_OscConfig+0x5ea>
 800301a:	e01e      	b.n	800305a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800301c:	4b1f      	ldr	r3, [pc, #124]	; (800309c <HAL_RCC_OscConfig+0x688>)
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	4b1e      	ldr	r3, [pc, #120]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8003022:	2101      	movs	r1, #1
 8003024:	438a      	bics	r2, r1
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	4b23      	ldr	r3, [pc, #140]	; (80030b8 <HAL_RCC_OscConfig+0x6a4>)
 800302a:	6a1a      	ldr	r2, [r3, #32]
 800302c:	4b22      	ldr	r3, [pc, #136]	; (80030b8 <HAL_RCC_OscConfig+0x6a4>)
 800302e:	4923      	ldr	r1, [pc, #140]	; (80030bc <HAL_RCC_OscConfig+0x6a8>)
 8003030:	400a      	ands	r2, r1
 8003032:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003034:	f7fe fc0c 	bl	8001850 <HAL_GetTick>
 8003038:	0003      	movs	r3, r0
 800303a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800303e:	f7fe fc07 	bl	8001850 <HAL_GetTick>
 8003042:	0002      	movs	r2, r0
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e0aa      	b.n	80031a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003050:	4b12      	ldr	r3, [pc, #72]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2202      	movs	r2, #2
 8003056:	4013      	ands	r3, r2
 8003058:	d1f1      	bne.n	800303e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305e:	2b00      	cmp	r3, #0
 8003060:	d100      	bne.n	8003064 <HAL_RCC_OscConfig+0x650>
 8003062:	e09f      	b.n	80031a4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	2b0c      	cmp	r3, #12
 8003068:	d100      	bne.n	800306c <HAL_RCC_OscConfig+0x658>
 800306a:	e078      	b.n	800315e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003070:	2b02      	cmp	r3, #2
 8003072:	d159      	bne.n	8003128 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003074:	4b09      	ldr	r3, [pc, #36]	; (800309c <HAL_RCC_OscConfig+0x688>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	4b08      	ldr	r3, [pc, #32]	; (800309c <HAL_RCC_OscConfig+0x688>)
 800307a:	4911      	ldr	r1, [pc, #68]	; (80030c0 <HAL_RCC_OscConfig+0x6ac>)
 800307c:	400a      	ands	r2, r1
 800307e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003080:	f7fe fbe6 	bl	8001850 <HAL_GetTick>
 8003084:	0003      	movs	r3, r0
 8003086:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003088:	e01c      	b.n	80030c4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800308a:	f7fe fbe1 	bl	8001850 <HAL_GetTick>
 800308e:	0002      	movs	r2, r0
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d915      	bls.n	80030c4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e084      	b.n	80031a6 <HAL_RCC_OscConfig+0x792>
 800309c:	40021000 	.word	0x40021000
 80030a0:	ffff1fff 	.word	0xffff1fff
 80030a4:	fffffeff 	.word	0xfffffeff
 80030a8:	40007000 	.word	0x40007000
 80030ac:	fffffbff 	.word	0xfffffbff
 80030b0:	00001388 	.word	0x00001388
 80030b4:	efffffff 	.word	0xefffffff
 80030b8:	40010000 	.word	0x40010000
 80030bc:	ffffdfff 	.word	0xffffdfff
 80030c0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80030c4:	4b3a      	ldr	r3, [pc, #232]	; (80031b0 <HAL_RCC_OscConfig+0x79c>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	2380      	movs	r3, #128	; 0x80
 80030ca:	049b      	lsls	r3, r3, #18
 80030cc:	4013      	ands	r3, r2
 80030ce:	d1dc      	bne.n	800308a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030d0:	4b37      	ldr	r3, [pc, #220]	; (80031b0 <HAL_RCC_OscConfig+0x79c>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	4a37      	ldr	r2, [pc, #220]	; (80031b4 <HAL_RCC_OscConfig+0x7a0>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	0019      	movs	r1, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e8:	431a      	orrs	r2, r3
 80030ea:	4b31      	ldr	r3, [pc, #196]	; (80031b0 <HAL_RCC_OscConfig+0x79c>)
 80030ec:	430a      	orrs	r2, r1
 80030ee:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030f0:	4b2f      	ldr	r3, [pc, #188]	; (80031b0 <HAL_RCC_OscConfig+0x79c>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b2e      	ldr	r3, [pc, #184]	; (80031b0 <HAL_RCC_OscConfig+0x79c>)
 80030f6:	2180      	movs	r1, #128	; 0x80
 80030f8:	0449      	lsls	r1, r1, #17
 80030fa:	430a      	orrs	r2, r1
 80030fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fe:	f7fe fba7 	bl	8001850 <HAL_GetTick>
 8003102:	0003      	movs	r3, r0
 8003104:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003108:	f7fe fba2 	bl	8001850 <HAL_GetTick>
 800310c:	0002      	movs	r2, r0
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e045      	b.n	80031a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800311a:	4b25      	ldr	r3, [pc, #148]	; (80031b0 <HAL_RCC_OscConfig+0x79c>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	2380      	movs	r3, #128	; 0x80
 8003120:	049b      	lsls	r3, r3, #18
 8003122:	4013      	ands	r3, r2
 8003124:	d0f0      	beq.n	8003108 <HAL_RCC_OscConfig+0x6f4>
 8003126:	e03d      	b.n	80031a4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003128:	4b21      	ldr	r3, [pc, #132]	; (80031b0 <HAL_RCC_OscConfig+0x79c>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	4b20      	ldr	r3, [pc, #128]	; (80031b0 <HAL_RCC_OscConfig+0x79c>)
 800312e:	4922      	ldr	r1, [pc, #136]	; (80031b8 <HAL_RCC_OscConfig+0x7a4>)
 8003130:	400a      	ands	r2, r1
 8003132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003134:	f7fe fb8c 	bl	8001850 <HAL_GetTick>
 8003138:	0003      	movs	r3, r0
 800313a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800313e:	f7fe fb87 	bl	8001850 <HAL_GetTick>
 8003142:	0002      	movs	r2, r0
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e02a      	b.n	80031a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003150:	4b17      	ldr	r3, [pc, #92]	; (80031b0 <HAL_RCC_OscConfig+0x79c>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	049b      	lsls	r3, r3, #18
 8003158:	4013      	ands	r3, r2
 800315a:	d1f0      	bne.n	800313e <HAL_RCC_OscConfig+0x72a>
 800315c:	e022      	b.n	80031a4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e01d      	b.n	80031a6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800316a:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <HAL_RCC_OscConfig+0x79c>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	2380      	movs	r3, #128	; 0x80
 8003174:	025b      	lsls	r3, r3, #9
 8003176:	401a      	ands	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317c:	429a      	cmp	r2, r3
 800317e:	d10f      	bne.n	80031a0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	23f0      	movs	r3, #240	; 0xf0
 8003184:	039b      	lsls	r3, r3, #14
 8003186:	401a      	ands	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800318c:	429a      	cmp	r2, r3
 800318e:	d107      	bne.n	80031a0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	23c0      	movs	r3, #192	; 0xc0
 8003194:	041b      	lsls	r3, r3, #16
 8003196:	401a      	ands	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800319c:	429a      	cmp	r2, r3
 800319e:	d001      	beq.n	80031a4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e000      	b.n	80031a6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	0018      	movs	r0, r3
 80031a8:	46bd      	mov	sp, r7
 80031aa:	b00a      	add	sp, #40	; 0x28
 80031ac:	bdb0      	pop	{r4, r5, r7, pc}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	40021000 	.word	0x40021000
 80031b4:	ff02ffff 	.word	0xff02ffff
 80031b8:	feffffff 	.word	0xfeffffff

080031bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031bc:	b5b0      	push	{r4, r5, r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e128      	b.n	8003422 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031d0:	4b96      	ldr	r3, [pc, #600]	; (800342c <HAL_RCC_ClockConfig+0x270>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2201      	movs	r2, #1
 80031d6:	4013      	ands	r3, r2
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d91e      	bls.n	800321c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031de:	4b93      	ldr	r3, [pc, #588]	; (800342c <HAL_RCC_ClockConfig+0x270>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2201      	movs	r2, #1
 80031e4:	4393      	bics	r3, r2
 80031e6:	0019      	movs	r1, r3
 80031e8:	4b90      	ldr	r3, [pc, #576]	; (800342c <HAL_RCC_ClockConfig+0x270>)
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031f0:	f7fe fb2e 	bl	8001850 <HAL_GetTick>
 80031f4:	0003      	movs	r3, r0
 80031f6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031f8:	e009      	b.n	800320e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031fa:	f7fe fb29 	bl	8001850 <HAL_GetTick>
 80031fe:	0002      	movs	r2, r0
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	4a8a      	ldr	r2, [pc, #552]	; (8003430 <HAL_RCC_ClockConfig+0x274>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d901      	bls.n	800320e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e109      	b.n	8003422 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800320e:	4b87      	ldr	r3, [pc, #540]	; (800342c <HAL_RCC_ClockConfig+0x270>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2201      	movs	r2, #1
 8003214:	4013      	ands	r3, r2
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d1ee      	bne.n	80031fa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2202      	movs	r2, #2
 8003222:	4013      	ands	r3, r2
 8003224:	d009      	beq.n	800323a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003226:	4b83      	ldr	r3, [pc, #524]	; (8003434 <HAL_RCC_ClockConfig+0x278>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	22f0      	movs	r2, #240	; 0xf0
 800322c:	4393      	bics	r3, r2
 800322e:	0019      	movs	r1, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	4b7f      	ldr	r3, [pc, #508]	; (8003434 <HAL_RCC_ClockConfig+0x278>)
 8003236:	430a      	orrs	r2, r1
 8003238:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2201      	movs	r2, #1
 8003240:	4013      	ands	r3, r2
 8003242:	d100      	bne.n	8003246 <HAL_RCC_ClockConfig+0x8a>
 8003244:	e089      	b.n	800335a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d107      	bne.n	800325e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800324e:	4b79      	ldr	r3, [pc, #484]	; (8003434 <HAL_RCC_ClockConfig+0x278>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	2380      	movs	r3, #128	; 0x80
 8003254:	029b      	lsls	r3, r3, #10
 8003256:	4013      	ands	r3, r2
 8003258:	d120      	bne.n	800329c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e0e1      	b.n	8003422 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b03      	cmp	r3, #3
 8003264:	d107      	bne.n	8003276 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003266:	4b73      	ldr	r3, [pc, #460]	; (8003434 <HAL_RCC_ClockConfig+0x278>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	049b      	lsls	r3, r3, #18
 800326e:	4013      	ands	r3, r2
 8003270:	d114      	bne.n	800329c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e0d5      	b.n	8003422 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d106      	bne.n	800328c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800327e:	4b6d      	ldr	r3, [pc, #436]	; (8003434 <HAL_RCC_ClockConfig+0x278>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2204      	movs	r2, #4
 8003284:	4013      	ands	r3, r2
 8003286:	d109      	bne.n	800329c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0ca      	b.n	8003422 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800328c:	4b69      	ldr	r3, [pc, #420]	; (8003434 <HAL_RCC_ClockConfig+0x278>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	2380      	movs	r3, #128	; 0x80
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4013      	ands	r3, r2
 8003296:	d101      	bne.n	800329c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0c2      	b.n	8003422 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800329c:	4b65      	ldr	r3, [pc, #404]	; (8003434 <HAL_RCC_ClockConfig+0x278>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	2203      	movs	r2, #3
 80032a2:	4393      	bics	r3, r2
 80032a4:	0019      	movs	r1, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	4b62      	ldr	r3, [pc, #392]	; (8003434 <HAL_RCC_ClockConfig+0x278>)
 80032ac:	430a      	orrs	r2, r1
 80032ae:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032b0:	f7fe face 	bl	8001850 <HAL_GetTick>
 80032b4:	0003      	movs	r3, r0
 80032b6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d111      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032c0:	e009      	b.n	80032d6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c2:	f7fe fac5 	bl	8001850 <HAL_GetTick>
 80032c6:	0002      	movs	r2, r0
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	4a58      	ldr	r2, [pc, #352]	; (8003430 <HAL_RCC_ClockConfig+0x274>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e0a5      	b.n	8003422 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032d6:	4b57      	ldr	r3, [pc, #348]	; (8003434 <HAL_RCC_ClockConfig+0x278>)
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	220c      	movs	r2, #12
 80032dc:	4013      	ands	r3, r2
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d1ef      	bne.n	80032c2 <HAL_RCC_ClockConfig+0x106>
 80032e2:	e03a      	b.n	800335a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b03      	cmp	r3, #3
 80032ea:	d111      	bne.n	8003310 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032ec:	e009      	b.n	8003302 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ee:	f7fe faaf 	bl	8001850 <HAL_GetTick>
 80032f2:	0002      	movs	r2, r0
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	4a4d      	ldr	r2, [pc, #308]	; (8003430 <HAL_RCC_ClockConfig+0x274>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e08f      	b.n	8003422 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003302:	4b4c      	ldr	r3, [pc, #304]	; (8003434 <HAL_RCC_ClockConfig+0x278>)
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	220c      	movs	r2, #12
 8003308:	4013      	ands	r3, r2
 800330a:	2b0c      	cmp	r3, #12
 800330c:	d1ef      	bne.n	80032ee <HAL_RCC_ClockConfig+0x132>
 800330e:	e024      	b.n	800335a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d11b      	bne.n	8003350 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003318:	e009      	b.n	800332e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800331a:	f7fe fa99 	bl	8001850 <HAL_GetTick>
 800331e:	0002      	movs	r2, r0
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	4a42      	ldr	r2, [pc, #264]	; (8003430 <HAL_RCC_ClockConfig+0x274>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d901      	bls.n	800332e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e079      	b.n	8003422 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800332e:	4b41      	ldr	r3, [pc, #260]	; (8003434 <HAL_RCC_ClockConfig+0x278>)
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	220c      	movs	r2, #12
 8003334:	4013      	ands	r3, r2
 8003336:	2b04      	cmp	r3, #4
 8003338:	d1ef      	bne.n	800331a <HAL_RCC_ClockConfig+0x15e>
 800333a:	e00e      	b.n	800335a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800333c:	f7fe fa88 	bl	8001850 <HAL_GetTick>
 8003340:	0002      	movs	r2, r0
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	4a3a      	ldr	r2, [pc, #232]	; (8003430 <HAL_RCC_ClockConfig+0x274>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e068      	b.n	8003422 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003350:	4b38      	ldr	r3, [pc, #224]	; (8003434 <HAL_RCC_ClockConfig+0x278>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	220c      	movs	r2, #12
 8003356:	4013      	ands	r3, r2
 8003358:	d1f0      	bne.n	800333c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800335a:	4b34      	ldr	r3, [pc, #208]	; (800342c <HAL_RCC_ClockConfig+0x270>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2201      	movs	r2, #1
 8003360:	4013      	ands	r3, r2
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d21e      	bcs.n	80033a6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003368:	4b30      	ldr	r3, [pc, #192]	; (800342c <HAL_RCC_ClockConfig+0x270>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2201      	movs	r2, #1
 800336e:	4393      	bics	r3, r2
 8003370:	0019      	movs	r1, r3
 8003372:	4b2e      	ldr	r3, [pc, #184]	; (800342c <HAL_RCC_ClockConfig+0x270>)
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800337a:	f7fe fa69 	bl	8001850 <HAL_GetTick>
 800337e:	0003      	movs	r3, r0
 8003380:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003382:	e009      	b.n	8003398 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003384:	f7fe fa64 	bl	8001850 <HAL_GetTick>
 8003388:	0002      	movs	r2, r0
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	4a28      	ldr	r2, [pc, #160]	; (8003430 <HAL_RCC_ClockConfig+0x274>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e044      	b.n	8003422 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003398:	4b24      	ldr	r3, [pc, #144]	; (800342c <HAL_RCC_ClockConfig+0x270>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2201      	movs	r2, #1
 800339e:	4013      	ands	r3, r2
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d1ee      	bne.n	8003384 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2204      	movs	r2, #4
 80033ac:	4013      	ands	r3, r2
 80033ae:	d009      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b0:	4b20      	ldr	r3, [pc, #128]	; (8003434 <HAL_RCC_ClockConfig+0x278>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4a20      	ldr	r2, [pc, #128]	; (8003438 <HAL_RCC_ClockConfig+0x27c>)
 80033b6:	4013      	ands	r3, r2
 80033b8:	0019      	movs	r1, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	4b1d      	ldr	r3, [pc, #116]	; (8003434 <HAL_RCC_ClockConfig+0x278>)
 80033c0:	430a      	orrs	r2, r1
 80033c2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2208      	movs	r2, #8
 80033ca:	4013      	ands	r3, r2
 80033cc:	d00a      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033ce:	4b19      	ldr	r3, [pc, #100]	; (8003434 <HAL_RCC_ClockConfig+0x278>)
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	4a1a      	ldr	r2, [pc, #104]	; (800343c <HAL_RCC_ClockConfig+0x280>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	0019      	movs	r1, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	00da      	lsls	r2, r3, #3
 80033de:	4b15      	ldr	r3, [pc, #84]	; (8003434 <HAL_RCC_ClockConfig+0x278>)
 80033e0:	430a      	orrs	r2, r1
 80033e2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033e4:	f000 f832 	bl	800344c <HAL_RCC_GetSysClockFreq>
 80033e8:	0001      	movs	r1, r0
 80033ea:	4b12      	ldr	r3, [pc, #72]	; (8003434 <HAL_RCC_ClockConfig+0x278>)
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	091b      	lsrs	r3, r3, #4
 80033f0:	220f      	movs	r2, #15
 80033f2:	4013      	ands	r3, r2
 80033f4:	4a12      	ldr	r2, [pc, #72]	; (8003440 <HAL_RCC_ClockConfig+0x284>)
 80033f6:	5cd3      	ldrb	r3, [r2, r3]
 80033f8:	000a      	movs	r2, r1
 80033fa:	40da      	lsrs	r2, r3
 80033fc:	4b11      	ldr	r3, [pc, #68]	; (8003444 <HAL_RCC_ClockConfig+0x288>)
 80033fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003400:	4b11      	ldr	r3, [pc, #68]	; (8003448 <HAL_RCC_ClockConfig+0x28c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	250b      	movs	r5, #11
 8003406:	197c      	adds	r4, r7, r5
 8003408:	0018      	movs	r0, r3
 800340a:	f7fe f9db 	bl	80017c4 <HAL_InitTick>
 800340e:	0003      	movs	r3, r0
 8003410:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003412:	197b      	adds	r3, r7, r5
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d002      	beq.n	8003420 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800341a:	197b      	adds	r3, r7, r5
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	e000      	b.n	8003422 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	0018      	movs	r0, r3
 8003424:	46bd      	mov	sp, r7
 8003426:	b004      	add	sp, #16
 8003428:	bdb0      	pop	{r4, r5, r7, pc}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	40022000 	.word	0x40022000
 8003430:	00001388 	.word	0x00001388
 8003434:	40021000 	.word	0x40021000
 8003438:	fffff8ff 	.word	0xfffff8ff
 800343c:	ffffc7ff 	.word	0xffffc7ff
 8003440:	08005c3c 	.word	0x08005c3c
 8003444:	200000ec 	.word	0x200000ec
 8003448:	200000f0 	.word	0x200000f0

0800344c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800344c:	b5b0      	push	{r4, r5, r7, lr}
 800344e:	b08e      	sub	sp, #56	; 0x38
 8003450:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003452:	4b4c      	ldr	r3, [pc, #304]	; (8003584 <HAL_RCC_GetSysClockFreq+0x138>)
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800345a:	230c      	movs	r3, #12
 800345c:	4013      	ands	r3, r2
 800345e:	2b0c      	cmp	r3, #12
 8003460:	d014      	beq.n	800348c <HAL_RCC_GetSysClockFreq+0x40>
 8003462:	d900      	bls.n	8003466 <HAL_RCC_GetSysClockFreq+0x1a>
 8003464:	e07b      	b.n	800355e <HAL_RCC_GetSysClockFreq+0x112>
 8003466:	2b04      	cmp	r3, #4
 8003468:	d002      	beq.n	8003470 <HAL_RCC_GetSysClockFreq+0x24>
 800346a:	2b08      	cmp	r3, #8
 800346c:	d00b      	beq.n	8003486 <HAL_RCC_GetSysClockFreq+0x3a>
 800346e:	e076      	b.n	800355e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003470:	4b44      	ldr	r3, [pc, #272]	; (8003584 <HAL_RCC_GetSysClockFreq+0x138>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2210      	movs	r2, #16
 8003476:	4013      	ands	r3, r2
 8003478:	d002      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800347a:	4b43      	ldr	r3, [pc, #268]	; (8003588 <HAL_RCC_GetSysClockFreq+0x13c>)
 800347c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800347e:	e07c      	b.n	800357a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003480:	4b42      	ldr	r3, [pc, #264]	; (800358c <HAL_RCC_GetSysClockFreq+0x140>)
 8003482:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003484:	e079      	b.n	800357a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003486:	4b42      	ldr	r3, [pc, #264]	; (8003590 <HAL_RCC_GetSysClockFreq+0x144>)
 8003488:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800348a:	e076      	b.n	800357a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800348c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348e:	0c9a      	lsrs	r2, r3, #18
 8003490:	230f      	movs	r3, #15
 8003492:	401a      	ands	r2, r3
 8003494:	4b3f      	ldr	r3, [pc, #252]	; (8003594 <HAL_RCC_GetSysClockFreq+0x148>)
 8003496:	5c9b      	ldrb	r3, [r3, r2]
 8003498:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800349a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349c:	0d9a      	lsrs	r2, r3, #22
 800349e:	2303      	movs	r3, #3
 80034a0:	4013      	ands	r3, r2
 80034a2:	3301      	adds	r3, #1
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034a6:	4b37      	ldr	r3, [pc, #220]	; (8003584 <HAL_RCC_GetSysClockFreq+0x138>)
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	2380      	movs	r3, #128	; 0x80
 80034ac:	025b      	lsls	r3, r3, #9
 80034ae:	4013      	ands	r3, r2
 80034b0:	d01a      	beq.n	80034e8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80034b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	2300      	movs	r3, #0
 80034b8:	61fb      	str	r3, [r7, #28]
 80034ba:	4a35      	ldr	r2, [pc, #212]	; (8003590 <HAL_RCC_GetSysClockFreq+0x144>)
 80034bc:	2300      	movs	r3, #0
 80034be:	69b8      	ldr	r0, [r7, #24]
 80034c0:	69f9      	ldr	r1, [r7, #28]
 80034c2:	f7fc ffc9 	bl	8000458 <__aeabi_lmul>
 80034c6:	0002      	movs	r2, r0
 80034c8:	000b      	movs	r3, r1
 80034ca:	0010      	movs	r0, r2
 80034cc:	0019      	movs	r1, r3
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	2300      	movs	r3, #0
 80034d4:	617b      	str	r3, [r7, #20]
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f7fc ff9d 	bl	8000418 <__aeabi_uldivmod>
 80034de:	0002      	movs	r2, r0
 80034e0:	000b      	movs	r3, r1
 80034e2:	0013      	movs	r3, r2
 80034e4:	637b      	str	r3, [r7, #52]	; 0x34
 80034e6:	e037      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80034e8:	4b26      	ldr	r3, [pc, #152]	; (8003584 <HAL_RCC_GetSysClockFreq+0x138>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2210      	movs	r2, #16
 80034ee:	4013      	ands	r3, r2
 80034f0:	d01a      	beq.n	8003528 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80034f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	4a23      	ldr	r2, [pc, #140]	; (8003588 <HAL_RCC_GetSysClockFreq+0x13c>)
 80034fc:	2300      	movs	r3, #0
 80034fe:	68b8      	ldr	r0, [r7, #8]
 8003500:	68f9      	ldr	r1, [r7, #12]
 8003502:	f7fc ffa9 	bl	8000458 <__aeabi_lmul>
 8003506:	0002      	movs	r2, r0
 8003508:	000b      	movs	r3, r1
 800350a:	0010      	movs	r0, r2
 800350c:	0019      	movs	r1, r3
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	603b      	str	r3, [r7, #0]
 8003512:	2300      	movs	r3, #0
 8003514:	607b      	str	r3, [r7, #4]
 8003516:	683a      	ldr	r2, [r7, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f7fc ff7d 	bl	8000418 <__aeabi_uldivmod>
 800351e:	0002      	movs	r2, r0
 8003520:	000b      	movs	r3, r1
 8003522:	0013      	movs	r3, r2
 8003524:	637b      	str	r3, [r7, #52]	; 0x34
 8003526:	e017      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800352a:	0018      	movs	r0, r3
 800352c:	2300      	movs	r3, #0
 800352e:	0019      	movs	r1, r3
 8003530:	4a16      	ldr	r2, [pc, #88]	; (800358c <HAL_RCC_GetSysClockFreq+0x140>)
 8003532:	2300      	movs	r3, #0
 8003534:	f7fc ff90 	bl	8000458 <__aeabi_lmul>
 8003538:	0002      	movs	r2, r0
 800353a:	000b      	movs	r3, r1
 800353c:	0010      	movs	r0, r2
 800353e:	0019      	movs	r1, r3
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	001c      	movs	r4, r3
 8003544:	2300      	movs	r3, #0
 8003546:	001d      	movs	r5, r3
 8003548:	0022      	movs	r2, r4
 800354a:	002b      	movs	r3, r5
 800354c:	f7fc ff64 	bl	8000418 <__aeabi_uldivmod>
 8003550:	0002      	movs	r2, r0
 8003552:	000b      	movs	r3, r1
 8003554:	0013      	movs	r3, r2
 8003556:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800355a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800355c:	e00d      	b.n	800357a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800355e:	4b09      	ldr	r3, [pc, #36]	; (8003584 <HAL_RCC_GetSysClockFreq+0x138>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	0b5b      	lsrs	r3, r3, #13
 8003564:	2207      	movs	r2, #7
 8003566:	4013      	ands	r3, r2
 8003568:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	3301      	adds	r3, #1
 800356e:	2280      	movs	r2, #128	; 0x80
 8003570:	0212      	lsls	r2, r2, #8
 8003572:	409a      	lsls	r2, r3
 8003574:	0013      	movs	r3, r2
 8003576:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003578:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800357a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800357c:	0018      	movs	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	b00e      	add	sp, #56	; 0x38
 8003582:	bdb0      	pop	{r4, r5, r7, pc}
 8003584:	40021000 	.word	0x40021000
 8003588:	003d0900 	.word	0x003d0900
 800358c:	00f42400 	.word	0x00f42400
 8003590:	007a1200 	.word	0x007a1200
 8003594:	08005c54 	.word	0x08005c54

08003598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800359c:	4b02      	ldr	r3, [pc, #8]	; (80035a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800359e:	681b      	ldr	r3, [r3, #0]
}
 80035a0:	0018      	movs	r0, r3
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	46c0      	nop			; (mov r8, r8)
 80035a8:	200000ec 	.word	0x200000ec

080035ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035b0:	f7ff fff2 	bl	8003598 <HAL_RCC_GetHCLKFreq>
 80035b4:	0001      	movs	r1, r0
 80035b6:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	0a1b      	lsrs	r3, r3, #8
 80035bc:	2207      	movs	r2, #7
 80035be:	4013      	ands	r3, r2
 80035c0:	4a04      	ldr	r2, [pc, #16]	; (80035d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80035c2:	5cd3      	ldrb	r3, [r2, r3]
 80035c4:	40d9      	lsrs	r1, r3
 80035c6:	000b      	movs	r3, r1
}
 80035c8:	0018      	movs	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	40021000 	.word	0x40021000
 80035d4:	08005c4c 	.word	0x08005c4c

080035d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035dc:	f7ff ffdc 	bl	8003598 <HAL_RCC_GetHCLKFreq>
 80035e0:	0001      	movs	r1, r0
 80035e2:	4b06      	ldr	r3, [pc, #24]	; (80035fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	0adb      	lsrs	r3, r3, #11
 80035e8:	2207      	movs	r2, #7
 80035ea:	4013      	ands	r3, r2
 80035ec:	4a04      	ldr	r2, [pc, #16]	; (8003600 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035ee:	5cd3      	ldrb	r3, [r2, r3]
 80035f0:	40d9      	lsrs	r1, r3
 80035f2:	000b      	movs	r3, r1
}
 80035f4:	0018      	movs	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	40021000 	.word	0x40021000
 8003600:	08005c4c 	.word	0x08005c4c

08003604 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800360c:	2317      	movs	r3, #23
 800360e:	18fb      	adds	r3, r7, r3
 8003610:	2200      	movs	r2, #0
 8003612:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2220      	movs	r2, #32
 800361a:	4013      	ands	r3, r2
 800361c:	d106      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	2380      	movs	r3, #128	; 0x80
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	4013      	ands	r3, r2
 8003628:	d100      	bne.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800362a:	e0d9      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800362c:	4ba4      	ldr	r3, [pc, #656]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800362e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003630:	2380      	movs	r3, #128	; 0x80
 8003632:	055b      	lsls	r3, r3, #21
 8003634:	4013      	ands	r3, r2
 8003636:	d10a      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003638:	4ba1      	ldr	r3, [pc, #644]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800363a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800363c:	4ba0      	ldr	r3, [pc, #640]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800363e:	2180      	movs	r1, #128	; 0x80
 8003640:	0549      	lsls	r1, r1, #21
 8003642:	430a      	orrs	r2, r1
 8003644:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003646:	2317      	movs	r3, #23
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	2201      	movs	r2, #1
 800364c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364e:	4b9d      	ldr	r3, [pc, #628]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	2380      	movs	r3, #128	; 0x80
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	4013      	ands	r3, r2
 8003658:	d11a      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800365a:	4b9a      	ldr	r3, [pc, #616]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	4b99      	ldr	r3, [pc, #612]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003660:	2180      	movs	r1, #128	; 0x80
 8003662:	0049      	lsls	r1, r1, #1
 8003664:	430a      	orrs	r2, r1
 8003666:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003668:	f7fe f8f2 	bl	8001850 <HAL_GetTick>
 800366c:	0003      	movs	r3, r0
 800366e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003670:	e008      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003672:	f7fe f8ed 	bl	8001850 <HAL_GetTick>
 8003676:	0002      	movs	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b64      	cmp	r3, #100	; 0x64
 800367e:	d901      	bls.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e118      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003684:	4b8f      	ldr	r3, [pc, #572]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	2380      	movs	r3, #128	; 0x80
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	4013      	ands	r3, r2
 800368e:	d0f0      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003690:	4b8b      	ldr	r3, [pc, #556]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	23c0      	movs	r3, #192	; 0xc0
 8003696:	039b      	lsls	r3, r3, #14
 8003698:	4013      	ands	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	23c0      	movs	r3, #192	; 0xc0
 80036a2:	039b      	lsls	r3, r3, #14
 80036a4:	4013      	ands	r3, r2
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d107      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	23c0      	movs	r3, #192	; 0xc0
 80036b2:	039b      	lsls	r3, r3, #14
 80036b4:	4013      	ands	r3, r2
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d013      	beq.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685a      	ldr	r2, [r3, #4]
 80036c0:	23c0      	movs	r3, #192	; 0xc0
 80036c2:	029b      	lsls	r3, r3, #10
 80036c4:	401a      	ands	r2, r3
 80036c6:	23c0      	movs	r3, #192	; 0xc0
 80036c8:	029b      	lsls	r3, r3, #10
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d10a      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80036ce:	4b7c      	ldr	r3, [pc, #496]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	2380      	movs	r3, #128	; 0x80
 80036d4:	029b      	lsls	r3, r3, #10
 80036d6:	401a      	ands	r2, r3
 80036d8:	2380      	movs	r3, #128	; 0x80
 80036da:	029b      	lsls	r3, r3, #10
 80036dc:	429a      	cmp	r2, r3
 80036de:	d101      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0e8      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80036e4:	4b76      	ldr	r3, [pc, #472]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80036e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036e8:	23c0      	movs	r3, #192	; 0xc0
 80036ea:	029b      	lsls	r3, r3, #10
 80036ec:	4013      	ands	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d049      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	23c0      	movs	r3, #192	; 0xc0
 80036fc:	029b      	lsls	r3, r3, #10
 80036fe:	4013      	ands	r3, r2
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	429a      	cmp	r2, r3
 8003704:	d004      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2220      	movs	r2, #32
 800370c:	4013      	ands	r3, r2
 800370e:	d10d      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	23c0      	movs	r3, #192	; 0xc0
 8003716:	029b      	lsls	r3, r3, #10
 8003718:	4013      	ands	r3, r2
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	429a      	cmp	r2, r3
 800371e:	d034      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	2380      	movs	r3, #128	; 0x80
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	4013      	ands	r3, r2
 800372a:	d02e      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800372c:	4b64      	ldr	r3, [pc, #400]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800372e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003730:	4a65      	ldr	r2, [pc, #404]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003732:	4013      	ands	r3, r2
 8003734:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003736:	4b62      	ldr	r3, [pc, #392]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003738:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800373a:	4b61      	ldr	r3, [pc, #388]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800373c:	2180      	movs	r1, #128	; 0x80
 800373e:	0309      	lsls	r1, r1, #12
 8003740:	430a      	orrs	r2, r1
 8003742:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003744:	4b5e      	ldr	r3, [pc, #376]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003746:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003748:	4b5d      	ldr	r3, [pc, #372]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800374a:	4960      	ldr	r1, [pc, #384]	; (80038cc <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800374c:	400a      	ands	r2, r1
 800374e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003750:	4b5b      	ldr	r3, [pc, #364]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	2380      	movs	r3, #128	; 0x80
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	4013      	ands	r3, r2
 800375e:	d014      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003760:	f7fe f876 	bl	8001850 <HAL_GetTick>
 8003764:	0003      	movs	r3, r0
 8003766:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003768:	e009      	b.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800376a:	f7fe f871 	bl	8001850 <HAL_GetTick>
 800376e:	0002      	movs	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	4a56      	ldr	r2, [pc, #344]	; (80038d0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d901      	bls.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e09b      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800377e:	4b50      	ldr	r3, [pc, #320]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003780:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003782:	2380      	movs	r3, #128	; 0x80
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4013      	ands	r3, r2
 8003788:	d0ef      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	23c0      	movs	r3, #192	; 0xc0
 8003790:	029b      	lsls	r3, r3, #10
 8003792:	401a      	ands	r2, r3
 8003794:	23c0      	movs	r3, #192	; 0xc0
 8003796:	029b      	lsls	r3, r3, #10
 8003798:	429a      	cmp	r2, r3
 800379a:	d10c      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800379c:	4b48      	ldr	r3, [pc, #288]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a4c      	ldr	r2, [pc, #304]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80037a2:	4013      	ands	r3, r2
 80037a4:	0019      	movs	r1, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	23c0      	movs	r3, #192	; 0xc0
 80037ac:	039b      	lsls	r3, r3, #14
 80037ae:	401a      	ands	r2, r3
 80037b0:	4b43      	ldr	r3, [pc, #268]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80037b2:	430a      	orrs	r2, r1
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	4b42      	ldr	r3, [pc, #264]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80037b8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	23c0      	movs	r3, #192	; 0xc0
 80037c0:	029b      	lsls	r3, r3, #10
 80037c2:	401a      	ands	r2, r3
 80037c4:	4b3e      	ldr	r3, [pc, #248]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80037c6:	430a      	orrs	r2, r1
 80037c8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037ca:	2317      	movs	r3, #23
 80037cc:	18fb      	adds	r3, r7, r3
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d105      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037d4:	4b3a      	ldr	r3, [pc, #232]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80037d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037d8:	4b39      	ldr	r3, [pc, #228]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80037da:	493f      	ldr	r1, [pc, #252]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037dc:	400a      	ands	r2, r1
 80037de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2201      	movs	r2, #1
 80037e6:	4013      	ands	r3, r2
 80037e8:	d009      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037ea:	4b35      	ldr	r3, [pc, #212]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80037ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ee:	2203      	movs	r2, #3
 80037f0:	4393      	bics	r3, r2
 80037f2:	0019      	movs	r1, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	4b31      	ldr	r3, [pc, #196]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80037fa:	430a      	orrs	r2, r1
 80037fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2202      	movs	r2, #2
 8003804:	4013      	ands	r3, r2
 8003806:	d009      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003808:	4b2d      	ldr	r3, [pc, #180]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800380a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380c:	220c      	movs	r2, #12
 800380e:	4393      	bics	r3, r2
 8003810:	0019      	movs	r1, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691a      	ldr	r2, [r3, #16]
 8003816:	4b2a      	ldr	r3, [pc, #168]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003818:	430a      	orrs	r2, r1
 800381a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2204      	movs	r2, #4
 8003822:	4013      	ands	r3, r2
 8003824:	d009      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003826:	4b26      	ldr	r3, [pc, #152]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382a:	4a2c      	ldr	r2, [pc, #176]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800382c:	4013      	ands	r3, r2
 800382e:	0019      	movs	r1, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	695a      	ldr	r2, [r3, #20]
 8003834:	4b22      	ldr	r3, [pc, #136]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003836:	430a      	orrs	r2, r1
 8003838:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2208      	movs	r2, #8
 8003840:	4013      	ands	r3, r2
 8003842:	d009      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003844:	4b1e      	ldr	r3, [pc, #120]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003848:	4a25      	ldr	r2, [pc, #148]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800384a:	4013      	ands	r3, r2
 800384c:	0019      	movs	r1, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699a      	ldr	r2, [r3, #24]
 8003852:	4b1b      	ldr	r3, [pc, #108]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003854:	430a      	orrs	r2, r1
 8003856:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	2380      	movs	r3, #128	; 0x80
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4013      	ands	r3, r2
 8003862:	d009      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003864:	4b16      	ldr	r3, [pc, #88]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003868:	4a17      	ldr	r2, [pc, #92]	; (80038c8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800386a:	4013      	ands	r3, r2
 800386c:	0019      	movs	r1, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69da      	ldr	r2, [r3, #28]
 8003872:	4b13      	ldr	r3, [pc, #76]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003874:	430a      	orrs	r2, r1
 8003876:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2240      	movs	r2, #64	; 0x40
 800387e:	4013      	ands	r3, r2
 8003880:	d009      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003882:	4b0f      	ldr	r3, [pc, #60]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003886:	4a17      	ldr	r2, [pc, #92]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003888:	4013      	ands	r3, r2
 800388a:	0019      	movs	r1, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003890:	4b0b      	ldr	r3, [pc, #44]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003892:	430a      	orrs	r2, r1
 8003894:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2280      	movs	r2, #128	; 0x80
 800389c:	4013      	ands	r3, r2
 800389e:	d009      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80038a0:	4b07      	ldr	r3, [pc, #28]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80038a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a4:	4a10      	ldr	r2, [pc, #64]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	0019      	movs	r1, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1a      	ldr	r2, [r3, #32]
 80038ae:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80038b0:	430a      	orrs	r2, r1
 80038b2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	0018      	movs	r0, r3
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b006      	add	sp, #24
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	46c0      	nop			; (mov r8, r8)
 80038c0:	40021000 	.word	0x40021000
 80038c4:	40007000 	.word	0x40007000
 80038c8:	fffcffff 	.word	0xfffcffff
 80038cc:	fff7ffff 	.word	0xfff7ffff
 80038d0:	00001388 	.word	0x00001388
 80038d4:	ffcfffff 	.word	0xffcfffff
 80038d8:	efffffff 	.word	0xefffffff
 80038dc:	fffff3ff 	.word	0xfffff3ff
 80038e0:	ffffcfff 	.word	0xffffcfff
 80038e4:	fbffffff 	.word	0xfbffffff
 80038e8:	fff3ffff 	.word	0xfff3ffff

080038ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e032      	b.n	8003964 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2239      	movs	r2, #57	; 0x39
 8003902:	5c9b      	ldrb	r3, [r3, r2]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d107      	bne.n	800391a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2238      	movs	r2, #56	; 0x38
 800390e:	2100      	movs	r1, #0
 8003910:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	0018      	movs	r0, r3
 8003916:	f7fd fd0f 	bl	8001338 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2239      	movs	r2, #57	; 0x39
 800391e:	2102      	movs	r1, #2
 8003920:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3304      	adds	r3, #4
 800392a:	0019      	movs	r1, r3
 800392c:	0010      	movs	r0, r2
 800392e:	f000 fa4b 	bl	8003dc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	223e      	movs	r2, #62	; 0x3e
 8003936:	2101      	movs	r1, #1
 8003938:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	223a      	movs	r2, #58	; 0x3a
 800393e:	2101      	movs	r1, #1
 8003940:	5499      	strb	r1, [r3, r2]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	223b      	movs	r2, #59	; 0x3b
 8003946:	2101      	movs	r1, #1
 8003948:	5499      	strb	r1, [r3, r2]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	223c      	movs	r2, #60	; 0x3c
 800394e:	2101      	movs	r1, #1
 8003950:	5499      	strb	r1, [r3, r2]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	223d      	movs	r2, #61	; 0x3d
 8003956:	2101      	movs	r1, #1
 8003958:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2239      	movs	r2, #57	; 0x39
 800395e:	2101      	movs	r1, #1
 8003960:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	0018      	movs	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	b002      	add	sp, #8
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2239      	movs	r2, #57	; 0x39
 8003978:	5c9b      	ldrb	r3, [r3, r2]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b01      	cmp	r3, #1
 800397e:	d001      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e03b      	b.n	80039fc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2239      	movs	r2, #57	; 0x39
 8003988:	2102      	movs	r1, #2
 800398a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2101      	movs	r1, #1
 8003998:	430a      	orrs	r2, r1
 800399a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	2380      	movs	r3, #128	; 0x80
 80039a2:	05db      	lsls	r3, r3, #23
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d00e      	beq.n	80039c6 <HAL_TIM_Base_Start_IT+0x5a>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a15      	ldr	r2, [pc, #84]	; (8003a04 <HAL_TIM_Base_Start_IT+0x98>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d009      	beq.n	80039c6 <HAL_TIM_Base_Start_IT+0x5a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a14      	ldr	r2, [pc, #80]	; (8003a08 <HAL_TIM_Base_Start_IT+0x9c>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d004      	beq.n	80039c6 <HAL_TIM_Base_Start_IT+0x5a>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a12      	ldr	r2, [pc, #72]	; (8003a0c <HAL_TIM_Base_Start_IT+0xa0>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d111      	bne.n	80039ea <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2207      	movs	r2, #7
 80039ce:	4013      	ands	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b06      	cmp	r3, #6
 80039d6:	d010      	beq.n	80039fa <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	2101      	movs	r1, #1
 80039e4:	430a      	orrs	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039e8:	e007      	b.n	80039fa <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2101      	movs	r1, #1
 80039f6:	430a      	orrs	r2, r1
 80039f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	0018      	movs	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	b004      	add	sp, #16
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40000400 	.word	0x40000400
 8003a08:	40010800 	.word	0x40010800
 8003a0c:	40011400 	.word	0x40011400

08003a10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d124      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	4013      	ands	r3, r2
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d11d      	bne.n	8003a70 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2203      	movs	r2, #3
 8003a3a:	4252      	negs	r2, r2
 8003a3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	2203      	movs	r2, #3
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	d004      	beq.n	8003a5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	0018      	movs	r0, r3
 8003a54:	f000 f9a0 	bl	8003d98 <HAL_TIM_IC_CaptureCallback>
 8003a58:	e007      	b.n	8003a6a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f000 f993 	bl	8003d88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	0018      	movs	r0, r3
 8003a66:	f000 f99f 	bl	8003da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	2204      	movs	r2, #4
 8003a78:	4013      	ands	r3, r2
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d125      	bne.n	8003aca <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	2204      	movs	r2, #4
 8003a86:	4013      	ands	r3, r2
 8003a88:	2b04      	cmp	r3, #4
 8003a8a:	d11e      	bne.n	8003aca <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2205      	movs	r2, #5
 8003a92:	4252      	negs	r2, r2
 8003a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2202      	movs	r2, #2
 8003a9a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	699a      	ldr	r2, [r3, #24]
 8003aa2:	23c0      	movs	r3, #192	; 0xc0
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	d004      	beq.n	8003ab4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	0018      	movs	r0, r3
 8003aae:	f000 f973 	bl	8003d98 <HAL_TIM_IC_CaptureCallback>
 8003ab2:	e007      	b.n	8003ac4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f000 f966 	bl	8003d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f000 f972 	bl	8003da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	2208      	movs	r2, #8
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d124      	bne.n	8003b22 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	2208      	movs	r2, #8
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d11d      	bne.n	8003b22 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2209      	movs	r2, #9
 8003aec:	4252      	negs	r2, r2
 8003aee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2204      	movs	r2, #4
 8003af4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	2203      	movs	r2, #3
 8003afe:	4013      	ands	r3, r2
 8003b00:	d004      	beq.n	8003b0c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	0018      	movs	r0, r3
 8003b06:	f000 f947 	bl	8003d98 <HAL_TIM_IC_CaptureCallback>
 8003b0a:	e007      	b.n	8003b1c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	0018      	movs	r0, r3
 8003b10:	f000 f93a 	bl	8003d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	0018      	movs	r0, r3
 8003b18:	f000 f946 	bl	8003da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	2210      	movs	r2, #16
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	2b10      	cmp	r3, #16
 8003b2e:	d125      	bne.n	8003b7c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	2210      	movs	r2, #16
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b10      	cmp	r3, #16
 8003b3c:	d11e      	bne.n	8003b7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2211      	movs	r2, #17
 8003b44:	4252      	negs	r2, r2
 8003b46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2208      	movs	r2, #8
 8003b4c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69da      	ldr	r2, [r3, #28]
 8003b54:	23c0      	movs	r3, #192	; 0xc0
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4013      	ands	r3, r2
 8003b5a:	d004      	beq.n	8003b66 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	0018      	movs	r0, r3
 8003b60:	f000 f91a 	bl	8003d98 <HAL_TIM_IC_CaptureCallback>
 8003b64:	e007      	b.n	8003b76 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	0018      	movs	r0, r3
 8003b6a:	f000 f90d 	bl	8003d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	0018      	movs	r0, r3
 8003b72:	f000 f919 	bl	8003da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	2201      	movs	r2, #1
 8003b84:	4013      	ands	r3, r2
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d10f      	bne.n	8003baa <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	2201      	movs	r2, #1
 8003b92:	4013      	ands	r3, r2
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d108      	bne.n	8003baa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	4252      	negs	r2, r2
 8003ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f7fd fb41 	bl	800122c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	2240      	movs	r2, #64	; 0x40
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	2b40      	cmp	r3, #64	; 0x40
 8003bb6:	d10f      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	2240      	movs	r2, #64	; 0x40
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b40      	cmp	r3, #64	; 0x40
 8003bc4:	d108      	bne.n	8003bd8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2241      	movs	r2, #65	; 0x41
 8003bcc:	4252      	negs	r2, r2
 8003bce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	f000 f8f0 	bl	8003db8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bd8:	46c0      	nop			; (mov r8, r8)
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b002      	add	sp, #8
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bea:	230f      	movs	r3, #15
 8003bec:	18fb      	adds	r3, r7, r3
 8003bee:	2200      	movs	r2, #0
 8003bf0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2238      	movs	r2, #56	; 0x38
 8003bf6:	5c9b      	ldrb	r3, [r3, r2]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d101      	bne.n	8003c00 <HAL_TIM_ConfigClockSource+0x20>
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	e0bc      	b.n	8003d7a <HAL_TIM_ConfigClockSource+0x19a>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2238      	movs	r2, #56	; 0x38
 8003c04:	2101      	movs	r1, #1
 8003c06:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2239      	movs	r2, #57	; 0x39
 8003c0c:	2102      	movs	r1, #2
 8003c0e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2277      	movs	r2, #119	; 0x77
 8003c1c:	4393      	bics	r3, r2
 8003c1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4a58      	ldr	r2, [pc, #352]	; (8003d84 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003c24:	4013      	ands	r3, r2
 8003c26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2280      	movs	r2, #128	; 0x80
 8003c36:	0192      	lsls	r2, r2, #6
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d040      	beq.n	8003cbe <HAL_TIM_ConfigClockSource+0xde>
 8003c3c:	2280      	movs	r2, #128	; 0x80
 8003c3e:	0192      	lsls	r2, r2, #6
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d900      	bls.n	8003c46 <HAL_TIM_ConfigClockSource+0x66>
 8003c44:	e088      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x178>
 8003c46:	2280      	movs	r2, #128	; 0x80
 8003c48:	0152      	lsls	r2, r2, #5
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d100      	bne.n	8003c50 <HAL_TIM_ConfigClockSource+0x70>
 8003c4e:	e088      	b.n	8003d62 <HAL_TIM_ConfigClockSource+0x182>
 8003c50:	2280      	movs	r2, #128	; 0x80
 8003c52:	0152      	lsls	r2, r2, #5
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d900      	bls.n	8003c5a <HAL_TIM_ConfigClockSource+0x7a>
 8003c58:	e07e      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x178>
 8003c5a:	2b70      	cmp	r3, #112	; 0x70
 8003c5c:	d018      	beq.n	8003c90 <HAL_TIM_ConfigClockSource+0xb0>
 8003c5e:	d900      	bls.n	8003c62 <HAL_TIM_ConfigClockSource+0x82>
 8003c60:	e07a      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x178>
 8003c62:	2b60      	cmp	r3, #96	; 0x60
 8003c64:	d04f      	beq.n	8003d06 <HAL_TIM_ConfigClockSource+0x126>
 8003c66:	d900      	bls.n	8003c6a <HAL_TIM_ConfigClockSource+0x8a>
 8003c68:	e076      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x178>
 8003c6a:	2b50      	cmp	r3, #80	; 0x50
 8003c6c:	d03b      	beq.n	8003ce6 <HAL_TIM_ConfigClockSource+0x106>
 8003c6e:	d900      	bls.n	8003c72 <HAL_TIM_ConfigClockSource+0x92>
 8003c70:	e072      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x178>
 8003c72:	2b40      	cmp	r3, #64	; 0x40
 8003c74:	d057      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x146>
 8003c76:	d900      	bls.n	8003c7a <HAL_TIM_ConfigClockSource+0x9a>
 8003c78:	e06e      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x178>
 8003c7a:	2b30      	cmp	r3, #48	; 0x30
 8003c7c:	d063      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0x166>
 8003c7e:	d86b      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x178>
 8003c80:	2b20      	cmp	r3, #32
 8003c82:	d060      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0x166>
 8003c84:	d868      	bhi.n	8003d58 <HAL_TIM_ConfigClockSource+0x178>
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d05d      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0x166>
 8003c8a:	2b10      	cmp	r3, #16
 8003c8c:	d05b      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0x166>
 8003c8e:	e063      	b.n	8003d58 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	6899      	ldr	r1, [r3, #8]
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f000 f96a 	bl	8003f78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2277      	movs	r2, #119	; 0x77
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	609a      	str	r2, [r3, #8]
      break;
 8003cbc:	e052      	b.n	8003d64 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6818      	ldr	r0, [r3, #0]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	6899      	ldr	r1, [r3, #8]
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	f000 f953 	bl	8003f78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2180      	movs	r1, #128	; 0x80
 8003cde:	01c9      	lsls	r1, r1, #7
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	609a      	str	r2, [r3, #8]
      break;
 8003ce4:	e03e      	b.n	8003d64 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6818      	ldr	r0, [r3, #0]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	6859      	ldr	r1, [r3, #4]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	001a      	movs	r2, r3
 8003cf4:	f000 f8c6 	bl	8003e84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2150      	movs	r1, #80	; 0x50
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f000 f920 	bl	8003f44 <TIM_ITRx_SetConfig>
      break;
 8003d04:	e02e      	b.n	8003d64 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	6859      	ldr	r1, [r3, #4]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	001a      	movs	r2, r3
 8003d14:	f000 f8e4 	bl	8003ee0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2160      	movs	r1, #96	; 0x60
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f000 f910 	bl	8003f44 <TIM_ITRx_SetConfig>
      break;
 8003d24:	e01e      	b.n	8003d64 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6859      	ldr	r1, [r3, #4]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	001a      	movs	r2, r3
 8003d34:	f000 f8a6 	bl	8003e84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2140      	movs	r1, #64	; 0x40
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f000 f900 	bl	8003f44 <TIM_ITRx_SetConfig>
      break;
 8003d44:	e00e      	b.n	8003d64 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	0019      	movs	r1, r3
 8003d50:	0010      	movs	r0, r2
 8003d52:	f000 f8f7 	bl	8003f44 <TIM_ITRx_SetConfig>
      break;
 8003d56:	e005      	b.n	8003d64 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003d58:	230f      	movs	r3, #15
 8003d5a:	18fb      	adds	r3, r7, r3
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	701a      	strb	r2, [r3, #0]
      break;
 8003d60:	e000      	b.n	8003d64 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003d62:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2239      	movs	r2, #57	; 0x39
 8003d68:	2101      	movs	r1, #1
 8003d6a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2238      	movs	r2, #56	; 0x38
 8003d70:	2100      	movs	r1, #0
 8003d72:	5499      	strb	r1, [r3, r2]

  return status;
 8003d74:	230f      	movs	r3, #15
 8003d76:	18fb      	adds	r3, r7, r3
 8003d78:	781b      	ldrb	r3, [r3, #0]
}
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	b004      	add	sp, #16
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	ffff00ff 	.word	0xffff00ff

08003d88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b082      	sub	sp, #8
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d90:	46c0      	nop			; (mov r8, r8)
 8003d92:	46bd      	mov	sp, r7
 8003d94:	b002      	add	sp, #8
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003da0:	46c0      	nop			; (mov r8, r8)
 8003da2:	46bd      	mov	sp, r7
 8003da4:	b002      	add	sp, #8
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003db0:	46c0      	nop			; (mov r8, r8)
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b002      	add	sp, #8
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dc0:	46c0      	nop			; (mov r8, r8)
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b002      	add	sp, #8
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	2380      	movs	r3, #128	; 0x80
 8003ddc:	05db      	lsls	r3, r3, #23
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d00b      	beq.n	8003dfa <TIM_Base_SetConfig+0x32>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a23      	ldr	r2, [pc, #140]	; (8003e74 <TIM_Base_SetConfig+0xac>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d007      	beq.n	8003dfa <TIM_Base_SetConfig+0x32>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a22      	ldr	r2, [pc, #136]	; (8003e78 <TIM_Base_SetConfig+0xb0>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d003      	beq.n	8003dfa <TIM_Base_SetConfig+0x32>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a21      	ldr	r2, [pc, #132]	; (8003e7c <TIM_Base_SetConfig+0xb4>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d108      	bne.n	8003e0c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2270      	movs	r2, #112	; 0x70
 8003dfe:	4393      	bics	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	2380      	movs	r3, #128	; 0x80
 8003e10:	05db      	lsls	r3, r3, #23
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d00b      	beq.n	8003e2e <TIM_Base_SetConfig+0x66>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a16      	ldr	r2, [pc, #88]	; (8003e74 <TIM_Base_SetConfig+0xac>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d007      	beq.n	8003e2e <TIM_Base_SetConfig+0x66>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a15      	ldr	r2, [pc, #84]	; (8003e78 <TIM_Base_SetConfig+0xb0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d003      	beq.n	8003e2e <TIM_Base_SetConfig+0x66>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a14      	ldr	r2, [pc, #80]	; (8003e7c <TIM_Base_SetConfig+0xb4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d108      	bne.n	8003e40 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4a13      	ldr	r2, [pc, #76]	; (8003e80 <TIM_Base_SetConfig+0xb8>)
 8003e32:	4013      	ands	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2280      	movs	r2, #128	; 0x80
 8003e44:	4393      	bics	r3, r2
 8003e46:	001a      	movs	r2, r3
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	689a      	ldr	r2, [r3, #8]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	615a      	str	r2, [r3, #20]
}
 8003e6c:	46c0      	nop			; (mov r8, r8)
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	b004      	add	sp, #16
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	40000400 	.word	0x40000400
 8003e78:	40010800 	.word	0x40010800
 8003e7c:	40011400 	.word	0x40011400
 8003e80:	fffffcff 	.word	0xfffffcff

08003e84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a1b      	ldr	r3, [r3, #32]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	4393      	bics	r3, r2
 8003e9e:	001a      	movs	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	22f0      	movs	r2, #240	; 0xf0
 8003eae:	4393      	bics	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	220a      	movs	r2, #10
 8003ec0:	4393      	bics	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	621a      	str	r2, [r3, #32]
}
 8003ed8:	46c0      	nop			; (mov r8, r8)
 8003eda:	46bd      	mov	sp, r7
 8003edc:	b006      	add	sp, #24
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	2210      	movs	r2, #16
 8003ef2:	4393      	bics	r3, r2
 8003ef4:	001a      	movs	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	4a0d      	ldr	r2, [pc, #52]	; (8003f40 <TIM_TI2_ConfigInputStage+0x60>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	031b      	lsls	r3, r3, #12
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	22a0      	movs	r2, #160	; 0xa0
 8003f1c:	4393      	bics	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	693a      	ldr	r2, [r7, #16]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	621a      	str	r2, [r3, #32]
}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	b006      	add	sp, #24
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	ffff0fff 	.word	0xffff0fff

08003f44 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2270      	movs	r2, #112	; 0x70
 8003f58:	4393      	bics	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	2207      	movs	r2, #7
 8003f64:	4313      	orrs	r3, r2
 8003f66:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	609a      	str	r2, [r3, #8]
}
 8003f6e:	46c0      	nop			; (mov r8, r8)
 8003f70:	46bd      	mov	sp, r7
 8003f72:	b004      	add	sp, #16
 8003f74:	bd80      	pop	{r7, pc}
	...

08003f78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	4a09      	ldr	r2, [pc, #36]	; (8003fb4 <TIM_ETR_SetConfig+0x3c>)
 8003f90:	4013      	ands	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	021a      	lsls	r2, r3, #8
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	609a      	str	r2, [r3, #8]
}
 8003fac:	46c0      	nop			; (mov r8, r8)
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	b006      	add	sp, #24
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	ffff00ff 	.word	0xffff00ff

08003fb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2238      	movs	r2, #56	; 0x38
 8003fc6:	5c9b      	ldrb	r3, [r3, r2]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d101      	bne.n	8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	e047      	b.n	8004060 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2238      	movs	r2, #56	; 0x38
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2239      	movs	r2, #57	; 0x39
 8003fdc:	2102      	movs	r1, #2
 8003fde:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2270      	movs	r2, #112	; 0x70
 8003ff4:	4393      	bics	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	2380      	movs	r3, #128	; 0x80
 8004010:	05db      	lsls	r3, r3, #23
 8004012:	429a      	cmp	r2, r3
 8004014:	d00e      	beq.n	8004034 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a13      	ldr	r2, [pc, #76]	; (8004068 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d009      	beq.n	8004034 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a11      	ldr	r2, [pc, #68]	; (800406c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d004      	beq.n	8004034 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a10      	ldr	r2, [pc, #64]	; (8004070 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d10c      	bne.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	2280      	movs	r2, #128	; 0x80
 8004038:	4393      	bics	r3, r2
 800403a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	4313      	orrs	r3, r2
 8004044:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2239      	movs	r2, #57	; 0x39
 8004052:	2101      	movs	r1, #1
 8004054:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2238      	movs	r2, #56	; 0x38
 800405a:	2100      	movs	r1, #0
 800405c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	0018      	movs	r0, r3
 8004062:	46bd      	mov	sp, r7
 8004064:	b004      	add	sp, #16
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40000400 	.word	0x40000400
 800406c:	40010800 	.word	0x40010800
 8004070:	40011400 	.word	0x40011400

08004074 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e044      	b.n	8004110 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800408a:	2b00      	cmp	r3, #0
 800408c:	d107      	bne.n	800409e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2274      	movs	r2, #116	; 0x74
 8004092:	2100      	movs	r1, #0
 8004094:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	0018      	movs	r0, r3
 800409a:	f7fd f997 	bl	80013cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2224      	movs	r2, #36	; 0x24
 80040a2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2101      	movs	r1, #1
 80040b0:	438a      	bics	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	0018      	movs	r0, r3
 80040b8:	f000 fbc2 	bl	8004840 <UART_SetConfig>
 80040bc:	0003      	movs	r3, r0
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e024      	b.n	8004110 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	0018      	movs	r0, r3
 80040d2:	f000 fe55 	bl	8004d80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685a      	ldr	r2, [r3, #4]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	490d      	ldr	r1, [pc, #52]	; (8004118 <HAL_UART_Init+0xa4>)
 80040e2:	400a      	ands	r2, r1
 80040e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	212a      	movs	r1, #42	; 0x2a
 80040f2:	438a      	bics	r2, r1
 80040f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2101      	movs	r1, #1
 8004102:	430a      	orrs	r2, r1
 8004104:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	0018      	movs	r0, r3
 800410a:	f000 feed 	bl	8004ee8 <UART_CheckIdleState>
 800410e:	0003      	movs	r3, r0
}
 8004110:	0018      	movs	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	b002      	add	sp, #8
 8004116:	bd80      	pop	{r7, pc}
 8004118:	ffffb7ff 	.word	0xffffb7ff

0800411c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b08a      	sub	sp, #40	; 0x28
 8004120:	af02      	add	r7, sp, #8
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	603b      	str	r3, [r7, #0]
 8004128:	1dbb      	adds	r3, r7, #6
 800412a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004130:	2b20      	cmp	r3, #32
 8004132:	d000      	beq.n	8004136 <HAL_UART_Transmit+0x1a>
 8004134:	e095      	b.n	8004262 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <HAL_UART_Transmit+0x28>
 800413c:	1dbb      	adds	r3, r7, #6
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e08d      	b.n	8004264 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	2380      	movs	r3, #128	; 0x80
 800414e:	015b      	lsls	r3, r3, #5
 8004150:	429a      	cmp	r2, r3
 8004152:	d109      	bne.n	8004168 <HAL_UART_Transmit+0x4c>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d105      	bne.n	8004168 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	2201      	movs	r2, #1
 8004160:	4013      	ands	r3, r2
 8004162:	d001      	beq.n	8004168 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e07d      	b.n	8004264 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2274      	movs	r2, #116	; 0x74
 800416c:	5c9b      	ldrb	r3, [r3, r2]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d101      	bne.n	8004176 <HAL_UART_Transmit+0x5a>
 8004172:	2302      	movs	r3, #2
 8004174:	e076      	b.n	8004264 <HAL_UART_Transmit+0x148>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2274      	movs	r2, #116	; 0x74
 800417a:	2101      	movs	r1, #1
 800417c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2280      	movs	r2, #128	; 0x80
 8004182:	2100      	movs	r1, #0
 8004184:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2221      	movs	r2, #33	; 0x21
 800418a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800418c:	f7fd fb60 	bl	8001850 <HAL_GetTick>
 8004190:	0003      	movs	r3, r0
 8004192:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	1dba      	adds	r2, r7, #6
 8004198:	2150      	movs	r1, #80	; 0x50
 800419a:	8812      	ldrh	r2, [r2, #0]
 800419c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1dba      	adds	r2, r7, #6
 80041a2:	2152      	movs	r1, #82	; 0x52
 80041a4:	8812      	ldrh	r2, [r2, #0]
 80041a6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	2380      	movs	r3, #128	; 0x80
 80041ae:	015b      	lsls	r3, r3, #5
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d108      	bne.n	80041c6 <HAL_UART_Transmit+0xaa>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d104      	bne.n	80041c6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80041bc:	2300      	movs	r3, #0
 80041be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	61bb      	str	r3, [r7, #24]
 80041c4:	e003      	b.n	80041ce <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041ca:	2300      	movs	r3, #0
 80041cc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2274      	movs	r2, #116	; 0x74
 80041d2:	2100      	movs	r1, #0
 80041d4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80041d6:	e02c      	b.n	8004232 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	0013      	movs	r3, r2
 80041e2:	2200      	movs	r2, #0
 80041e4:	2180      	movs	r1, #128	; 0x80
 80041e6:	f000 fec7 	bl	8004f78 <UART_WaitOnFlagUntilTimeout>
 80041ea:	1e03      	subs	r3, r0, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e038      	b.n	8004264 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10b      	bne.n	8004210 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	001a      	movs	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	05d2      	lsls	r2, r2, #23
 8004204:	0dd2      	lsrs	r2, r2, #23
 8004206:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	3302      	adds	r3, #2
 800420c:	61bb      	str	r3, [r7, #24]
 800420e:	e007      	b.n	8004220 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	781a      	ldrb	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	3301      	adds	r3, #1
 800421e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2252      	movs	r2, #82	; 0x52
 8004224:	5a9b      	ldrh	r3, [r3, r2]
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b299      	uxth	r1, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2252      	movs	r2, #82	; 0x52
 8004230:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2252      	movs	r2, #82	; 0x52
 8004236:	5a9b      	ldrh	r3, [r3, r2]
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1cc      	bne.n	80041d8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	0013      	movs	r3, r2
 8004248:	2200      	movs	r2, #0
 800424a:	2140      	movs	r1, #64	; 0x40
 800424c:	f000 fe94 	bl	8004f78 <UART_WaitOnFlagUntilTimeout>
 8004250:	1e03      	subs	r3, r0, #0
 8004252:	d001      	beq.n	8004258 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e005      	b.n	8004264 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2220      	movs	r2, #32
 800425c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	e000      	b.n	8004264 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8004262:	2302      	movs	r3, #2
  }
}
 8004264:	0018      	movs	r0, r3
 8004266:	46bd      	mov	sp, r7
 8004268:	b008      	add	sp, #32
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800426c:	b590      	push	{r4, r7, lr}
 800426e:	b0ab      	sub	sp, #172	; 0xac
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	22a4      	movs	r2, #164	; 0xa4
 800427c:	18b9      	adds	r1, r7, r2
 800427e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	20a0      	movs	r0, #160	; 0xa0
 8004288:	1839      	adds	r1, r7, r0
 800428a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	219c      	movs	r1, #156	; 0x9c
 8004294:	1879      	adds	r1, r7, r1
 8004296:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004298:	0011      	movs	r1, r2
 800429a:	18bb      	adds	r3, r7, r2
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a99      	ldr	r2, [pc, #612]	; (8004504 <HAL_UART_IRQHandler+0x298>)
 80042a0:	4013      	ands	r3, r2
 80042a2:	2298      	movs	r2, #152	; 0x98
 80042a4:	18bc      	adds	r4, r7, r2
 80042a6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80042a8:	18bb      	adds	r3, r7, r2
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d114      	bne.n	80042da <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80042b0:	187b      	adds	r3, r7, r1
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2220      	movs	r2, #32
 80042b6:	4013      	ands	r3, r2
 80042b8:	d00f      	beq.n	80042da <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042ba:	183b      	adds	r3, r7, r0
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2220      	movs	r2, #32
 80042c0:	4013      	ands	r3, r2
 80042c2:	d00a      	beq.n	80042da <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d100      	bne.n	80042ce <HAL_UART_IRQHandler+0x62>
 80042cc:	e298      	b.n	8004800 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	0010      	movs	r0, r2
 80042d6:	4798      	blx	r3
      }
      return;
 80042d8:	e292      	b.n	8004800 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80042da:	2398      	movs	r3, #152	; 0x98
 80042dc:	18fb      	adds	r3, r7, r3
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d100      	bne.n	80042e6 <HAL_UART_IRQHandler+0x7a>
 80042e4:	e114      	b.n	8004510 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80042e6:	239c      	movs	r3, #156	; 0x9c
 80042e8:	18fb      	adds	r3, r7, r3
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2201      	movs	r2, #1
 80042ee:	4013      	ands	r3, r2
 80042f0:	d106      	bne.n	8004300 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80042f2:	23a0      	movs	r3, #160	; 0xa0
 80042f4:	18fb      	adds	r3, r7, r3
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a83      	ldr	r2, [pc, #524]	; (8004508 <HAL_UART_IRQHandler+0x29c>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	d100      	bne.n	8004300 <HAL_UART_IRQHandler+0x94>
 80042fe:	e107      	b.n	8004510 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004300:	23a4      	movs	r3, #164	; 0xa4
 8004302:	18fb      	adds	r3, r7, r3
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2201      	movs	r2, #1
 8004308:	4013      	ands	r3, r2
 800430a:	d012      	beq.n	8004332 <HAL_UART_IRQHandler+0xc6>
 800430c:	23a0      	movs	r3, #160	; 0xa0
 800430e:	18fb      	adds	r3, r7, r3
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	2380      	movs	r3, #128	; 0x80
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	4013      	ands	r3, r2
 8004318:	d00b      	beq.n	8004332 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2201      	movs	r2, #1
 8004320:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2280      	movs	r2, #128	; 0x80
 8004326:	589b      	ldr	r3, [r3, r2]
 8004328:	2201      	movs	r2, #1
 800432a:	431a      	orrs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2180      	movs	r1, #128	; 0x80
 8004330:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004332:	23a4      	movs	r3, #164	; 0xa4
 8004334:	18fb      	adds	r3, r7, r3
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2202      	movs	r2, #2
 800433a:	4013      	ands	r3, r2
 800433c:	d011      	beq.n	8004362 <HAL_UART_IRQHandler+0xf6>
 800433e:	239c      	movs	r3, #156	; 0x9c
 8004340:	18fb      	adds	r3, r7, r3
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2201      	movs	r2, #1
 8004346:	4013      	ands	r3, r2
 8004348:	d00b      	beq.n	8004362 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2202      	movs	r2, #2
 8004350:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2280      	movs	r2, #128	; 0x80
 8004356:	589b      	ldr	r3, [r3, r2]
 8004358:	2204      	movs	r2, #4
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2180      	movs	r1, #128	; 0x80
 8004360:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004362:	23a4      	movs	r3, #164	; 0xa4
 8004364:	18fb      	adds	r3, r7, r3
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2204      	movs	r2, #4
 800436a:	4013      	ands	r3, r2
 800436c:	d011      	beq.n	8004392 <HAL_UART_IRQHandler+0x126>
 800436e:	239c      	movs	r3, #156	; 0x9c
 8004370:	18fb      	adds	r3, r7, r3
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2201      	movs	r2, #1
 8004376:	4013      	ands	r3, r2
 8004378:	d00b      	beq.n	8004392 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2204      	movs	r2, #4
 8004380:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2280      	movs	r2, #128	; 0x80
 8004386:	589b      	ldr	r3, [r3, r2]
 8004388:	2202      	movs	r2, #2
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2180      	movs	r1, #128	; 0x80
 8004390:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004392:	23a4      	movs	r3, #164	; 0xa4
 8004394:	18fb      	adds	r3, r7, r3
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2208      	movs	r2, #8
 800439a:	4013      	ands	r3, r2
 800439c:	d017      	beq.n	80043ce <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800439e:	23a0      	movs	r3, #160	; 0xa0
 80043a0:	18fb      	adds	r3, r7, r3
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2220      	movs	r2, #32
 80043a6:	4013      	ands	r3, r2
 80043a8:	d105      	bne.n	80043b6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80043aa:	239c      	movs	r3, #156	; 0x9c
 80043ac:	18fb      	adds	r3, r7, r3
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2201      	movs	r2, #1
 80043b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043b4:	d00b      	beq.n	80043ce <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2208      	movs	r2, #8
 80043bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2280      	movs	r2, #128	; 0x80
 80043c2:	589b      	ldr	r3, [r3, r2]
 80043c4:	2208      	movs	r2, #8
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2180      	movs	r1, #128	; 0x80
 80043cc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80043ce:	23a4      	movs	r3, #164	; 0xa4
 80043d0:	18fb      	adds	r3, r7, r3
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	2380      	movs	r3, #128	; 0x80
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	4013      	ands	r3, r2
 80043da:	d013      	beq.n	8004404 <HAL_UART_IRQHandler+0x198>
 80043dc:	23a0      	movs	r3, #160	; 0xa0
 80043de:	18fb      	adds	r3, r7, r3
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	2380      	movs	r3, #128	; 0x80
 80043e4:	04db      	lsls	r3, r3, #19
 80043e6:	4013      	ands	r3, r2
 80043e8:	d00c      	beq.n	8004404 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2280      	movs	r2, #128	; 0x80
 80043f0:	0112      	lsls	r2, r2, #4
 80043f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2280      	movs	r2, #128	; 0x80
 80043f8:	589b      	ldr	r3, [r3, r2]
 80043fa:	2220      	movs	r2, #32
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2180      	movs	r1, #128	; 0x80
 8004402:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2280      	movs	r2, #128	; 0x80
 8004408:	589b      	ldr	r3, [r3, r2]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d100      	bne.n	8004410 <HAL_UART_IRQHandler+0x1a4>
 800440e:	e1f9      	b.n	8004804 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004410:	23a4      	movs	r3, #164	; 0xa4
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2220      	movs	r2, #32
 8004418:	4013      	ands	r3, r2
 800441a:	d00e      	beq.n	800443a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800441c:	23a0      	movs	r3, #160	; 0xa0
 800441e:	18fb      	adds	r3, r7, r3
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2220      	movs	r2, #32
 8004424:	4013      	ands	r3, r2
 8004426:	d008      	beq.n	800443a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800442c:	2b00      	cmp	r3, #0
 800442e:	d004      	beq.n	800443a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	0010      	movs	r0, r2
 8004438:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2280      	movs	r2, #128	; 0x80
 800443e:	589b      	ldr	r3, [r3, r2]
 8004440:	2194      	movs	r1, #148	; 0x94
 8004442:	187a      	adds	r2, r7, r1
 8004444:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	2240      	movs	r2, #64	; 0x40
 800444e:	4013      	ands	r3, r2
 8004450:	2b40      	cmp	r3, #64	; 0x40
 8004452:	d004      	beq.n	800445e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004454:	187b      	adds	r3, r7, r1
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2228      	movs	r2, #40	; 0x28
 800445a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800445c:	d047      	beq.n	80044ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	0018      	movs	r0, r3
 8004462:	f000 fe4d 	bl	8005100 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	2240      	movs	r2, #64	; 0x40
 800446e:	4013      	ands	r3, r2
 8004470:	2b40      	cmp	r3, #64	; 0x40
 8004472:	d137      	bne.n	80044e4 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004474:	f3ef 8310 	mrs	r3, PRIMASK
 8004478:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800447a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800447c:	2090      	movs	r0, #144	; 0x90
 800447e:	183a      	adds	r2, r7, r0
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	2301      	movs	r3, #1
 8004484:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004486:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004488:	f383 8810 	msr	PRIMASK, r3
}
 800448c:	46c0      	nop			; (mov r8, r8)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2140      	movs	r1, #64	; 0x40
 800449a:	438a      	bics	r2, r1
 800449c:	609a      	str	r2, [r3, #8]
 800449e:	183b      	adds	r3, r7, r0
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044a6:	f383 8810 	msr	PRIMASK, r3
}
 80044aa:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d012      	beq.n	80044da <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b8:	4a14      	ldr	r2, [pc, #80]	; (800450c <HAL_UART_IRQHandler+0x2a0>)
 80044ba:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c0:	0018      	movs	r0, r3
 80044c2:	f7fe f815 	bl	80024f0 <HAL_DMA_Abort_IT>
 80044c6:	1e03      	subs	r3, r0, #0
 80044c8:	d01a      	beq.n	8004500 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d4:	0018      	movs	r0, r3
 80044d6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d8:	e012      	b.n	8004500 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	0018      	movs	r0, r3
 80044de:	f000 f9a7 	bl	8004830 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e2:	e00d      	b.n	8004500 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	0018      	movs	r0, r3
 80044e8:	f000 f9a2 	bl	8004830 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ec:	e008      	b.n	8004500 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	0018      	movs	r0, r3
 80044f2:	f000 f99d 	bl	8004830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2280      	movs	r2, #128	; 0x80
 80044fa:	2100      	movs	r1, #0
 80044fc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80044fe:	e181      	b.n	8004804 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004500:	46c0      	nop			; (mov r8, r8)
    return;
 8004502:	e17f      	b.n	8004804 <HAL_UART_IRQHandler+0x598>
 8004504:	0000080f 	.word	0x0000080f
 8004508:	04000120 	.word	0x04000120
 800450c:	080051c5 	.word	0x080051c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004514:	2b01      	cmp	r3, #1
 8004516:	d000      	beq.n	800451a <HAL_UART_IRQHandler+0x2ae>
 8004518:	e133      	b.n	8004782 <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800451a:	23a4      	movs	r3, #164	; 0xa4
 800451c:	18fb      	adds	r3, r7, r3
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2210      	movs	r2, #16
 8004522:	4013      	ands	r3, r2
 8004524:	d100      	bne.n	8004528 <HAL_UART_IRQHandler+0x2bc>
 8004526:	e12c      	b.n	8004782 <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004528:	23a0      	movs	r3, #160	; 0xa0
 800452a:	18fb      	adds	r3, r7, r3
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2210      	movs	r2, #16
 8004530:	4013      	ands	r3, r2
 8004532:	d100      	bne.n	8004536 <HAL_UART_IRQHandler+0x2ca>
 8004534:	e125      	b.n	8004782 <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2210      	movs	r2, #16
 800453c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2240      	movs	r2, #64	; 0x40
 8004546:	4013      	ands	r3, r2
 8004548:	2b40      	cmp	r3, #64	; 0x40
 800454a:	d000      	beq.n	800454e <HAL_UART_IRQHandler+0x2e2>
 800454c:	e09d      	b.n	800468a <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685a      	ldr	r2, [r3, #4]
 8004556:	217e      	movs	r1, #126	; 0x7e
 8004558:	187b      	adds	r3, r7, r1
 800455a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800455c:	187b      	adds	r3, r7, r1
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d100      	bne.n	8004566 <HAL_UART_IRQHandler+0x2fa>
 8004564:	e150      	b.n	8004808 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2258      	movs	r2, #88	; 0x58
 800456a:	5a9b      	ldrh	r3, [r3, r2]
 800456c:	187a      	adds	r2, r7, r1
 800456e:	8812      	ldrh	r2, [r2, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d300      	bcc.n	8004576 <HAL_UART_IRQHandler+0x30a>
 8004574:	e148      	b.n	8004808 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	187a      	adds	r2, r7, r1
 800457a:	215a      	movs	r1, #90	; 0x5a
 800457c:	8812      	ldrh	r2, [r2, #0]
 800457e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2220      	movs	r2, #32
 800458a:	4013      	ands	r3, r2
 800458c:	d16e      	bne.n	800466c <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800458e:	f3ef 8310 	mrs	r3, PRIMASK
 8004592:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004596:	67bb      	str	r3, [r7, #120]	; 0x78
 8004598:	2301      	movs	r3, #1
 800459a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800459c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800459e:	f383 8810 	msr	PRIMASK, r3
}
 80045a2:	46c0      	nop			; (mov r8, r8)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	499a      	ldr	r1, [pc, #616]	; (8004818 <HAL_UART_IRQHandler+0x5ac>)
 80045b0:	400a      	ands	r2, r1
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045b6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ba:	f383 8810 	msr	PRIMASK, r3
}
 80045be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045c0:	f3ef 8310 	mrs	r3, PRIMASK
 80045c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80045c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c8:	677b      	str	r3, [r7, #116]	; 0x74
 80045ca:	2301      	movs	r3, #1
 80045cc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045d0:	f383 8810 	msr	PRIMASK, r3
}
 80045d4:	46c0      	nop			; (mov r8, r8)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2101      	movs	r1, #1
 80045e2:	438a      	bics	r2, r1
 80045e4:	609a      	str	r2, [r3, #8]
 80045e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045e8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045ec:	f383 8810 	msr	PRIMASK, r3
}
 80045f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045f2:	f3ef 8310 	mrs	r3, PRIMASK
 80045f6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80045f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045fa:	673b      	str	r3, [r7, #112]	; 0x70
 80045fc:	2301      	movs	r3, #1
 80045fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004602:	f383 8810 	msr	PRIMASK, r3
}
 8004606:	46c0      	nop			; (mov r8, r8)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2140      	movs	r1, #64	; 0x40
 8004614:	438a      	bics	r2, r1
 8004616:	609a      	str	r2, [r3, #8]
 8004618:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800461a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800461c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800461e:	f383 8810 	msr	PRIMASK, r3
}
 8004622:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004630:	f3ef 8310 	mrs	r3, PRIMASK
 8004634:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004636:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004638:	66fb      	str	r3, [r7, #108]	; 0x6c
 800463a:	2301      	movs	r3, #1
 800463c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800463e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004640:	f383 8810 	msr	PRIMASK, r3
}
 8004644:	46c0      	nop			; (mov r8, r8)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2110      	movs	r1, #16
 8004652:	438a      	bics	r2, r1
 8004654:	601a      	str	r2, [r3, #0]
 8004656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004658:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800465a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800465c:	f383 8810 	msr	PRIMASK, r3
}
 8004660:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004666:	0018      	movs	r0, r3
 8004668:	f7fd ff02 	bl	8002470 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2258      	movs	r2, #88	; 0x58
 8004670:	5a9a      	ldrh	r2, [r3, r2]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	215a      	movs	r1, #90	; 0x5a
 8004676:	5a5b      	ldrh	r3, [r3, r1]
 8004678:	b29b      	uxth	r3, r3
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	b29a      	uxth	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	0011      	movs	r1, r2
 8004682:	0018      	movs	r0, r3
 8004684:	f7fc fda6 	bl	80011d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004688:	e0be      	b.n	8004808 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2258      	movs	r2, #88	; 0x58
 800468e:	5a99      	ldrh	r1, [r3, r2]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	225a      	movs	r2, #90	; 0x5a
 8004694:	5a9b      	ldrh	r3, [r3, r2]
 8004696:	b29a      	uxth	r2, r3
 8004698:	208e      	movs	r0, #142	; 0x8e
 800469a:	183b      	adds	r3, r7, r0
 800469c:	1a8a      	subs	r2, r1, r2
 800469e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	225a      	movs	r2, #90	; 0x5a
 80046a4:	5a9b      	ldrh	r3, [r3, r2]
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d100      	bne.n	80046ae <HAL_UART_IRQHandler+0x442>
 80046ac:	e0ae      	b.n	800480c <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 80046ae:	183b      	adds	r3, r7, r0
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d100      	bne.n	80046b8 <HAL_UART_IRQHandler+0x44c>
 80046b6:	e0a9      	b.n	800480c <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046b8:	f3ef 8310 	mrs	r3, PRIMASK
 80046bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80046be:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046c0:	2488      	movs	r4, #136	; 0x88
 80046c2:	193a      	adds	r2, r7, r4
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	2301      	movs	r3, #1
 80046c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	f383 8810 	msr	PRIMASK, r3
}
 80046d0:	46c0      	nop			; (mov r8, r8)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	494f      	ldr	r1, [pc, #316]	; (800481c <HAL_UART_IRQHandler+0x5b0>)
 80046de:	400a      	ands	r2, r1
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	193b      	adds	r3, r7, r4
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f383 8810 	msr	PRIMASK, r3
}
 80046ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046f0:	f3ef 8310 	mrs	r3, PRIMASK
 80046f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80046f6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f8:	2484      	movs	r4, #132	; 0x84
 80046fa:	193a      	adds	r2, r7, r4
 80046fc:	6013      	str	r3, [r2, #0]
 80046fe:	2301      	movs	r3, #1
 8004700:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	f383 8810 	msr	PRIMASK, r3
}
 8004708:	46c0      	nop			; (mov r8, r8)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689a      	ldr	r2, [r3, #8]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2101      	movs	r1, #1
 8004716:	438a      	bics	r2, r1
 8004718:	609a      	str	r2, [r3, #8]
 800471a:	193b      	adds	r3, r7, r4
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	f383 8810 	msr	PRIMASK, r3
}
 8004726:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2220      	movs	r2, #32
 800472c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800473a:	f3ef 8310 	mrs	r3, PRIMASK
 800473e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004742:	2480      	movs	r4, #128	; 0x80
 8004744:	193a      	adds	r2, r7, r4
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	2301      	movs	r3, #1
 800474a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474e:	f383 8810 	msr	PRIMASK, r3
}
 8004752:	46c0      	nop			; (mov r8, r8)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2110      	movs	r1, #16
 8004760:	438a      	bics	r2, r1
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	193b      	adds	r3, r7, r4
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800476a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476c:	f383 8810 	msr	PRIMASK, r3
}
 8004770:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004772:	183b      	adds	r3, r7, r0
 8004774:	881a      	ldrh	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	0011      	movs	r1, r2
 800477a:	0018      	movs	r0, r3
 800477c:	f7fc fd2a 	bl	80011d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004780:	e044      	b.n	800480c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004782:	23a4      	movs	r3, #164	; 0xa4
 8004784:	18fb      	adds	r3, r7, r3
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	2380      	movs	r3, #128	; 0x80
 800478a:	035b      	lsls	r3, r3, #13
 800478c:	4013      	ands	r3, r2
 800478e:	d010      	beq.n	80047b2 <HAL_UART_IRQHandler+0x546>
 8004790:	239c      	movs	r3, #156	; 0x9c
 8004792:	18fb      	adds	r3, r7, r3
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	2380      	movs	r3, #128	; 0x80
 8004798:	03db      	lsls	r3, r3, #15
 800479a:	4013      	ands	r3, r2
 800479c:	d009      	beq.n	80047b2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2280      	movs	r2, #128	; 0x80
 80047a4:	0352      	lsls	r2, r2, #13
 80047a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	0018      	movs	r0, r3
 80047ac:	f000 fd4c 	bl	8005248 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80047b0:	e02f      	b.n	8004812 <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80047b2:	23a4      	movs	r3, #164	; 0xa4
 80047b4:	18fb      	adds	r3, r7, r3
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2280      	movs	r2, #128	; 0x80
 80047ba:	4013      	ands	r3, r2
 80047bc:	d00f      	beq.n	80047de <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80047be:	23a0      	movs	r3, #160	; 0xa0
 80047c0:	18fb      	adds	r3, r7, r3
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2280      	movs	r2, #128	; 0x80
 80047c6:	4013      	ands	r3, r2
 80047c8:	d009      	beq.n	80047de <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d01e      	beq.n	8004810 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	0010      	movs	r0, r2
 80047da:	4798      	blx	r3
    }
    return;
 80047dc:	e018      	b.n	8004810 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80047de:	23a4      	movs	r3, #164	; 0xa4
 80047e0:	18fb      	adds	r3, r7, r3
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2240      	movs	r2, #64	; 0x40
 80047e6:	4013      	ands	r3, r2
 80047e8:	d013      	beq.n	8004812 <HAL_UART_IRQHandler+0x5a6>
 80047ea:	23a0      	movs	r3, #160	; 0xa0
 80047ec:	18fb      	adds	r3, r7, r3
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2240      	movs	r2, #64	; 0x40
 80047f2:	4013      	ands	r3, r2
 80047f4:	d00d      	beq.n	8004812 <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	0018      	movs	r0, r3
 80047fa:	f000 fcfa 	bl	80051f2 <UART_EndTransmit_IT>
    return;
 80047fe:	e008      	b.n	8004812 <HAL_UART_IRQHandler+0x5a6>
      return;
 8004800:	46c0      	nop			; (mov r8, r8)
 8004802:	e006      	b.n	8004812 <HAL_UART_IRQHandler+0x5a6>
    return;
 8004804:	46c0      	nop			; (mov r8, r8)
 8004806:	e004      	b.n	8004812 <HAL_UART_IRQHandler+0x5a6>
      return;
 8004808:	46c0      	nop			; (mov r8, r8)
 800480a:	e002      	b.n	8004812 <HAL_UART_IRQHandler+0x5a6>
      return;
 800480c:	46c0      	nop			; (mov r8, r8)
 800480e:	e000      	b.n	8004812 <HAL_UART_IRQHandler+0x5a6>
    return;
 8004810:	46c0      	nop			; (mov r8, r8)
  }

}
 8004812:	46bd      	mov	sp, r7
 8004814:	b02b      	add	sp, #172	; 0xac
 8004816:	bd90      	pop	{r4, r7, pc}
 8004818:	fffffeff 	.word	0xfffffeff
 800481c:	fffffedf 	.word	0xfffffedf

08004820 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004828:	46c0      	nop			; (mov r8, r8)
 800482a:	46bd      	mov	sp, r7
 800482c:	b002      	add	sp, #8
 800482e:	bd80      	pop	{r7, pc}

08004830 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004838:	46c0      	nop			; (mov r8, r8)
 800483a:	46bd      	mov	sp, r7
 800483c:	b002      	add	sp, #8
 800483e:	bd80      	pop	{r7, pc}

08004840 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004840:	b5b0      	push	{r4, r5, r7, lr}
 8004842:	b08e      	sub	sp, #56	; 0x38
 8004844:	af00      	add	r7, sp, #0
 8004846:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004848:	231a      	movs	r3, #26
 800484a:	2218      	movs	r2, #24
 800484c:	189b      	adds	r3, r3, r2
 800484e:	19db      	adds	r3, r3, r7
 8004850:	2200      	movs	r2, #0
 8004852:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	431a      	orrs	r2, r3
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	431a      	orrs	r2, r3
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	4313      	orrs	r3, r2
 800486a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4ac3      	ldr	r2, [pc, #780]	; (8004b80 <UART_SetConfig+0x340>)
 8004874:	4013      	ands	r3, r2
 8004876:	0019      	movs	r1, r3
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800487e:	430a      	orrs	r2, r1
 8004880:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	4abe      	ldr	r2, [pc, #760]	; (8004b84 <UART_SetConfig+0x344>)
 800488a:	4013      	ands	r3, r2
 800488c:	0019      	movs	r1, r3
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4ab8      	ldr	r2, [pc, #736]	; (8004b88 <UART_SetConfig+0x348>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d004      	beq.n	80048b4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048b0:	4313      	orrs	r3, r2
 80048b2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	4ab4      	ldr	r2, [pc, #720]	; (8004b8c <UART_SetConfig+0x34c>)
 80048bc:	4013      	ands	r3, r2
 80048be:	0019      	movs	r1, r3
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048c6:	430a      	orrs	r2, r1
 80048c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4ab0      	ldr	r2, [pc, #704]	; (8004b90 <UART_SetConfig+0x350>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d131      	bne.n	8004938 <UART_SetConfig+0xf8>
 80048d4:	4baf      	ldr	r3, [pc, #700]	; (8004b94 <UART_SetConfig+0x354>)
 80048d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d8:	2203      	movs	r2, #3
 80048da:	4013      	ands	r3, r2
 80048dc:	2b03      	cmp	r3, #3
 80048de:	d01d      	beq.n	800491c <UART_SetConfig+0xdc>
 80048e0:	d823      	bhi.n	800492a <UART_SetConfig+0xea>
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d00c      	beq.n	8004900 <UART_SetConfig+0xc0>
 80048e6:	d820      	bhi.n	800492a <UART_SetConfig+0xea>
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <UART_SetConfig+0xb2>
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d00e      	beq.n	800490e <UART_SetConfig+0xce>
 80048f0:	e01b      	b.n	800492a <UART_SetConfig+0xea>
 80048f2:	231b      	movs	r3, #27
 80048f4:	2218      	movs	r2, #24
 80048f6:	189b      	adds	r3, r3, r2
 80048f8:	19db      	adds	r3, r3, r7
 80048fa:	2201      	movs	r2, #1
 80048fc:	701a      	strb	r2, [r3, #0]
 80048fe:	e0b4      	b.n	8004a6a <UART_SetConfig+0x22a>
 8004900:	231b      	movs	r3, #27
 8004902:	2218      	movs	r2, #24
 8004904:	189b      	adds	r3, r3, r2
 8004906:	19db      	adds	r3, r3, r7
 8004908:	2202      	movs	r2, #2
 800490a:	701a      	strb	r2, [r3, #0]
 800490c:	e0ad      	b.n	8004a6a <UART_SetConfig+0x22a>
 800490e:	231b      	movs	r3, #27
 8004910:	2218      	movs	r2, #24
 8004912:	189b      	adds	r3, r3, r2
 8004914:	19db      	adds	r3, r3, r7
 8004916:	2204      	movs	r2, #4
 8004918:	701a      	strb	r2, [r3, #0]
 800491a:	e0a6      	b.n	8004a6a <UART_SetConfig+0x22a>
 800491c:	231b      	movs	r3, #27
 800491e:	2218      	movs	r2, #24
 8004920:	189b      	adds	r3, r3, r2
 8004922:	19db      	adds	r3, r3, r7
 8004924:	2208      	movs	r2, #8
 8004926:	701a      	strb	r2, [r3, #0]
 8004928:	e09f      	b.n	8004a6a <UART_SetConfig+0x22a>
 800492a:	231b      	movs	r3, #27
 800492c:	2218      	movs	r2, #24
 800492e:	189b      	adds	r3, r3, r2
 8004930:	19db      	adds	r3, r3, r7
 8004932:	2210      	movs	r2, #16
 8004934:	701a      	strb	r2, [r3, #0]
 8004936:	e098      	b.n	8004a6a <UART_SetConfig+0x22a>
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a96      	ldr	r2, [pc, #600]	; (8004b98 <UART_SetConfig+0x358>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d131      	bne.n	80049a6 <UART_SetConfig+0x166>
 8004942:	4b94      	ldr	r3, [pc, #592]	; (8004b94 <UART_SetConfig+0x354>)
 8004944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004946:	220c      	movs	r2, #12
 8004948:	4013      	ands	r3, r2
 800494a:	2b0c      	cmp	r3, #12
 800494c:	d01d      	beq.n	800498a <UART_SetConfig+0x14a>
 800494e:	d823      	bhi.n	8004998 <UART_SetConfig+0x158>
 8004950:	2b08      	cmp	r3, #8
 8004952:	d00c      	beq.n	800496e <UART_SetConfig+0x12e>
 8004954:	d820      	bhi.n	8004998 <UART_SetConfig+0x158>
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <UART_SetConfig+0x120>
 800495a:	2b04      	cmp	r3, #4
 800495c:	d00e      	beq.n	800497c <UART_SetConfig+0x13c>
 800495e:	e01b      	b.n	8004998 <UART_SetConfig+0x158>
 8004960:	231b      	movs	r3, #27
 8004962:	2218      	movs	r2, #24
 8004964:	189b      	adds	r3, r3, r2
 8004966:	19db      	adds	r3, r3, r7
 8004968:	2200      	movs	r2, #0
 800496a:	701a      	strb	r2, [r3, #0]
 800496c:	e07d      	b.n	8004a6a <UART_SetConfig+0x22a>
 800496e:	231b      	movs	r3, #27
 8004970:	2218      	movs	r2, #24
 8004972:	189b      	adds	r3, r3, r2
 8004974:	19db      	adds	r3, r3, r7
 8004976:	2202      	movs	r2, #2
 8004978:	701a      	strb	r2, [r3, #0]
 800497a:	e076      	b.n	8004a6a <UART_SetConfig+0x22a>
 800497c:	231b      	movs	r3, #27
 800497e:	2218      	movs	r2, #24
 8004980:	189b      	adds	r3, r3, r2
 8004982:	19db      	adds	r3, r3, r7
 8004984:	2204      	movs	r2, #4
 8004986:	701a      	strb	r2, [r3, #0]
 8004988:	e06f      	b.n	8004a6a <UART_SetConfig+0x22a>
 800498a:	231b      	movs	r3, #27
 800498c:	2218      	movs	r2, #24
 800498e:	189b      	adds	r3, r3, r2
 8004990:	19db      	adds	r3, r3, r7
 8004992:	2208      	movs	r2, #8
 8004994:	701a      	strb	r2, [r3, #0]
 8004996:	e068      	b.n	8004a6a <UART_SetConfig+0x22a>
 8004998:	231b      	movs	r3, #27
 800499a:	2218      	movs	r2, #24
 800499c:	189b      	adds	r3, r3, r2
 800499e:	19db      	adds	r3, r3, r7
 80049a0:	2210      	movs	r2, #16
 80049a2:	701a      	strb	r2, [r3, #0]
 80049a4:	e061      	b.n	8004a6a <UART_SetConfig+0x22a>
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a7c      	ldr	r2, [pc, #496]	; (8004b9c <UART_SetConfig+0x35c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d106      	bne.n	80049be <UART_SetConfig+0x17e>
 80049b0:	231b      	movs	r3, #27
 80049b2:	2218      	movs	r2, #24
 80049b4:	189b      	adds	r3, r3, r2
 80049b6:	19db      	adds	r3, r3, r7
 80049b8:	2200      	movs	r2, #0
 80049ba:	701a      	strb	r2, [r3, #0]
 80049bc:	e055      	b.n	8004a6a <UART_SetConfig+0x22a>
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a77      	ldr	r2, [pc, #476]	; (8004ba0 <UART_SetConfig+0x360>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d106      	bne.n	80049d6 <UART_SetConfig+0x196>
 80049c8:	231b      	movs	r3, #27
 80049ca:	2218      	movs	r2, #24
 80049cc:	189b      	adds	r3, r3, r2
 80049ce:	19db      	adds	r3, r3, r7
 80049d0:	2200      	movs	r2, #0
 80049d2:	701a      	strb	r2, [r3, #0]
 80049d4:	e049      	b.n	8004a6a <UART_SetConfig+0x22a>
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a6b      	ldr	r2, [pc, #428]	; (8004b88 <UART_SetConfig+0x348>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d13e      	bne.n	8004a5e <UART_SetConfig+0x21e>
 80049e0:	4b6c      	ldr	r3, [pc, #432]	; (8004b94 <UART_SetConfig+0x354>)
 80049e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049e4:	23c0      	movs	r3, #192	; 0xc0
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	4013      	ands	r3, r2
 80049ea:	22c0      	movs	r2, #192	; 0xc0
 80049ec:	0112      	lsls	r2, r2, #4
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d027      	beq.n	8004a42 <UART_SetConfig+0x202>
 80049f2:	22c0      	movs	r2, #192	; 0xc0
 80049f4:	0112      	lsls	r2, r2, #4
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d82a      	bhi.n	8004a50 <UART_SetConfig+0x210>
 80049fa:	2280      	movs	r2, #128	; 0x80
 80049fc:	0112      	lsls	r2, r2, #4
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d011      	beq.n	8004a26 <UART_SetConfig+0x1e6>
 8004a02:	2280      	movs	r2, #128	; 0x80
 8004a04:	0112      	lsls	r2, r2, #4
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d822      	bhi.n	8004a50 <UART_SetConfig+0x210>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d004      	beq.n	8004a18 <UART_SetConfig+0x1d8>
 8004a0e:	2280      	movs	r2, #128	; 0x80
 8004a10:	00d2      	lsls	r2, r2, #3
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d00e      	beq.n	8004a34 <UART_SetConfig+0x1f4>
 8004a16:	e01b      	b.n	8004a50 <UART_SetConfig+0x210>
 8004a18:	231b      	movs	r3, #27
 8004a1a:	2218      	movs	r2, #24
 8004a1c:	189b      	adds	r3, r3, r2
 8004a1e:	19db      	adds	r3, r3, r7
 8004a20:	2200      	movs	r2, #0
 8004a22:	701a      	strb	r2, [r3, #0]
 8004a24:	e021      	b.n	8004a6a <UART_SetConfig+0x22a>
 8004a26:	231b      	movs	r3, #27
 8004a28:	2218      	movs	r2, #24
 8004a2a:	189b      	adds	r3, r3, r2
 8004a2c:	19db      	adds	r3, r3, r7
 8004a2e:	2202      	movs	r2, #2
 8004a30:	701a      	strb	r2, [r3, #0]
 8004a32:	e01a      	b.n	8004a6a <UART_SetConfig+0x22a>
 8004a34:	231b      	movs	r3, #27
 8004a36:	2218      	movs	r2, #24
 8004a38:	189b      	adds	r3, r3, r2
 8004a3a:	19db      	adds	r3, r3, r7
 8004a3c:	2204      	movs	r2, #4
 8004a3e:	701a      	strb	r2, [r3, #0]
 8004a40:	e013      	b.n	8004a6a <UART_SetConfig+0x22a>
 8004a42:	231b      	movs	r3, #27
 8004a44:	2218      	movs	r2, #24
 8004a46:	189b      	adds	r3, r3, r2
 8004a48:	19db      	adds	r3, r3, r7
 8004a4a:	2208      	movs	r2, #8
 8004a4c:	701a      	strb	r2, [r3, #0]
 8004a4e:	e00c      	b.n	8004a6a <UART_SetConfig+0x22a>
 8004a50:	231b      	movs	r3, #27
 8004a52:	2218      	movs	r2, #24
 8004a54:	189b      	adds	r3, r3, r2
 8004a56:	19db      	adds	r3, r3, r7
 8004a58:	2210      	movs	r2, #16
 8004a5a:	701a      	strb	r2, [r3, #0]
 8004a5c:	e005      	b.n	8004a6a <UART_SetConfig+0x22a>
 8004a5e:	231b      	movs	r3, #27
 8004a60:	2218      	movs	r2, #24
 8004a62:	189b      	adds	r3, r3, r2
 8004a64:	19db      	adds	r3, r3, r7
 8004a66:	2210      	movs	r2, #16
 8004a68:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a46      	ldr	r2, [pc, #280]	; (8004b88 <UART_SetConfig+0x348>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d000      	beq.n	8004a76 <UART_SetConfig+0x236>
 8004a74:	e09a      	b.n	8004bac <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a76:	231b      	movs	r3, #27
 8004a78:	2218      	movs	r2, #24
 8004a7a:	189b      	adds	r3, r3, r2
 8004a7c:	19db      	adds	r3, r3, r7
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d01d      	beq.n	8004ac0 <UART_SetConfig+0x280>
 8004a84:	dc20      	bgt.n	8004ac8 <UART_SetConfig+0x288>
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d015      	beq.n	8004ab6 <UART_SetConfig+0x276>
 8004a8a:	dc1d      	bgt.n	8004ac8 <UART_SetConfig+0x288>
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <UART_SetConfig+0x256>
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d005      	beq.n	8004aa0 <UART_SetConfig+0x260>
 8004a94:	e018      	b.n	8004ac8 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a96:	f7fe fd89 	bl	80035ac <HAL_RCC_GetPCLK1Freq>
 8004a9a:	0003      	movs	r3, r0
 8004a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a9e:	e01c      	b.n	8004ada <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004aa0:	4b3c      	ldr	r3, [pc, #240]	; (8004b94 <UART_SetConfig+0x354>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2210      	movs	r2, #16
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	d002      	beq.n	8004ab0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004aaa:	4b3e      	ldr	r3, [pc, #248]	; (8004ba4 <UART_SetConfig+0x364>)
 8004aac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004aae:	e014      	b.n	8004ada <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8004ab0:	4b3d      	ldr	r3, [pc, #244]	; (8004ba8 <UART_SetConfig+0x368>)
 8004ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ab4:	e011      	b.n	8004ada <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ab6:	f7fe fcc9 	bl	800344c <HAL_RCC_GetSysClockFreq>
 8004aba:	0003      	movs	r3, r0
 8004abc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004abe:	e00c      	b.n	8004ada <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ac0:	2380      	movs	r3, #128	; 0x80
 8004ac2:	021b      	lsls	r3, r3, #8
 8004ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ac6:	e008      	b.n	8004ada <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004acc:	231a      	movs	r3, #26
 8004ace:	2218      	movs	r2, #24
 8004ad0:	189b      	adds	r3, r3, r2
 8004ad2:	19db      	adds	r3, r3, r7
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	701a      	strb	r2, [r3, #0]
        break;
 8004ad8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d100      	bne.n	8004ae2 <UART_SetConfig+0x2a2>
 8004ae0:	e134      	b.n	8004d4c <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	0013      	movs	r3, r2
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	189b      	adds	r3, r3, r2
 8004aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d305      	bcc.n	8004afe <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d906      	bls.n	8004b0c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8004afe:	231a      	movs	r3, #26
 8004b00:	2218      	movs	r2, #24
 8004b02:	189b      	adds	r3, r3, r2
 8004b04:	19db      	adds	r3, r3, r7
 8004b06:	2201      	movs	r2, #1
 8004b08:	701a      	strb	r2, [r3, #0]
 8004b0a:	e11f      	b.n	8004d4c <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0e:	613b      	str	r3, [r7, #16]
 8004b10:	2300      	movs	r3, #0
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	6939      	ldr	r1, [r7, #16]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	000b      	movs	r3, r1
 8004b1a:	0e1b      	lsrs	r3, r3, #24
 8004b1c:	0010      	movs	r0, r2
 8004b1e:	0205      	lsls	r5, r0, #8
 8004b20:	431d      	orrs	r5, r3
 8004b22:	000b      	movs	r3, r1
 8004b24:	021c      	lsls	r4, r3, #8
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	085b      	lsrs	r3, r3, #1
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	68b8      	ldr	r0, [r7, #8]
 8004b34:	68f9      	ldr	r1, [r7, #12]
 8004b36:	1900      	adds	r0, r0, r4
 8004b38:	4169      	adcs	r1, r5
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	603b      	str	r3, [r7, #0]
 8004b40:	2300      	movs	r3, #0
 8004b42:	607b      	str	r3, [r7, #4]
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f7fb fc66 	bl	8000418 <__aeabi_uldivmod>
 8004b4c:	0002      	movs	r2, r0
 8004b4e:	000b      	movs	r3, r1
 8004b50:	0013      	movs	r3, r2
 8004b52:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b56:	23c0      	movs	r3, #192	; 0xc0
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d309      	bcc.n	8004b72 <UART_SetConfig+0x332>
 8004b5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b60:	2380      	movs	r3, #128	; 0x80
 8004b62:	035b      	lsls	r3, r3, #13
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d204      	bcs.n	8004b72 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004b68:	69fb      	ldr	r3, [r7, #28]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b6e:	60da      	str	r2, [r3, #12]
 8004b70:	e0ec      	b.n	8004d4c <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8004b72:	231a      	movs	r3, #26
 8004b74:	2218      	movs	r2, #24
 8004b76:	189b      	adds	r3, r3, r2
 8004b78:	19db      	adds	r3, r3, r7
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	701a      	strb	r2, [r3, #0]
 8004b7e:	e0e5      	b.n	8004d4c <UART_SetConfig+0x50c>
 8004b80:	efff69f3 	.word	0xefff69f3
 8004b84:	ffffcfff 	.word	0xffffcfff
 8004b88:	40004800 	.word	0x40004800
 8004b8c:	fffff4ff 	.word	0xfffff4ff
 8004b90:	40013800 	.word	0x40013800
 8004b94:	40021000 	.word	0x40021000
 8004b98:	40004400 	.word	0x40004400
 8004b9c:	40004c00 	.word	0x40004c00
 8004ba0:	40005000 	.word	0x40005000
 8004ba4:	003d0900 	.word	0x003d0900
 8004ba8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	69da      	ldr	r2, [r3, #28]
 8004bb0:	2380      	movs	r3, #128	; 0x80
 8004bb2:	021b      	lsls	r3, r3, #8
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d000      	beq.n	8004bba <UART_SetConfig+0x37a>
 8004bb8:	e071      	b.n	8004c9e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8004bba:	231b      	movs	r3, #27
 8004bbc:	2218      	movs	r2, #24
 8004bbe:	189b      	adds	r3, r3, r2
 8004bc0:	19db      	adds	r3, r3, r7
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d822      	bhi.n	8004c0e <UART_SetConfig+0x3ce>
 8004bc8:	009a      	lsls	r2, r3, #2
 8004bca:	4b68      	ldr	r3, [pc, #416]	; (8004d6c <UART_SetConfig+0x52c>)
 8004bcc:	18d3      	adds	r3, r2, r3
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bd2:	f7fe fceb 	bl	80035ac <HAL_RCC_GetPCLK1Freq>
 8004bd6:	0003      	movs	r3, r0
 8004bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004bda:	e021      	b.n	8004c20 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bdc:	f7fe fcfc 	bl	80035d8 <HAL_RCC_GetPCLK2Freq>
 8004be0:	0003      	movs	r3, r0
 8004be2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004be4:	e01c      	b.n	8004c20 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004be6:	4b62      	ldr	r3, [pc, #392]	; (8004d70 <UART_SetConfig+0x530>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2210      	movs	r2, #16
 8004bec:	4013      	ands	r3, r2
 8004bee:	d002      	beq.n	8004bf6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004bf0:	4b60      	ldr	r3, [pc, #384]	; (8004d74 <UART_SetConfig+0x534>)
 8004bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004bf4:	e014      	b.n	8004c20 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8004bf6:	4b60      	ldr	r3, [pc, #384]	; (8004d78 <UART_SetConfig+0x538>)
 8004bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004bfa:	e011      	b.n	8004c20 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bfc:	f7fe fc26 	bl	800344c <HAL_RCC_GetSysClockFreq>
 8004c00:	0003      	movs	r3, r0
 8004c02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c04:	e00c      	b.n	8004c20 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c06:	2380      	movs	r3, #128	; 0x80
 8004c08:	021b      	lsls	r3, r3, #8
 8004c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c0c:	e008      	b.n	8004c20 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004c12:	231a      	movs	r3, #26
 8004c14:	2218      	movs	r2, #24
 8004c16:	189b      	adds	r3, r3, r2
 8004c18:	19db      	adds	r3, r3, r7
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	701a      	strb	r2, [r3, #0]
        break;
 8004c1e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d100      	bne.n	8004c28 <UART_SetConfig+0x3e8>
 8004c26:	e091      	b.n	8004d4c <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2a:	005a      	lsls	r2, r3, #1
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	085b      	lsrs	r3, r3, #1
 8004c32:	18d2      	adds	r2, r2, r3
 8004c34:	69fb      	ldr	r3, [r7, #28]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	0019      	movs	r1, r3
 8004c3a:	0010      	movs	r0, r2
 8004c3c:	f7fb fa76 	bl	800012c <__udivsi3>
 8004c40:	0003      	movs	r3, r0
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c48:	2b0f      	cmp	r3, #15
 8004c4a:	d921      	bls.n	8004c90 <UART_SetConfig+0x450>
 8004c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c4e:	2380      	movs	r3, #128	; 0x80
 8004c50:	025b      	lsls	r3, r3, #9
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d21c      	bcs.n	8004c90 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	200e      	movs	r0, #14
 8004c5c:	2418      	movs	r4, #24
 8004c5e:	1903      	adds	r3, r0, r4
 8004c60:	19db      	adds	r3, r3, r7
 8004c62:	210f      	movs	r1, #15
 8004c64:	438a      	bics	r2, r1
 8004c66:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6a:	085b      	lsrs	r3, r3, #1
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2207      	movs	r2, #7
 8004c70:	4013      	ands	r3, r2
 8004c72:	b299      	uxth	r1, r3
 8004c74:	1903      	adds	r3, r0, r4
 8004c76:	19db      	adds	r3, r3, r7
 8004c78:	1902      	adds	r2, r0, r4
 8004c7a:	19d2      	adds	r2, r2, r7
 8004c7c:	8812      	ldrh	r2, [r2, #0]
 8004c7e:	430a      	orrs	r2, r1
 8004c80:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	1902      	adds	r2, r0, r4
 8004c88:	19d2      	adds	r2, r2, r7
 8004c8a:	8812      	ldrh	r2, [r2, #0]
 8004c8c:	60da      	str	r2, [r3, #12]
 8004c8e:	e05d      	b.n	8004d4c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c90:	231a      	movs	r3, #26
 8004c92:	2218      	movs	r2, #24
 8004c94:	189b      	adds	r3, r3, r2
 8004c96:	19db      	adds	r3, r3, r7
 8004c98:	2201      	movs	r2, #1
 8004c9a:	701a      	strb	r2, [r3, #0]
 8004c9c:	e056      	b.n	8004d4c <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c9e:	231b      	movs	r3, #27
 8004ca0:	2218      	movs	r2, #24
 8004ca2:	189b      	adds	r3, r3, r2
 8004ca4:	19db      	adds	r3, r3, r7
 8004ca6:	781b      	ldrb	r3, [r3, #0]
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d822      	bhi.n	8004cf2 <UART_SetConfig+0x4b2>
 8004cac:	009a      	lsls	r2, r3, #2
 8004cae:	4b33      	ldr	r3, [pc, #204]	; (8004d7c <UART_SetConfig+0x53c>)
 8004cb0:	18d3      	adds	r3, r2, r3
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cb6:	f7fe fc79 	bl	80035ac <HAL_RCC_GetPCLK1Freq>
 8004cba:	0003      	movs	r3, r0
 8004cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004cbe:	e021      	b.n	8004d04 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cc0:	f7fe fc8a 	bl	80035d8 <HAL_RCC_GetPCLK2Freq>
 8004cc4:	0003      	movs	r3, r0
 8004cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004cc8:	e01c      	b.n	8004d04 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cca:	4b29      	ldr	r3, [pc, #164]	; (8004d70 <UART_SetConfig+0x530>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2210      	movs	r2, #16
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	d002      	beq.n	8004cda <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004cd4:	4b27      	ldr	r3, [pc, #156]	; (8004d74 <UART_SetConfig+0x534>)
 8004cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004cd8:	e014      	b.n	8004d04 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 8004cda:	4b27      	ldr	r3, [pc, #156]	; (8004d78 <UART_SetConfig+0x538>)
 8004cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004cde:	e011      	b.n	8004d04 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ce0:	f7fe fbb4 	bl	800344c <HAL_RCC_GetSysClockFreq>
 8004ce4:	0003      	movs	r3, r0
 8004ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ce8:	e00c      	b.n	8004d04 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cea:	2380      	movs	r3, #128	; 0x80
 8004cec:	021b      	lsls	r3, r3, #8
 8004cee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004cf0:	e008      	b.n	8004d04 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004cf6:	231a      	movs	r3, #26
 8004cf8:	2218      	movs	r2, #24
 8004cfa:	189b      	adds	r3, r3, r2
 8004cfc:	19db      	adds	r3, r3, r7
 8004cfe:	2201      	movs	r2, #1
 8004d00:	701a      	strb	r2, [r3, #0]
        break;
 8004d02:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d020      	beq.n	8004d4c <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	085a      	lsrs	r2, r3, #1
 8004d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d12:	18d2      	adds	r2, r2, r3
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	0019      	movs	r1, r3
 8004d1a:	0010      	movs	r0, r2
 8004d1c:	f7fb fa06 	bl	800012c <__udivsi3>
 8004d20:	0003      	movs	r3, r0
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	2b0f      	cmp	r3, #15
 8004d2a:	d909      	bls.n	8004d40 <UART_SetConfig+0x500>
 8004d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d2e:	2380      	movs	r3, #128	; 0x80
 8004d30:	025b      	lsls	r3, r3, #9
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d204      	bcs.n	8004d40 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d3c:	60da      	str	r2, [r3, #12]
 8004d3e:	e005      	b.n	8004d4c <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d40:	231a      	movs	r3, #26
 8004d42:	2218      	movs	r2, #24
 8004d44:	189b      	adds	r3, r3, r2
 8004d46:	19db      	adds	r3, r3, r7
 8004d48:	2201      	movs	r2, #1
 8004d4a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	2200      	movs	r2, #0
 8004d56:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d58:	231a      	movs	r3, #26
 8004d5a:	2218      	movs	r2, #24
 8004d5c:	189b      	adds	r3, r3, r2
 8004d5e:	19db      	adds	r3, r3, r7
 8004d60:	781b      	ldrb	r3, [r3, #0]
}
 8004d62:	0018      	movs	r0, r3
 8004d64:	46bd      	mov	sp, r7
 8004d66:	b00e      	add	sp, #56	; 0x38
 8004d68:	bdb0      	pop	{r4, r5, r7, pc}
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	08005c60 	.word	0x08005c60
 8004d70:	40021000 	.word	0x40021000
 8004d74:	003d0900 	.word	0x003d0900
 8004d78:	00f42400 	.word	0x00f42400
 8004d7c:	08005c84 	.word	0x08005c84

08004d80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d00b      	beq.n	8004daa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	4a4a      	ldr	r2, [pc, #296]	; (8004ec4 <UART_AdvFeatureConfig+0x144>)
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	0019      	movs	r1, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	2202      	movs	r2, #2
 8004db0:	4013      	ands	r3, r2
 8004db2:	d00b      	beq.n	8004dcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	4a43      	ldr	r2, [pc, #268]	; (8004ec8 <UART_AdvFeatureConfig+0x148>)
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	0019      	movs	r1, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd0:	2204      	movs	r2, #4
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	d00b      	beq.n	8004dee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	4a3b      	ldr	r2, [pc, #236]	; (8004ecc <UART_AdvFeatureConfig+0x14c>)
 8004dde:	4013      	ands	r3, r2
 8004de0:	0019      	movs	r1, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	2208      	movs	r2, #8
 8004df4:	4013      	ands	r3, r2
 8004df6:	d00b      	beq.n	8004e10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	4a34      	ldr	r2, [pc, #208]	; (8004ed0 <UART_AdvFeatureConfig+0x150>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	0019      	movs	r1, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	2210      	movs	r2, #16
 8004e16:	4013      	ands	r3, r2
 8004e18:	d00b      	beq.n	8004e32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	4a2c      	ldr	r2, [pc, #176]	; (8004ed4 <UART_AdvFeatureConfig+0x154>)
 8004e22:	4013      	ands	r3, r2
 8004e24:	0019      	movs	r1, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	2220      	movs	r2, #32
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d00b      	beq.n	8004e54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	4a25      	ldr	r2, [pc, #148]	; (8004ed8 <UART_AdvFeatureConfig+0x158>)
 8004e44:	4013      	ands	r3, r2
 8004e46:	0019      	movs	r1, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e58:	2240      	movs	r2, #64	; 0x40
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	d01d      	beq.n	8004e9a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	4a1d      	ldr	r2, [pc, #116]	; (8004edc <UART_AdvFeatureConfig+0x15c>)
 8004e66:	4013      	ands	r3, r2
 8004e68:	0019      	movs	r1, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e7a:	2380      	movs	r3, #128	; 0x80
 8004e7c:	035b      	lsls	r3, r3, #13
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d10b      	bne.n	8004e9a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	4a15      	ldr	r2, [pc, #84]	; (8004ee0 <UART_AdvFeatureConfig+0x160>)
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	0019      	movs	r1, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	2280      	movs	r2, #128	; 0x80
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	d00b      	beq.n	8004ebc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	4a0e      	ldr	r2, [pc, #56]	; (8004ee4 <UART_AdvFeatureConfig+0x164>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	0019      	movs	r1, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	605a      	str	r2, [r3, #4]
  }
}
 8004ebc:	46c0      	nop			; (mov r8, r8)
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	b002      	add	sp, #8
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	fffdffff 	.word	0xfffdffff
 8004ec8:	fffeffff 	.word	0xfffeffff
 8004ecc:	fffbffff 	.word	0xfffbffff
 8004ed0:	ffff7fff 	.word	0xffff7fff
 8004ed4:	ffffefff 	.word	0xffffefff
 8004ed8:	ffffdfff 	.word	0xffffdfff
 8004edc:	ffefffff 	.word	0xffefffff
 8004ee0:	ff9fffff 	.word	0xff9fffff
 8004ee4:	fff7ffff 	.word	0xfff7ffff

08004ee8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af02      	add	r7, sp, #8
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2280      	movs	r2, #128	; 0x80
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ef8:	f7fc fcaa 	bl	8001850 <HAL_GetTick>
 8004efc:	0003      	movs	r3, r0
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2208      	movs	r2, #8
 8004f08:	4013      	ands	r3, r2
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d10c      	bne.n	8004f28 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2280      	movs	r2, #128	; 0x80
 8004f12:	0391      	lsls	r1, r2, #14
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	4a17      	ldr	r2, [pc, #92]	; (8004f74 <UART_CheckIdleState+0x8c>)
 8004f18:	9200      	str	r2, [sp, #0]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f000 f82c 	bl	8004f78 <UART_WaitOnFlagUntilTimeout>
 8004f20:	1e03      	subs	r3, r0, #0
 8004f22:	d001      	beq.n	8004f28 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e021      	b.n	8004f6c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2204      	movs	r2, #4
 8004f30:	4013      	ands	r3, r2
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d10c      	bne.n	8004f50 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2280      	movs	r2, #128	; 0x80
 8004f3a:	03d1      	lsls	r1, r2, #15
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	4a0d      	ldr	r2, [pc, #52]	; (8004f74 <UART_CheckIdleState+0x8c>)
 8004f40:	9200      	str	r2, [sp, #0]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f000 f818 	bl	8004f78 <UART_WaitOnFlagUntilTimeout>
 8004f48:	1e03      	subs	r3, r0, #0
 8004f4a:	d001      	beq.n	8004f50 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e00d      	b.n	8004f6c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2220      	movs	r2, #32
 8004f54:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2274      	movs	r2, #116	; 0x74
 8004f66:	2100      	movs	r1, #0
 8004f68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	0018      	movs	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	b004      	add	sp, #16
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	01ffffff 	.word	0x01ffffff

08004f78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b094      	sub	sp, #80	; 0x50
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	603b      	str	r3, [r7, #0]
 8004f84:	1dfb      	adds	r3, r7, #7
 8004f86:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f88:	e0a3      	b.n	80050d2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	d100      	bne.n	8004f92 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004f90:	e09f      	b.n	80050d2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f92:	f7fc fc5d 	bl	8001850 <HAL_GetTick>
 8004f96:	0002      	movs	r2, r0
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d302      	bcc.n	8004fa8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d13d      	bne.n	8005024 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fa8:	f3ef 8310 	mrs	r3, PRIMASK
 8004fac:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fb0:	647b      	str	r3, [r7, #68]	; 0x44
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb8:	f383 8810 	msr	PRIMASK, r3
}
 8004fbc:	46c0      	nop			; (mov r8, r8)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	494c      	ldr	r1, [pc, #304]	; (80050fc <UART_WaitOnFlagUntilTimeout+0x184>)
 8004fca:	400a      	ands	r2, r1
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fd0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd4:	f383 8810 	msr	PRIMASK, r3
}
 8004fd8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fda:	f3ef 8310 	mrs	r3, PRIMASK
 8004fde:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe2:	643b      	str	r3, [r7, #64]	; 0x40
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fea:	f383 8810 	msr	PRIMASK, r3
}
 8004fee:	46c0      	nop			; (mov r8, r8)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2101      	movs	r1, #1
 8004ffc:	438a      	bics	r2, r1
 8004ffe:	609a      	str	r2, [r3, #8]
 8005000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005002:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005006:	f383 8810 	msr	PRIMASK, r3
}
 800500a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2220      	movs	r2, #32
 8005010:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2220      	movs	r2, #32
 8005016:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2274      	movs	r2, #116	; 0x74
 800501c:	2100      	movs	r1, #0
 800501e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e067      	b.n	80050f4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2204      	movs	r2, #4
 800502c:	4013      	ands	r3, r2
 800502e:	d050      	beq.n	80050d2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	69da      	ldr	r2, [r3, #28]
 8005036:	2380      	movs	r3, #128	; 0x80
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	401a      	ands	r2, r3
 800503c:	2380      	movs	r3, #128	; 0x80
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	429a      	cmp	r2, r3
 8005042:	d146      	bne.n	80050d2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2280      	movs	r2, #128	; 0x80
 800504a:	0112      	lsls	r2, r2, #4
 800504c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800504e:	f3ef 8310 	mrs	r3, PRIMASK
 8005052:	613b      	str	r3, [r7, #16]
  return(result);
 8005054:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005056:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005058:	2301      	movs	r3, #1
 800505a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f383 8810 	msr	PRIMASK, r3
}
 8005062:	46c0      	nop			; (mov r8, r8)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4923      	ldr	r1, [pc, #140]	; (80050fc <UART_WaitOnFlagUntilTimeout+0x184>)
 8005070:	400a      	ands	r2, r1
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005076:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	f383 8810 	msr	PRIMASK, r3
}
 800507e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005080:	f3ef 8310 	mrs	r3, PRIMASK
 8005084:	61fb      	str	r3, [r7, #28]
  return(result);
 8005086:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005088:	64bb      	str	r3, [r7, #72]	; 0x48
 800508a:	2301      	movs	r3, #1
 800508c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	f383 8810 	msr	PRIMASK, r3
}
 8005094:	46c0      	nop			; (mov r8, r8)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689a      	ldr	r2, [r3, #8]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2101      	movs	r1, #1
 80050a2:	438a      	bics	r2, r1
 80050a4:	609a      	str	r2, [r3, #8]
 80050a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	f383 8810 	msr	PRIMASK, r3
}
 80050b0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2220      	movs	r2, #32
 80050b6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2220      	movs	r2, #32
 80050bc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2280      	movs	r2, #128	; 0x80
 80050c2:	2120      	movs	r1, #32
 80050c4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2274      	movs	r2, #116	; 0x74
 80050ca:	2100      	movs	r1, #0
 80050cc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e010      	b.n	80050f4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	4013      	ands	r3, r2
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	425a      	negs	r2, r3
 80050e2:	4153      	adcs	r3, r2
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	001a      	movs	r2, r3
 80050e8:	1dfb      	adds	r3, r7, #7
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d100      	bne.n	80050f2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80050f0:	e74b      	b.n	8004f8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	0018      	movs	r0, r3
 80050f6:	46bd      	mov	sp, r7
 80050f8:	b014      	add	sp, #80	; 0x50
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	fffffe5f 	.word	0xfffffe5f

08005100 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b08e      	sub	sp, #56	; 0x38
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005108:	f3ef 8310 	mrs	r3, PRIMASK
 800510c:	617b      	str	r3, [r7, #20]
  return(result);
 800510e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005110:	637b      	str	r3, [r7, #52]	; 0x34
 8005112:	2301      	movs	r3, #1
 8005114:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	f383 8810 	msr	PRIMASK, r3
}
 800511c:	46c0      	nop			; (mov r8, r8)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4925      	ldr	r1, [pc, #148]	; (80051c0 <UART_EndRxTransfer+0xc0>)
 800512a:	400a      	ands	r2, r1
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005130:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	f383 8810 	msr	PRIMASK, r3
}
 8005138:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800513a:	f3ef 8310 	mrs	r3, PRIMASK
 800513e:	623b      	str	r3, [r7, #32]
  return(result);
 8005140:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005142:	633b      	str	r3, [r7, #48]	; 0x30
 8005144:	2301      	movs	r3, #1
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514a:	f383 8810 	msr	PRIMASK, r3
}
 800514e:	46c0      	nop			; (mov r8, r8)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2101      	movs	r1, #1
 800515c:	438a      	bics	r2, r1
 800515e:	609a      	str	r2, [r3, #8]
 8005160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005162:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005166:	f383 8810 	msr	PRIMASK, r3
}
 800516a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005170:	2b01      	cmp	r3, #1
 8005172:	d118      	bne.n	80051a6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005174:	f3ef 8310 	mrs	r3, PRIMASK
 8005178:	60bb      	str	r3, [r7, #8]
  return(result);
 800517a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800517c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800517e:	2301      	movs	r3, #1
 8005180:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f383 8810 	msr	PRIMASK, r3
}
 8005188:	46c0      	nop			; (mov r8, r8)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2110      	movs	r1, #16
 8005196:	438a      	bics	r2, r1
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f383 8810 	msr	PRIMASK, r3
}
 80051a4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2220      	movs	r2, #32
 80051aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80051b8:	46c0      	nop			; (mov r8, r8)
 80051ba:	46bd      	mov	sp, r7
 80051bc:	b00e      	add	sp, #56	; 0x38
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	fffffedf 	.word	0xfffffedf

080051c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	225a      	movs	r2, #90	; 0x5a
 80051d6:	2100      	movs	r1, #0
 80051d8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2252      	movs	r2, #82	; 0x52
 80051de:	2100      	movs	r1, #0
 80051e0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	0018      	movs	r0, r3
 80051e6:	f7ff fb23 	bl	8004830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051ea:	46c0      	nop			; (mov r8, r8)
 80051ec:	46bd      	mov	sp, r7
 80051ee:	b004      	add	sp, #16
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b086      	sub	sp, #24
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051fa:	f3ef 8310 	mrs	r3, PRIMASK
 80051fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8005200:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	2301      	movs	r3, #1
 8005206:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f383 8810 	msr	PRIMASK, r3
}
 800520e:	46c0      	nop			; (mov r8, r8)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2140      	movs	r1, #64	; 0x40
 800521c:	438a      	bics	r2, r1
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f383 8810 	msr	PRIMASK, r3
}
 800522a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2220      	movs	r2, #32
 8005230:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	0018      	movs	r0, r3
 800523c:	f7ff faf0 	bl	8004820 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005240:	46c0      	nop			; (mov r8, r8)
 8005242:	46bd      	mov	sp, r7
 8005244:	b006      	add	sp, #24
 8005246:	bd80      	pop	{r7, pc}

08005248 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005250:	46c0      	nop			; (mov r8, r8)
 8005252:	46bd      	mov	sp, r7
 8005254:	b002      	add	sp, #8
 8005256:	bd80      	pop	{r7, pc}

08005258 <__errno>:
 8005258:	4b01      	ldr	r3, [pc, #4]	; (8005260 <__errno+0x8>)
 800525a:	6818      	ldr	r0, [r3, #0]
 800525c:	4770      	bx	lr
 800525e:	46c0      	nop			; (mov r8, r8)
 8005260:	200000f8 	.word	0x200000f8

08005264 <__libc_init_array>:
 8005264:	b570      	push	{r4, r5, r6, lr}
 8005266:	2600      	movs	r6, #0
 8005268:	4d0c      	ldr	r5, [pc, #48]	; (800529c <__libc_init_array+0x38>)
 800526a:	4c0d      	ldr	r4, [pc, #52]	; (80052a0 <__libc_init_array+0x3c>)
 800526c:	1b64      	subs	r4, r4, r5
 800526e:	10a4      	asrs	r4, r4, #2
 8005270:	42a6      	cmp	r6, r4
 8005272:	d109      	bne.n	8005288 <__libc_init_array+0x24>
 8005274:	2600      	movs	r6, #0
 8005276:	f000 fc8b 	bl	8005b90 <_init>
 800527a:	4d0a      	ldr	r5, [pc, #40]	; (80052a4 <__libc_init_array+0x40>)
 800527c:	4c0a      	ldr	r4, [pc, #40]	; (80052a8 <__libc_init_array+0x44>)
 800527e:	1b64      	subs	r4, r4, r5
 8005280:	10a4      	asrs	r4, r4, #2
 8005282:	42a6      	cmp	r6, r4
 8005284:	d105      	bne.n	8005292 <__libc_init_array+0x2e>
 8005286:	bd70      	pop	{r4, r5, r6, pc}
 8005288:	00b3      	lsls	r3, r6, #2
 800528a:	58eb      	ldr	r3, [r5, r3]
 800528c:	4798      	blx	r3
 800528e:	3601      	adds	r6, #1
 8005290:	e7ee      	b.n	8005270 <__libc_init_array+0xc>
 8005292:	00b3      	lsls	r3, r6, #2
 8005294:	58eb      	ldr	r3, [r5, r3]
 8005296:	4798      	blx	r3
 8005298:	3601      	adds	r6, #1
 800529a:	e7f2      	b.n	8005282 <__libc_init_array+0x1e>
 800529c:	08005ce4 	.word	0x08005ce4
 80052a0:	08005ce4 	.word	0x08005ce4
 80052a4:	08005ce4 	.word	0x08005ce4
 80052a8:	08005ce8 	.word	0x08005ce8

080052ac <memcpy>:
 80052ac:	2300      	movs	r3, #0
 80052ae:	b510      	push	{r4, lr}
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d100      	bne.n	80052b6 <memcpy+0xa>
 80052b4:	bd10      	pop	{r4, pc}
 80052b6:	5ccc      	ldrb	r4, [r1, r3]
 80052b8:	54c4      	strb	r4, [r0, r3]
 80052ba:	3301      	adds	r3, #1
 80052bc:	e7f8      	b.n	80052b0 <memcpy+0x4>

080052be <memset>:
 80052be:	0003      	movs	r3, r0
 80052c0:	1882      	adds	r2, r0, r2
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d100      	bne.n	80052c8 <memset+0xa>
 80052c6:	4770      	bx	lr
 80052c8:	7019      	strb	r1, [r3, #0]
 80052ca:	3301      	adds	r3, #1
 80052cc:	e7f9      	b.n	80052c2 <memset+0x4>
	...

080052d0 <siprintf>:
 80052d0:	b40e      	push	{r1, r2, r3}
 80052d2:	b500      	push	{lr}
 80052d4:	490b      	ldr	r1, [pc, #44]	; (8005304 <siprintf+0x34>)
 80052d6:	b09c      	sub	sp, #112	; 0x70
 80052d8:	ab1d      	add	r3, sp, #116	; 0x74
 80052da:	9002      	str	r0, [sp, #8]
 80052dc:	9006      	str	r0, [sp, #24]
 80052de:	9107      	str	r1, [sp, #28]
 80052e0:	9104      	str	r1, [sp, #16]
 80052e2:	4809      	ldr	r0, [pc, #36]	; (8005308 <siprintf+0x38>)
 80052e4:	4909      	ldr	r1, [pc, #36]	; (800530c <siprintf+0x3c>)
 80052e6:	cb04      	ldmia	r3!, {r2}
 80052e8:	9105      	str	r1, [sp, #20]
 80052ea:	6800      	ldr	r0, [r0, #0]
 80052ec:	a902      	add	r1, sp, #8
 80052ee:	9301      	str	r3, [sp, #4]
 80052f0:	f000 f870 	bl	80053d4 <_svfiprintf_r>
 80052f4:	2300      	movs	r3, #0
 80052f6:	9a02      	ldr	r2, [sp, #8]
 80052f8:	7013      	strb	r3, [r2, #0]
 80052fa:	b01c      	add	sp, #112	; 0x70
 80052fc:	bc08      	pop	{r3}
 80052fe:	b003      	add	sp, #12
 8005300:	4718      	bx	r3
 8005302:	46c0      	nop			; (mov r8, r8)
 8005304:	7fffffff 	.word	0x7fffffff
 8005308:	200000f8 	.word	0x200000f8
 800530c:	ffff0208 	.word	0xffff0208

08005310 <__ssputs_r>:
 8005310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005312:	688e      	ldr	r6, [r1, #8]
 8005314:	b085      	sub	sp, #20
 8005316:	0007      	movs	r7, r0
 8005318:	000c      	movs	r4, r1
 800531a:	9203      	str	r2, [sp, #12]
 800531c:	9301      	str	r3, [sp, #4]
 800531e:	429e      	cmp	r6, r3
 8005320:	d83c      	bhi.n	800539c <__ssputs_r+0x8c>
 8005322:	2390      	movs	r3, #144	; 0x90
 8005324:	898a      	ldrh	r2, [r1, #12]
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	421a      	tst	r2, r3
 800532a:	d034      	beq.n	8005396 <__ssputs_r+0x86>
 800532c:	6909      	ldr	r1, [r1, #16]
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	6960      	ldr	r0, [r4, #20]
 8005332:	1a5b      	subs	r3, r3, r1
 8005334:	9302      	str	r3, [sp, #8]
 8005336:	2303      	movs	r3, #3
 8005338:	4343      	muls	r3, r0
 800533a:	0fdd      	lsrs	r5, r3, #31
 800533c:	18ed      	adds	r5, r5, r3
 800533e:	9b01      	ldr	r3, [sp, #4]
 8005340:	9802      	ldr	r0, [sp, #8]
 8005342:	3301      	adds	r3, #1
 8005344:	181b      	adds	r3, r3, r0
 8005346:	106d      	asrs	r5, r5, #1
 8005348:	42ab      	cmp	r3, r5
 800534a:	d900      	bls.n	800534e <__ssputs_r+0x3e>
 800534c:	001d      	movs	r5, r3
 800534e:	0553      	lsls	r3, r2, #21
 8005350:	d532      	bpl.n	80053b8 <__ssputs_r+0xa8>
 8005352:	0029      	movs	r1, r5
 8005354:	0038      	movs	r0, r7
 8005356:	f000 fb49 	bl	80059ec <_malloc_r>
 800535a:	1e06      	subs	r6, r0, #0
 800535c:	d109      	bne.n	8005372 <__ssputs_r+0x62>
 800535e:	230c      	movs	r3, #12
 8005360:	603b      	str	r3, [r7, #0]
 8005362:	2340      	movs	r3, #64	; 0x40
 8005364:	2001      	movs	r0, #1
 8005366:	89a2      	ldrh	r2, [r4, #12]
 8005368:	4240      	negs	r0, r0
 800536a:	4313      	orrs	r3, r2
 800536c:	81a3      	strh	r3, [r4, #12]
 800536e:	b005      	add	sp, #20
 8005370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005372:	9a02      	ldr	r2, [sp, #8]
 8005374:	6921      	ldr	r1, [r4, #16]
 8005376:	f7ff ff99 	bl	80052ac <memcpy>
 800537a:	89a3      	ldrh	r3, [r4, #12]
 800537c:	4a14      	ldr	r2, [pc, #80]	; (80053d0 <__ssputs_r+0xc0>)
 800537e:	401a      	ands	r2, r3
 8005380:	2380      	movs	r3, #128	; 0x80
 8005382:	4313      	orrs	r3, r2
 8005384:	81a3      	strh	r3, [r4, #12]
 8005386:	9b02      	ldr	r3, [sp, #8]
 8005388:	6126      	str	r6, [r4, #16]
 800538a:	18f6      	adds	r6, r6, r3
 800538c:	6026      	str	r6, [r4, #0]
 800538e:	6165      	str	r5, [r4, #20]
 8005390:	9e01      	ldr	r6, [sp, #4]
 8005392:	1aed      	subs	r5, r5, r3
 8005394:	60a5      	str	r5, [r4, #8]
 8005396:	9b01      	ldr	r3, [sp, #4]
 8005398:	429e      	cmp	r6, r3
 800539a:	d900      	bls.n	800539e <__ssputs_r+0x8e>
 800539c:	9e01      	ldr	r6, [sp, #4]
 800539e:	0032      	movs	r2, r6
 80053a0:	9903      	ldr	r1, [sp, #12]
 80053a2:	6820      	ldr	r0, [r4, #0]
 80053a4:	f000 faa3 	bl	80058ee <memmove>
 80053a8:	68a3      	ldr	r3, [r4, #8]
 80053aa:	2000      	movs	r0, #0
 80053ac:	1b9b      	subs	r3, r3, r6
 80053ae:	60a3      	str	r3, [r4, #8]
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	199e      	adds	r6, r3, r6
 80053b4:	6026      	str	r6, [r4, #0]
 80053b6:	e7da      	b.n	800536e <__ssputs_r+0x5e>
 80053b8:	002a      	movs	r2, r5
 80053ba:	0038      	movs	r0, r7
 80053bc:	f000 fb8c 	bl	8005ad8 <_realloc_r>
 80053c0:	1e06      	subs	r6, r0, #0
 80053c2:	d1e0      	bne.n	8005386 <__ssputs_r+0x76>
 80053c4:	0038      	movs	r0, r7
 80053c6:	6921      	ldr	r1, [r4, #16]
 80053c8:	f000 faa4 	bl	8005914 <_free_r>
 80053cc:	e7c7      	b.n	800535e <__ssputs_r+0x4e>
 80053ce:	46c0      	nop			; (mov r8, r8)
 80053d0:	fffffb7f 	.word	0xfffffb7f

080053d4 <_svfiprintf_r>:
 80053d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053d6:	b0a1      	sub	sp, #132	; 0x84
 80053d8:	9003      	str	r0, [sp, #12]
 80053da:	001d      	movs	r5, r3
 80053dc:	898b      	ldrh	r3, [r1, #12]
 80053de:	000f      	movs	r7, r1
 80053e0:	0016      	movs	r6, r2
 80053e2:	061b      	lsls	r3, r3, #24
 80053e4:	d511      	bpl.n	800540a <_svfiprintf_r+0x36>
 80053e6:	690b      	ldr	r3, [r1, #16]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10e      	bne.n	800540a <_svfiprintf_r+0x36>
 80053ec:	2140      	movs	r1, #64	; 0x40
 80053ee:	f000 fafd 	bl	80059ec <_malloc_r>
 80053f2:	6038      	str	r0, [r7, #0]
 80053f4:	6138      	str	r0, [r7, #16]
 80053f6:	2800      	cmp	r0, #0
 80053f8:	d105      	bne.n	8005406 <_svfiprintf_r+0x32>
 80053fa:	230c      	movs	r3, #12
 80053fc:	9a03      	ldr	r2, [sp, #12]
 80053fe:	3801      	subs	r0, #1
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	b021      	add	sp, #132	; 0x84
 8005404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005406:	2340      	movs	r3, #64	; 0x40
 8005408:	617b      	str	r3, [r7, #20]
 800540a:	2300      	movs	r3, #0
 800540c:	ac08      	add	r4, sp, #32
 800540e:	6163      	str	r3, [r4, #20]
 8005410:	3320      	adds	r3, #32
 8005412:	7663      	strb	r3, [r4, #25]
 8005414:	3310      	adds	r3, #16
 8005416:	76a3      	strb	r3, [r4, #26]
 8005418:	9507      	str	r5, [sp, #28]
 800541a:	0035      	movs	r5, r6
 800541c:	782b      	ldrb	r3, [r5, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <_svfiprintf_r+0x52>
 8005422:	2b25      	cmp	r3, #37	; 0x25
 8005424:	d147      	bne.n	80054b6 <_svfiprintf_r+0xe2>
 8005426:	1bab      	subs	r3, r5, r6
 8005428:	9305      	str	r3, [sp, #20]
 800542a:	42b5      	cmp	r5, r6
 800542c:	d00c      	beq.n	8005448 <_svfiprintf_r+0x74>
 800542e:	0032      	movs	r2, r6
 8005430:	0039      	movs	r1, r7
 8005432:	9803      	ldr	r0, [sp, #12]
 8005434:	f7ff ff6c 	bl	8005310 <__ssputs_r>
 8005438:	1c43      	adds	r3, r0, #1
 800543a:	d100      	bne.n	800543e <_svfiprintf_r+0x6a>
 800543c:	e0ae      	b.n	800559c <_svfiprintf_r+0x1c8>
 800543e:	6962      	ldr	r2, [r4, #20]
 8005440:	9b05      	ldr	r3, [sp, #20]
 8005442:	4694      	mov	ip, r2
 8005444:	4463      	add	r3, ip
 8005446:	6163      	str	r3, [r4, #20]
 8005448:	782b      	ldrb	r3, [r5, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d100      	bne.n	8005450 <_svfiprintf_r+0x7c>
 800544e:	e0a5      	b.n	800559c <_svfiprintf_r+0x1c8>
 8005450:	2201      	movs	r2, #1
 8005452:	2300      	movs	r3, #0
 8005454:	4252      	negs	r2, r2
 8005456:	6062      	str	r2, [r4, #4]
 8005458:	a904      	add	r1, sp, #16
 800545a:	3254      	adds	r2, #84	; 0x54
 800545c:	1852      	adds	r2, r2, r1
 800545e:	1c6e      	adds	r6, r5, #1
 8005460:	6023      	str	r3, [r4, #0]
 8005462:	60e3      	str	r3, [r4, #12]
 8005464:	60a3      	str	r3, [r4, #8]
 8005466:	7013      	strb	r3, [r2, #0]
 8005468:	65a3      	str	r3, [r4, #88]	; 0x58
 800546a:	2205      	movs	r2, #5
 800546c:	7831      	ldrb	r1, [r6, #0]
 800546e:	4854      	ldr	r0, [pc, #336]	; (80055c0 <_svfiprintf_r+0x1ec>)
 8005470:	f000 fa32 	bl	80058d8 <memchr>
 8005474:	1c75      	adds	r5, r6, #1
 8005476:	2800      	cmp	r0, #0
 8005478:	d11f      	bne.n	80054ba <_svfiprintf_r+0xe6>
 800547a:	6822      	ldr	r2, [r4, #0]
 800547c:	06d3      	lsls	r3, r2, #27
 800547e:	d504      	bpl.n	800548a <_svfiprintf_r+0xb6>
 8005480:	2353      	movs	r3, #83	; 0x53
 8005482:	a904      	add	r1, sp, #16
 8005484:	185b      	adds	r3, r3, r1
 8005486:	2120      	movs	r1, #32
 8005488:	7019      	strb	r1, [r3, #0]
 800548a:	0713      	lsls	r3, r2, #28
 800548c:	d504      	bpl.n	8005498 <_svfiprintf_r+0xc4>
 800548e:	2353      	movs	r3, #83	; 0x53
 8005490:	a904      	add	r1, sp, #16
 8005492:	185b      	adds	r3, r3, r1
 8005494:	212b      	movs	r1, #43	; 0x2b
 8005496:	7019      	strb	r1, [r3, #0]
 8005498:	7833      	ldrb	r3, [r6, #0]
 800549a:	2b2a      	cmp	r3, #42	; 0x2a
 800549c:	d016      	beq.n	80054cc <_svfiprintf_r+0xf8>
 800549e:	0035      	movs	r5, r6
 80054a0:	2100      	movs	r1, #0
 80054a2:	200a      	movs	r0, #10
 80054a4:	68e3      	ldr	r3, [r4, #12]
 80054a6:	782a      	ldrb	r2, [r5, #0]
 80054a8:	1c6e      	adds	r6, r5, #1
 80054aa:	3a30      	subs	r2, #48	; 0x30
 80054ac:	2a09      	cmp	r2, #9
 80054ae:	d94e      	bls.n	800554e <_svfiprintf_r+0x17a>
 80054b0:	2900      	cmp	r1, #0
 80054b2:	d111      	bne.n	80054d8 <_svfiprintf_r+0x104>
 80054b4:	e017      	b.n	80054e6 <_svfiprintf_r+0x112>
 80054b6:	3501      	adds	r5, #1
 80054b8:	e7b0      	b.n	800541c <_svfiprintf_r+0x48>
 80054ba:	4b41      	ldr	r3, [pc, #260]	; (80055c0 <_svfiprintf_r+0x1ec>)
 80054bc:	6822      	ldr	r2, [r4, #0]
 80054be:	1ac0      	subs	r0, r0, r3
 80054c0:	2301      	movs	r3, #1
 80054c2:	4083      	lsls	r3, r0
 80054c4:	4313      	orrs	r3, r2
 80054c6:	002e      	movs	r6, r5
 80054c8:	6023      	str	r3, [r4, #0]
 80054ca:	e7ce      	b.n	800546a <_svfiprintf_r+0x96>
 80054cc:	9b07      	ldr	r3, [sp, #28]
 80054ce:	1d19      	adds	r1, r3, #4
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	9107      	str	r1, [sp, #28]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	db01      	blt.n	80054dc <_svfiprintf_r+0x108>
 80054d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80054da:	e004      	b.n	80054e6 <_svfiprintf_r+0x112>
 80054dc:	425b      	negs	r3, r3
 80054de:	60e3      	str	r3, [r4, #12]
 80054e0:	2302      	movs	r3, #2
 80054e2:	4313      	orrs	r3, r2
 80054e4:	6023      	str	r3, [r4, #0]
 80054e6:	782b      	ldrb	r3, [r5, #0]
 80054e8:	2b2e      	cmp	r3, #46	; 0x2e
 80054ea:	d10a      	bne.n	8005502 <_svfiprintf_r+0x12e>
 80054ec:	786b      	ldrb	r3, [r5, #1]
 80054ee:	2b2a      	cmp	r3, #42	; 0x2a
 80054f0:	d135      	bne.n	800555e <_svfiprintf_r+0x18a>
 80054f2:	9b07      	ldr	r3, [sp, #28]
 80054f4:	3502      	adds	r5, #2
 80054f6:	1d1a      	adds	r2, r3, #4
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	9207      	str	r2, [sp, #28]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	db2b      	blt.n	8005558 <_svfiprintf_r+0x184>
 8005500:	9309      	str	r3, [sp, #36]	; 0x24
 8005502:	4e30      	ldr	r6, [pc, #192]	; (80055c4 <_svfiprintf_r+0x1f0>)
 8005504:	2203      	movs	r2, #3
 8005506:	0030      	movs	r0, r6
 8005508:	7829      	ldrb	r1, [r5, #0]
 800550a:	f000 f9e5 	bl	80058d8 <memchr>
 800550e:	2800      	cmp	r0, #0
 8005510:	d006      	beq.n	8005520 <_svfiprintf_r+0x14c>
 8005512:	2340      	movs	r3, #64	; 0x40
 8005514:	1b80      	subs	r0, r0, r6
 8005516:	4083      	lsls	r3, r0
 8005518:	6822      	ldr	r2, [r4, #0]
 800551a:	3501      	adds	r5, #1
 800551c:	4313      	orrs	r3, r2
 800551e:	6023      	str	r3, [r4, #0]
 8005520:	7829      	ldrb	r1, [r5, #0]
 8005522:	2206      	movs	r2, #6
 8005524:	4828      	ldr	r0, [pc, #160]	; (80055c8 <_svfiprintf_r+0x1f4>)
 8005526:	1c6e      	adds	r6, r5, #1
 8005528:	7621      	strb	r1, [r4, #24]
 800552a:	f000 f9d5 	bl	80058d8 <memchr>
 800552e:	2800      	cmp	r0, #0
 8005530:	d03c      	beq.n	80055ac <_svfiprintf_r+0x1d8>
 8005532:	4b26      	ldr	r3, [pc, #152]	; (80055cc <_svfiprintf_r+0x1f8>)
 8005534:	2b00      	cmp	r3, #0
 8005536:	d125      	bne.n	8005584 <_svfiprintf_r+0x1b0>
 8005538:	2207      	movs	r2, #7
 800553a:	9b07      	ldr	r3, [sp, #28]
 800553c:	3307      	adds	r3, #7
 800553e:	4393      	bics	r3, r2
 8005540:	3308      	adds	r3, #8
 8005542:	9307      	str	r3, [sp, #28]
 8005544:	6963      	ldr	r3, [r4, #20]
 8005546:	9a04      	ldr	r2, [sp, #16]
 8005548:	189b      	adds	r3, r3, r2
 800554a:	6163      	str	r3, [r4, #20]
 800554c:	e765      	b.n	800541a <_svfiprintf_r+0x46>
 800554e:	4343      	muls	r3, r0
 8005550:	0035      	movs	r5, r6
 8005552:	2101      	movs	r1, #1
 8005554:	189b      	adds	r3, r3, r2
 8005556:	e7a6      	b.n	80054a6 <_svfiprintf_r+0xd2>
 8005558:	2301      	movs	r3, #1
 800555a:	425b      	negs	r3, r3
 800555c:	e7d0      	b.n	8005500 <_svfiprintf_r+0x12c>
 800555e:	2300      	movs	r3, #0
 8005560:	200a      	movs	r0, #10
 8005562:	001a      	movs	r2, r3
 8005564:	3501      	adds	r5, #1
 8005566:	6063      	str	r3, [r4, #4]
 8005568:	7829      	ldrb	r1, [r5, #0]
 800556a:	1c6e      	adds	r6, r5, #1
 800556c:	3930      	subs	r1, #48	; 0x30
 800556e:	2909      	cmp	r1, #9
 8005570:	d903      	bls.n	800557a <_svfiprintf_r+0x1a6>
 8005572:	2b00      	cmp	r3, #0
 8005574:	d0c5      	beq.n	8005502 <_svfiprintf_r+0x12e>
 8005576:	9209      	str	r2, [sp, #36]	; 0x24
 8005578:	e7c3      	b.n	8005502 <_svfiprintf_r+0x12e>
 800557a:	4342      	muls	r2, r0
 800557c:	0035      	movs	r5, r6
 800557e:	2301      	movs	r3, #1
 8005580:	1852      	adds	r2, r2, r1
 8005582:	e7f1      	b.n	8005568 <_svfiprintf_r+0x194>
 8005584:	ab07      	add	r3, sp, #28
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	003a      	movs	r2, r7
 800558a:	0021      	movs	r1, r4
 800558c:	4b10      	ldr	r3, [pc, #64]	; (80055d0 <_svfiprintf_r+0x1fc>)
 800558e:	9803      	ldr	r0, [sp, #12]
 8005590:	e000      	b.n	8005594 <_svfiprintf_r+0x1c0>
 8005592:	bf00      	nop
 8005594:	9004      	str	r0, [sp, #16]
 8005596:	9b04      	ldr	r3, [sp, #16]
 8005598:	3301      	adds	r3, #1
 800559a:	d1d3      	bne.n	8005544 <_svfiprintf_r+0x170>
 800559c:	89bb      	ldrh	r3, [r7, #12]
 800559e:	980d      	ldr	r0, [sp, #52]	; 0x34
 80055a0:	065b      	lsls	r3, r3, #25
 80055a2:	d400      	bmi.n	80055a6 <_svfiprintf_r+0x1d2>
 80055a4:	e72d      	b.n	8005402 <_svfiprintf_r+0x2e>
 80055a6:	2001      	movs	r0, #1
 80055a8:	4240      	negs	r0, r0
 80055aa:	e72a      	b.n	8005402 <_svfiprintf_r+0x2e>
 80055ac:	ab07      	add	r3, sp, #28
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	003a      	movs	r2, r7
 80055b2:	0021      	movs	r1, r4
 80055b4:	4b06      	ldr	r3, [pc, #24]	; (80055d0 <_svfiprintf_r+0x1fc>)
 80055b6:	9803      	ldr	r0, [sp, #12]
 80055b8:	f000 f87c 	bl	80056b4 <_printf_i>
 80055bc:	e7ea      	b.n	8005594 <_svfiprintf_r+0x1c0>
 80055be:	46c0      	nop			; (mov r8, r8)
 80055c0:	08005ca8 	.word	0x08005ca8
 80055c4:	08005cae 	.word	0x08005cae
 80055c8:	08005cb2 	.word	0x08005cb2
 80055cc:	00000000 	.word	0x00000000
 80055d0:	08005311 	.word	0x08005311

080055d4 <_printf_common>:
 80055d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055d6:	0015      	movs	r5, r2
 80055d8:	9301      	str	r3, [sp, #4]
 80055da:	688a      	ldr	r2, [r1, #8]
 80055dc:	690b      	ldr	r3, [r1, #16]
 80055de:	000c      	movs	r4, r1
 80055e0:	9000      	str	r0, [sp, #0]
 80055e2:	4293      	cmp	r3, r2
 80055e4:	da00      	bge.n	80055e8 <_printf_common+0x14>
 80055e6:	0013      	movs	r3, r2
 80055e8:	0022      	movs	r2, r4
 80055ea:	602b      	str	r3, [r5, #0]
 80055ec:	3243      	adds	r2, #67	; 0x43
 80055ee:	7812      	ldrb	r2, [r2, #0]
 80055f0:	2a00      	cmp	r2, #0
 80055f2:	d001      	beq.n	80055f8 <_printf_common+0x24>
 80055f4:	3301      	adds	r3, #1
 80055f6:	602b      	str	r3, [r5, #0]
 80055f8:	6823      	ldr	r3, [r4, #0]
 80055fa:	069b      	lsls	r3, r3, #26
 80055fc:	d502      	bpl.n	8005604 <_printf_common+0x30>
 80055fe:	682b      	ldr	r3, [r5, #0]
 8005600:	3302      	adds	r3, #2
 8005602:	602b      	str	r3, [r5, #0]
 8005604:	6822      	ldr	r2, [r4, #0]
 8005606:	2306      	movs	r3, #6
 8005608:	0017      	movs	r7, r2
 800560a:	401f      	ands	r7, r3
 800560c:	421a      	tst	r2, r3
 800560e:	d027      	beq.n	8005660 <_printf_common+0x8c>
 8005610:	0023      	movs	r3, r4
 8005612:	3343      	adds	r3, #67	; 0x43
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	1e5a      	subs	r2, r3, #1
 8005618:	4193      	sbcs	r3, r2
 800561a:	6822      	ldr	r2, [r4, #0]
 800561c:	0692      	lsls	r2, r2, #26
 800561e:	d430      	bmi.n	8005682 <_printf_common+0xae>
 8005620:	0022      	movs	r2, r4
 8005622:	9901      	ldr	r1, [sp, #4]
 8005624:	9800      	ldr	r0, [sp, #0]
 8005626:	9e08      	ldr	r6, [sp, #32]
 8005628:	3243      	adds	r2, #67	; 0x43
 800562a:	47b0      	blx	r6
 800562c:	1c43      	adds	r3, r0, #1
 800562e:	d025      	beq.n	800567c <_printf_common+0xa8>
 8005630:	2306      	movs	r3, #6
 8005632:	6820      	ldr	r0, [r4, #0]
 8005634:	682a      	ldr	r2, [r5, #0]
 8005636:	68e1      	ldr	r1, [r4, #12]
 8005638:	2500      	movs	r5, #0
 800563a:	4003      	ands	r3, r0
 800563c:	2b04      	cmp	r3, #4
 800563e:	d103      	bne.n	8005648 <_printf_common+0x74>
 8005640:	1a8d      	subs	r5, r1, r2
 8005642:	43eb      	mvns	r3, r5
 8005644:	17db      	asrs	r3, r3, #31
 8005646:	401d      	ands	r5, r3
 8005648:	68a3      	ldr	r3, [r4, #8]
 800564a:	6922      	ldr	r2, [r4, #16]
 800564c:	4293      	cmp	r3, r2
 800564e:	dd01      	ble.n	8005654 <_printf_common+0x80>
 8005650:	1a9b      	subs	r3, r3, r2
 8005652:	18ed      	adds	r5, r5, r3
 8005654:	2700      	movs	r7, #0
 8005656:	42bd      	cmp	r5, r7
 8005658:	d120      	bne.n	800569c <_printf_common+0xc8>
 800565a:	2000      	movs	r0, #0
 800565c:	e010      	b.n	8005680 <_printf_common+0xac>
 800565e:	3701      	adds	r7, #1
 8005660:	68e3      	ldr	r3, [r4, #12]
 8005662:	682a      	ldr	r2, [r5, #0]
 8005664:	1a9b      	subs	r3, r3, r2
 8005666:	42bb      	cmp	r3, r7
 8005668:	ddd2      	ble.n	8005610 <_printf_common+0x3c>
 800566a:	0022      	movs	r2, r4
 800566c:	2301      	movs	r3, #1
 800566e:	9901      	ldr	r1, [sp, #4]
 8005670:	9800      	ldr	r0, [sp, #0]
 8005672:	9e08      	ldr	r6, [sp, #32]
 8005674:	3219      	adds	r2, #25
 8005676:	47b0      	blx	r6
 8005678:	1c43      	adds	r3, r0, #1
 800567a:	d1f0      	bne.n	800565e <_printf_common+0x8a>
 800567c:	2001      	movs	r0, #1
 800567e:	4240      	negs	r0, r0
 8005680:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005682:	2030      	movs	r0, #48	; 0x30
 8005684:	18e1      	adds	r1, r4, r3
 8005686:	3143      	adds	r1, #67	; 0x43
 8005688:	7008      	strb	r0, [r1, #0]
 800568a:	0021      	movs	r1, r4
 800568c:	1c5a      	adds	r2, r3, #1
 800568e:	3145      	adds	r1, #69	; 0x45
 8005690:	7809      	ldrb	r1, [r1, #0]
 8005692:	18a2      	adds	r2, r4, r2
 8005694:	3243      	adds	r2, #67	; 0x43
 8005696:	3302      	adds	r3, #2
 8005698:	7011      	strb	r1, [r2, #0]
 800569a:	e7c1      	b.n	8005620 <_printf_common+0x4c>
 800569c:	0022      	movs	r2, r4
 800569e:	2301      	movs	r3, #1
 80056a0:	9901      	ldr	r1, [sp, #4]
 80056a2:	9800      	ldr	r0, [sp, #0]
 80056a4:	9e08      	ldr	r6, [sp, #32]
 80056a6:	321a      	adds	r2, #26
 80056a8:	47b0      	blx	r6
 80056aa:	1c43      	adds	r3, r0, #1
 80056ac:	d0e6      	beq.n	800567c <_printf_common+0xa8>
 80056ae:	3701      	adds	r7, #1
 80056b0:	e7d1      	b.n	8005656 <_printf_common+0x82>
	...

080056b4 <_printf_i>:
 80056b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056b6:	b08b      	sub	sp, #44	; 0x2c
 80056b8:	9206      	str	r2, [sp, #24]
 80056ba:	000a      	movs	r2, r1
 80056bc:	3243      	adds	r2, #67	; 0x43
 80056be:	9307      	str	r3, [sp, #28]
 80056c0:	9005      	str	r0, [sp, #20]
 80056c2:	9204      	str	r2, [sp, #16]
 80056c4:	7e0a      	ldrb	r2, [r1, #24]
 80056c6:	000c      	movs	r4, r1
 80056c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80056ca:	2a78      	cmp	r2, #120	; 0x78
 80056cc:	d807      	bhi.n	80056de <_printf_i+0x2a>
 80056ce:	2a62      	cmp	r2, #98	; 0x62
 80056d0:	d809      	bhi.n	80056e6 <_printf_i+0x32>
 80056d2:	2a00      	cmp	r2, #0
 80056d4:	d100      	bne.n	80056d8 <_printf_i+0x24>
 80056d6:	e0c1      	b.n	800585c <_printf_i+0x1a8>
 80056d8:	2a58      	cmp	r2, #88	; 0x58
 80056da:	d100      	bne.n	80056de <_printf_i+0x2a>
 80056dc:	e08c      	b.n	80057f8 <_printf_i+0x144>
 80056de:	0026      	movs	r6, r4
 80056e0:	3642      	adds	r6, #66	; 0x42
 80056e2:	7032      	strb	r2, [r6, #0]
 80056e4:	e022      	b.n	800572c <_printf_i+0x78>
 80056e6:	0010      	movs	r0, r2
 80056e8:	3863      	subs	r0, #99	; 0x63
 80056ea:	2815      	cmp	r0, #21
 80056ec:	d8f7      	bhi.n	80056de <_printf_i+0x2a>
 80056ee:	f7fa fd13 	bl	8000118 <__gnu_thumb1_case_shi>
 80056f2:	0016      	.short	0x0016
 80056f4:	fff6001f 	.word	0xfff6001f
 80056f8:	fff6fff6 	.word	0xfff6fff6
 80056fc:	001ffff6 	.word	0x001ffff6
 8005700:	fff6fff6 	.word	0xfff6fff6
 8005704:	fff6fff6 	.word	0xfff6fff6
 8005708:	003600a8 	.word	0x003600a8
 800570c:	fff6009a 	.word	0xfff6009a
 8005710:	00b9fff6 	.word	0x00b9fff6
 8005714:	0036fff6 	.word	0x0036fff6
 8005718:	fff6fff6 	.word	0xfff6fff6
 800571c:	009e      	.short	0x009e
 800571e:	0026      	movs	r6, r4
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	3642      	adds	r6, #66	; 0x42
 8005724:	1d11      	adds	r1, r2, #4
 8005726:	6019      	str	r1, [r3, #0]
 8005728:	6813      	ldr	r3, [r2, #0]
 800572a:	7033      	strb	r3, [r6, #0]
 800572c:	2301      	movs	r3, #1
 800572e:	e0a7      	b.n	8005880 <_printf_i+0x1cc>
 8005730:	6808      	ldr	r0, [r1, #0]
 8005732:	6819      	ldr	r1, [r3, #0]
 8005734:	1d0a      	adds	r2, r1, #4
 8005736:	0605      	lsls	r5, r0, #24
 8005738:	d50b      	bpl.n	8005752 <_printf_i+0x9e>
 800573a:	680d      	ldr	r5, [r1, #0]
 800573c:	601a      	str	r2, [r3, #0]
 800573e:	2d00      	cmp	r5, #0
 8005740:	da03      	bge.n	800574a <_printf_i+0x96>
 8005742:	232d      	movs	r3, #45	; 0x2d
 8005744:	9a04      	ldr	r2, [sp, #16]
 8005746:	426d      	negs	r5, r5
 8005748:	7013      	strb	r3, [r2, #0]
 800574a:	4b61      	ldr	r3, [pc, #388]	; (80058d0 <_printf_i+0x21c>)
 800574c:	270a      	movs	r7, #10
 800574e:	9303      	str	r3, [sp, #12]
 8005750:	e01b      	b.n	800578a <_printf_i+0xd6>
 8005752:	680d      	ldr	r5, [r1, #0]
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	0641      	lsls	r1, r0, #25
 8005758:	d5f1      	bpl.n	800573e <_printf_i+0x8a>
 800575a:	b22d      	sxth	r5, r5
 800575c:	e7ef      	b.n	800573e <_printf_i+0x8a>
 800575e:	680d      	ldr	r5, [r1, #0]
 8005760:	6819      	ldr	r1, [r3, #0]
 8005762:	1d08      	adds	r0, r1, #4
 8005764:	6018      	str	r0, [r3, #0]
 8005766:	062e      	lsls	r6, r5, #24
 8005768:	d501      	bpl.n	800576e <_printf_i+0xba>
 800576a:	680d      	ldr	r5, [r1, #0]
 800576c:	e003      	b.n	8005776 <_printf_i+0xc2>
 800576e:	066d      	lsls	r5, r5, #25
 8005770:	d5fb      	bpl.n	800576a <_printf_i+0xb6>
 8005772:	680d      	ldr	r5, [r1, #0]
 8005774:	b2ad      	uxth	r5, r5
 8005776:	4b56      	ldr	r3, [pc, #344]	; (80058d0 <_printf_i+0x21c>)
 8005778:	2708      	movs	r7, #8
 800577a:	9303      	str	r3, [sp, #12]
 800577c:	2a6f      	cmp	r2, #111	; 0x6f
 800577e:	d000      	beq.n	8005782 <_printf_i+0xce>
 8005780:	3702      	adds	r7, #2
 8005782:	0023      	movs	r3, r4
 8005784:	2200      	movs	r2, #0
 8005786:	3343      	adds	r3, #67	; 0x43
 8005788:	701a      	strb	r2, [r3, #0]
 800578a:	6863      	ldr	r3, [r4, #4]
 800578c:	60a3      	str	r3, [r4, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	db03      	blt.n	800579a <_printf_i+0xe6>
 8005792:	2204      	movs	r2, #4
 8005794:	6821      	ldr	r1, [r4, #0]
 8005796:	4391      	bics	r1, r2
 8005798:	6021      	str	r1, [r4, #0]
 800579a:	2d00      	cmp	r5, #0
 800579c:	d102      	bne.n	80057a4 <_printf_i+0xf0>
 800579e:	9e04      	ldr	r6, [sp, #16]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00c      	beq.n	80057be <_printf_i+0x10a>
 80057a4:	9e04      	ldr	r6, [sp, #16]
 80057a6:	0028      	movs	r0, r5
 80057a8:	0039      	movs	r1, r7
 80057aa:	f7fa fd45 	bl	8000238 <__aeabi_uidivmod>
 80057ae:	9b03      	ldr	r3, [sp, #12]
 80057b0:	3e01      	subs	r6, #1
 80057b2:	5c5b      	ldrb	r3, [r3, r1]
 80057b4:	7033      	strb	r3, [r6, #0]
 80057b6:	002b      	movs	r3, r5
 80057b8:	0005      	movs	r5, r0
 80057ba:	429f      	cmp	r7, r3
 80057bc:	d9f3      	bls.n	80057a6 <_printf_i+0xf2>
 80057be:	2f08      	cmp	r7, #8
 80057c0:	d109      	bne.n	80057d6 <_printf_i+0x122>
 80057c2:	6823      	ldr	r3, [r4, #0]
 80057c4:	07db      	lsls	r3, r3, #31
 80057c6:	d506      	bpl.n	80057d6 <_printf_i+0x122>
 80057c8:	6863      	ldr	r3, [r4, #4]
 80057ca:	6922      	ldr	r2, [r4, #16]
 80057cc:	4293      	cmp	r3, r2
 80057ce:	dc02      	bgt.n	80057d6 <_printf_i+0x122>
 80057d0:	2330      	movs	r3, #48	; 0x30
 80057d2:	3e01      	subs	r6, #1
 80057d4:	7033      	strb	r3, [r6, #0]
 80057d6:	9b04      	ldr	r3, [sp, #16]
 80057d8:	1b9b      	subs	r3, r3, r6
 80057da:	6123      	str	r3, [r4, #16]
 80057dc:	9b07      	ldr	r3, [sp, #28]
 80057de:	0021      	movs	r1, r4
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	9805      	ldr	r0, [sp, #20]
 80057e4:	9b06      	ldr	r3, [sp, #24]
 80057e6:	aa09      	add	r2, sp, #36	; 0x24
 80057e8:	f7ff fef4 	bl	80055d4 <_printf_common>
 80057ec:	1c43      	adds	r3, r0, #1
 80057ee:	d14c      	bne.n	800588a <_printf_i+0x1d6>
 80057f0:	2001      	movs	r0, #1
 80057f2:	4240      	negs	r0, r0
 80057f4:	b00b      	add	sp, #44	; 0x2c
 80057f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057f8:	3145      	adds	r1, #69	; 0x45
 80057fa:	700a      	strb	r2, [r1, #0]
 80057fc:	4a34      	ldr	r2, [pc, #208]	; (80058d0 <_printf_i+0x21c>)
 80057fe:	9203      	str	r2, [sp, #12]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	6821      	ldr	r1, [r4, #0]
 8005804:	ca20      	ldmia	r2!, {r5}
 8005806:	601a      	str	r2, [r3, #0]
 8005808:	0608      	lsls	r0, r1, #24
 800580a:	d516      	bpl.n	800583a <_printf_i+0x186>
 800580c:	07cb      	lsls	r3, r1, #31
 800580e:	d502      	bpl.n	8005816 <_printf_i+0x162>
 8005810:	2320      	movs	r3, #32
 8005812:	4319      	orrs	r1, r3
 8005814:	6021      	str	r1, [r4, #0]
 8005816:	2710      	movs	r7, #16
 8005818:	2d00      	cmp	r5, #0
 800581a:	d1b2      	bne.n	8005782 <_printf_i+0xce>
 800581c:	2320      	movs	r3, #32
 800581e:	6822      	ldr	r2, [r4, #0]
 8005820:	439a      	bics	r2, r3
 8005822:	6022      	str	r2, [r4, #0]
 8005824:	e7ad      	b.n	8005782 <_printf_i+0xce>
 8005826:	2220      	movs	r2, #32
 8005828:	6809      	ldr	r1, [r1, #0]
 800582a:	430a      	orrs	r2, r1
 800582c:	6022      	str	r2, [r4, #0]
 800582e:	0022      	movs	r2, r4
 8005830:	2178      	movs	r1, #120	; 0x78
 8005832:	3245      	adds	r2, #69	; 0x45
 8005834:	7011      	strb	r1, [r2, #0]
 8005836:	4a27      	ldr	r2, [pc, #156]	; (80058d4 <_printf_i+0x220>)
 8005838:	e7e1      	b.n	80057fe <_printf_i+0x14a>
 800583a:	0648      	lsls	r0, r1, #25
 800583c:	d5e6      	bpl.n	800580c <_printf_i+0x158>
 800583e:	b2ad      	uxth	r5, r5
 8005840:	e7e4      	b.n	800580c <_printf_i+0x158>
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	680d      	ldr	r5, [r1, #0]
 8005846:	1d10      	adds	r0, r2, #4
 8005848:	6949      	ldr	r1, [r1, #20]
 800584a:	6018      	str	r0, [r3, #0]
 800584c:	6813      	ldr	r3, [r2, #0]
 800584e:	062e      	lsls	r6, r5, #24
 8005850:	d501      	bpl.n	8005856 <_printf_i+0x1a2>
 8005852:	6019      	str	r1, [r3, #0]
 8005854:	e002      	b.n	800585c <_printf_i+0x1a8>
 8005856:	066d      	lsls	r5, r5, #25
 8005858:	d5fb      	bpl.n	8005852 <_printf_i+0x19e>
 800585a:	8019      	strh	r1, [r3, #0]
 800585c:	2300      	movs	r3, #0
 800585e:	9e04      	ldr	r6, [sp, #16]
 8005860:	6123      	str	r3, [r4, #16]
 8005862:	e7bb      	b.n	80057dc <_printf_i+0x128>
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	1d11      	adds	r1, r2, #4
 8005868:	6019      	str	r1, [r3, #0]
 800586a:	6816      	ldr	r6, [r2, #0]
 800586c:	2100      	movs	r1, #0
 800586e:	0030      	movs	r0, r6
 8005870:	6862      	ldr	r2, [r4, #4]
 8005872:	f000 f831 	bl	80058d8 <memchr>
 8005876:	2800      	cmp	r0, #0
 8005878:	d001      	beq.n	800587e <_printf_i+0x1ca>
 800587a:	1b80      	subs	r0, r0, r6
 800587c:	6060      	str	r0, [r4, #4]
 800587e:	6863      	ldr	r3, [r4, #4]
 8005880:	6123      	str	r3, [r4, #16]
 8005882:	2300      	movs	r3, #0
 8005884:	9a04      	ldr	r2, [sp, #16]
 8005886:	7013      	strb	r3, [r2, #0]
 8005888:	e7a8      	b.n	80057dc <_printf_i+0x128>
 800588a:	6923      	ldr	r3, [r4, #16]
 800588c:	0032      	movs	r2, r6
 800588e:	9906      	ldr	r1, [sp, #24]
 8005890:	9805      	ldr	r0, [sp, #20]
 8005892:	9d07      	ldr	r5, [sp, #28]
 8005894:	47a8      	blx	r5
 8005896:	1c43      	adds	r3, r0, #1
 8005898:	d0aa      	beq.n	80057f0 <_printf_i+0x13c>
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	079b      	lsls	r3, r3, #30
 800589e:	d415      	bmi.n	80058cc <_printf_i+0x218>
 80058a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058a2:	68e0      	ldr	r0, [r4, #12]
 80058a4:	4298      	cmp	r0, r3
 80058a6:	daa5      	bge.n	80057f4 <_printf_i+0x140>
 80058a8:	0018      	movs	r0, r3
 80058aa:	e7a3      	b.n	80057f4 <_printf_i+0x140>
 80058ac:	0022      	movs	r2, r4
 80058ae:	2301      	movs	r3, #1
 80058b0:	9906      	ldr	r1, [sp, #24]
 80058b2:	9805      	ldr	r0, [sp, #20]
 80058b4:	9e07      	ldr	r6, [sp, #28]
 80058b6:	3219      	adds	r2, #25
 80058b8:	47b0      	blx	r6
 80058ba:	1c43      	adds	r3, r0, #1
 80058bc:	d098      	beq.n	80057f0 <_printf_i+0x13c>
 80058be:	3501      	adds	r5, #1
 80058c0:	68e3      	ldr	r3, [r4, #12]
 80058c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058c4:	1a9b      	subs	r3, r3, r2
 80058c6:	42ab      	cmp	r3, r5
 80058c8:	dcf0      	bgt.n	80058ac <_printf_i+0x1f8>
 80058ca:	e7e9      	b.n	80058a0 <_printf_i+0x1ec>
 80058cc:	2500      	movs	r5, #0
 80058ce:	e7f7      	b.n	80058c0 <_printf_i+0x20c>
 80058d0:	08005cb9 	.word	0x08005cb9
 80058d4:	08005cca 	.word	0x08005cca

080058d8 <memchr>:
 80058d8:	b2c9      	uxtb	r1, r1
 80058da:	1882      	adds	r2, r0, r2
 80058dc:	4290      	cmp	r0, r2
 80058de:	d101      	bne.n	80058e4 <memchr+0xc>
 80058e0:	2000      	movs	r0, #0
 80058e2:	4770      	bx	lr
 80058e4:	7803      	ldrb	r3, [r0, #0]
 80058e6:	428b      	cmp	r3, r1
 80058e8:	d0fb      	beq.n	80058e2 <memchr+0xa>
 80058ea:	3001      	adds	r0, #1
 80058ec:	e7f6      	b.n	80058dc <memchr+0x4>

080058ee <memmove>:
 80058ee:	b510      	push	{r4, lr}
 80058f0:	4288      	cmp	r0, r1
 80058f2:	d902      	bls.n	80058fa <memmove+0xc>
 80058f4:	188b      	adds	r3, r1, r2
 80058f6:	4298      	cmp	r0, r3
 80058f8:	d303      	bcc.n	8005902 <memmove+0x14>
 80058fa:	2300      	movs	r3, #0
 80058fc:	e007      	b.n	800590e <memmove+0x20>
 80058fe:	5c8b      	ldrb	r3, [r1, r2]
 8005900:	5483      	strb	r3, [r0, r2]
 8005902:	3a01      	subs	r2, #1
 8005904:	d2fb      	bcs.n	80058fe <memmove+0x10>
 8005906:	bd10      	pop	{r4, pc}
 8005908:	5ccc      	ldrb	r4, [r1, r3]
 800590a:	54c4      	strb	r4, [r0, r3]
 800590c:	3301      	adds	r3, #1
 800590e:	429a      	cmp	r2, r3
 8005910:	d1fa      	bne.n	8005908 <memmove+0x1a>
 8005912:	e7f8      	b.n	8005906 <memmove+0x18>

08005914 <_free_r>:
 8005914:	b570      	push	{r4, r5, r6, lr}
 8005916:	0005      	movs	r5, r0
 8005918:	2900      	cmp	r1, #0
 800591a:	d010      	beq.n	800593e <_free_r+0x2a>
 800591c:	1f0c      	subs	r4, r1, #4
 800591e:	6823      	ldr	r3, [r4, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	da00      	bge.n	8005926 <_free_r+0x12>
 8005924:	18e4      	adds	r4, r4, r3
 8005926:	0028      	movs	r0, r5
 8005928:	f000 f918 	bl	8005b5c <__malloc_lock>
 800592c:	4a1d      	ldr	r2, [pc, #116]	; (80059a4 <_free_r+0x90>)
 800592e:	6813      	ldr	r3, [r2, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d105      	bne.n	8005940 <_free_r+0x2c>
 8005934:	6063      	str	r3, [r4, #4]
 8005936:	6014      	str	r4, [r2, #0]
 8005938:	0028      	movs	r0, r5
 800593a:	f000 f917 	bl	8005b6c <__malloc_unlock>
 800593e:	bd70      	pop	{r4, r5, r6, pc}
 8005940:	42a3      	cmp	r3, r4
 8005942:	d908      	bls.n	8005956 <_free_r+0x42>
 8005944:	6821      	ldr	r1, [r4, #0]
 8005946:	1860      	adds	r0, r4, r1
 8005948:	4283      	cmp	r3, r0
 800594a:	d1f3      	bne.n	8005934 <_free_r+0x20>
 800594c:	6818      	ldr	r0, [r3, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	1841      	adds	r1, r0, r1
 8005952:	6021      	str	r1, [r4, #0]
 8005954:	e7ee      	b.n	8005934 <_free_r+0x20>
 8005956:	001a      	movs	r2, r3
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <_free_r+0x4e>
 800595e:	42a3      	cmp	r3, r4
 8005960:	d9f9      	bls.n	8005956 <_free_r+0x42>
 8005962:	6811      	ldr	r1, [r2, #0]
 8005964:	1850      	adds	r0, r2, r1
 8005966:	42a0      	cmp	r0, r4
 8005968:	d10b      	bne.n	8005982 <_free_r+0x6e>
 800596a:	6820      	ldr	r0, [r4, #0]
 800596c:	1809      	adds	r1, r1, r0
 800596e:	1850      	adds	r0, r2, r1
 8005970:	6011      	str	r1, [r2, #0]
 8005972:	4283      	cmp	r3, r0
 8005974:	d1e0      	bne.n	8005938 <_free_r+0x24>
 8005976:	6818      	ldr	r0, [r3, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	1841      	adds	r1, r0, r1
 800597c:	6011      	str	r1, [r2, #0]
 800597e:	6053      	str	r3, [r2, #4]
 8005980:	e7da      	b.n	8005938 <_free_r+0x24>
 8005982:	42a0      	cmp	r0, r4
 8005984:	d902      	bls.n	800598c <_free_r+0x78>
 8005986:	230c      	movs	r3, #12
 8005988:	602b      	str	r3, [r5, #0]
 800598a:	e7d5      	b.n	8005938 <_free_r+0x24>
 800598c:	6821      	ldr	r1, [r4, #0]
 800598e:	1860      	adds	r0, r4, r1
 8005990:	4283      	cmp	r3, r0
 8005992:	d103      	bne.n	800599c <_free_r+0x88>
 8005994:	6818      	ldr	r0, [r3, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	1841      	adds	r1, r0, r1
 800599a:	6021      	str	r1, [r4, #0]
 800599c:	6063      	str	r3, [r4, #4]
 800599e:	6054      	str	r4, [r2, #4]
 80059a0:	e7ca      	b.n	8005938 <_free_r+0x24>
 80059a2:	46c0      	nop			; (mov r8, r8)
 80059a4:	2000048c 	.word	0x2000048c

080059a8 <sbrk_aligned>:
 80059a8:	b570      	push	{r4, r5, r6, lr}
 80059aa:	4e0f      	ldr	r6, [pc, #60]	; (80059e8 <sbrk_aligned+0x40>)
 80059ac:	000d      	movs	r5, r1
 80059ae:	6831      	ldr	r1, [r6, #0]
 80059b0:	0004      	movs	r4, r0
 80059b2:	2900      	cmp	r1, #0
 80059b4:	d102      	bne.n	80059bc <sbrk_aligned+0x14>
 80059b6:	f000 f8bf 	bl	8005b38 <_sbrk_r>
 80059ba:	6030      	str	r0, [r6, #0]
 80059bc:	0029      	movs	r1, r5
 80059be:	0020      	movs	r0, r4
 80059c0:	f000 f8ba 	bl	8005b38 <_sbrk_r>
 80059c4:	1c43      	adds	r3, r0, #1
 80059c6:	d00a      	beq.n	80059de <sbrk_aligned+0x36>
 80059c8:	2303      	movs	r3, #3
 80059ca:	1cc5      	adds	r5, r0, #3
 80059cc:	439d      	bics	r5, r3
 80059ce:	42a8      	cmp	r0, r5
 80059d0:	d007      	beq.n	80059e2 <sbrk_aligned+0x3a>
 80059d2:	1a29      	subs	r1, r5, r0
 80059d4:	0020      	movs	r0, r4
 80059d6:	f000 f8af 	bl	8005b38 <_sbrk_r>
 80059da:	1c43      	adds	r3, r0, #1
 80059dc:	d101      	bne.n	80059e2 <sbrk_aligned+0x3a>
 80059de:	2501      	movs	r5, #1
 80059e0:	426d      	negs	r5, r5
 80059e2:	0028      	movs	r0, r5
 80059e4:	bd70      	pop	{r4, r5, r6, pc}
 80059e6:	46c0      	nop			; (mov r8, r8)
 80059e8:	20000490 	.word	0x20000490

080059ec <_malloc_r>:
 80059ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059ee:	2203      	movs	r2, #3
 80059f0:	1ccb      	adds	r3, r1, #3
 80059f2:	4393      	bics	r3, r2
 80059f4:	3308      	adds	r3, #8
 80059f6:	0006      	movs	r6, r0
 80059f8:	001f      	movs	r7, r3
 80059fa:	2b0c      	cmp	r3, #12
 80059fc:	d232      	bcs.n	8005a64 <_malloc_r+0x78>
 80059fe:	270c      	movs	r7, #12
 8005a00:	42b9      	cmp	r1, r7
 8005a02:	d831      	bhi.n	8005a68 <_malloc_r+0x7c>
 8005a04:	0030      	movs	r0, r6
 8005a06:	f000 f8a9 	bl	8005b5c <__malloc_lock>
 8005a0a:	4d32      	ldr	r5, [pc, #200]	; (8005ad4 <_malloc_r+0xe8>)
 8005a0c:	682b      	ldr	r3, [r5, #0]
 8005a0e:	001c      	movs	r4, r3
 8005a10:	2c00      	cmp	r4, #0
 8005a12:	d12e      	bne.n	8005a72 <_malloc_r+0x86>
 8005a14:	0039      	movs	r1, r7
 8005a16:	0030      	movs	r0, r6
 8005a18:	f7ff ffc6 	bl	80059a8 <sbrk_aligned>
 8005a1c:	0004      	movs	r4, r0
 8005a1e:	1c43      	adds	r3, r0, #1
 8005a20:	d11e      	bne.n	8005a60 <_malloc_r+0x74>
 8005a22:	682c      	ldr	r4, [r5, #0]
 8005a24:	0025      	movs	r5, r4
 8005a26:	2d00      	cmp	r5, #0
 8005a28:	d14a      	bne.n	8005ac0 <_malloc_r+0xd4>
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	0029      	movs	r1, r5
 8005a2e:	18e3      	adds	r3, r4, r3
 8005a30:	0030      	movs	r0, r6
 8005a32:	9301      	str	r3, [sp, #4]
 8005a34:	f000 f880 	bl	8005b38 <_sbrk_r>
 8005a38:	9b01      	ldr	r3, [sp, #4]
 8005a3a:	4283      	cmp	r3, r0
 8005a3c:	d143      	bne.n	8005ac6 <_malloc_r+0xda>
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	3703      	adds	r7, #3
 8005a42:	1aff      	subs	r7, r7, r3
 8005a44:	2303      	movs	r3, #3
 8005a46:	439f      	bics	r7, r3
 8005a48:	3708      	adds	r7, #8
 8005a4a:	2f0c      	cmp	r7, #12
 8005a4c:	d200      	bcs.n	8005a50 <_malloc_r+0x64>
 8005a4e:	270c      	movs	r7, #12
 8005a50:	0039      	movs	r1, r7
 8005a52:	0030      	movs	r0, r6
 8005a54:	f7ff ffa8 	bl	80059a8 <sbrk_aligned>
 8005a58:	1c43      	adds	r3, r0, #1
 8005a5a:	d034      	beq.n	8005ac6 <_malloc_r+0xda>
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	19df      	adds	r7, r3, r7
 8005a60:	6027      	str	r7, [r4, #0]
 8005a62:	e013      	b.n	8005a8c <_malloc_r+0xa0>
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	dacb      	bge.n	8005a00 <_malloc_r+0x14>
 8005a68:	230c      	movs	r3, #12
 8005a6a:	2500      	movs	r5, #0
 8005a6c:	6033      	str	r3, [r6, #0]
 8005a6e:	0028      	movs	r0, r5
 8005a70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a72:	6822      	ldr	r2, [r4, #0]
 8005a74:	1bd1      	subs	r1, r2, r7
 8005a76:	d420      	bmi.n	8005aba <_malloc_r+0xce>
 8005a78:	290b      	cmp	r1, #11
 8005a7a:	d917      	bls.n	8005aac <_malloc_r+0xc0>
 8005a7c:	19e2      	adds	r2, r4, r7
 8005a7e:	6027      	str	r7, [r4, #0]
 8005a80:	42a3      	cmp	r3, r4
 8005a82:	d111      	bne.n	8005aa8 <_malloc_r+0xbc>
 8005a84:	602a      	str	r2, [r5, #0]
 8005a86:	6863      	ldr	r3, [r4, #4]
 8005a88:	6011      	str	r1, [r2, #0]
 8005a8a:	6053      	str	r3, [r2, #4]
 8005a8c:	0030      	movs	r0, r6
 8005a8e:	0025      	movs	r5, r4
 8005a90:	f000 f86c 	bl	8005b6c <__malloc_unlock>
 8005a94:	2207      	movs	r2, #7
 8005a96:	350b      	adds	r5, #11
 8005a98:	1d23      	adds	r3, r4, #4
 8005a9a:	4395      	bics	r5, r2
 8005a9c:	1aea      	subs	r2, r5, r3
 8005a9e:	429d      	cmp	r5, r3
 8005aa0:	d0e5      	beq.n	8005a6e <_malloc_r+0x82>
 8005aa2:	1b5b      	subs	r3, r3, r5
 8005aa4:	50a3      	str	r3, [r4, r2]
 8005aa6:	e7e2      	b.n	8005a6e <_malloc_r+0x82>
 8005aa8:	605a      	str	r2, [r3, #4]
 8005aaa:	e7ec      	b.n	8005a86 <_malloc_r+0x9a>
 8005aac:	6862      	ldr	r2, [r4, #4]
 8005aae:	42a3      	cmp	r3, r4
 8005ab0:	d101      	bne.n	8005ab6 <_malloc_r+0xca>
 8005ab2:	602a      	str	r2, [r5, #0]
 8005ab4:	e7ea      	b.n	8005a8c <_malloc_r+0xa0>
 8005ab6:	605a      	str	r2, [r3, #4]
 8005ab8:	e7e8      	b.n	8005a8c <_malloc_r+0xa0>
 8005aba:	0023      	movs	r3, r4
 8005abc:	6864      	ldr	r4, [r4, #4]
 8005abe:	e7a7      	b.n	8005a10 <_malloc_r+0x24>
 8005ac0:	002c      	movs	r4, r5
 8005ac2:	686d      	ldr	r5, [r5, #4]
 8005ac4:	e7af      	b.n	8005a26 <_malloc_r+0x3a>
 8005ac6:	230c      	movs	r3, #12
 8005ac8:	0030      	movs	r0, r6
 8005aca:	6033      	str	r3, [r6, #0]
 8005acc:	f000 f84e 	bl	8005b6c <__malloc_unlock>
 8005ad0:	e7cd      	b.n	8005a6e <_malloc_r+0x82>
 8005ad2:	46c0      	nop			; (mov r8, r8)
 8005ad4:	2000048c 	.word	0x2000048c

08005ad8 <_realloc_r>:
 8005ad8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ada:	0007      	movs	r7, r0
 8005adc:	000e      	movs	r6, r1
 8005ade:	0014      	movs	r4, r2
 8005ae0:	2900      	cmp	r1, #0
 8005ae2:	d105      	bne.n	8005af0 <_realloc_r+0x18>
 8005ae4:	0011      	movs	r1, r2
 8005ae6:	f7ff ff81 	bl	80059ec <_malloc_r>
 8005aea:	0005      	movs	r5, r0
 8005aec:	0028      	movs	r0, r5
 8005aee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005af0:	2a00      	cmp	r2, #0
 8005af2:	d103      	bne.n	8005afc <_realloc_r+0x24>
 8005af4:	f7ff ff0e 	bl	8005914 <_free_r>
 8005af8:	0025      	movs	r5, r4
 8005afa:	e7f7      	b.n	8005aec <_realloc_r+0x14>
 8005afc:	f000 f83e 	bl	8005b7c <_malloc_usable_size_r>
 8005b00:	9001      	str	r0, [sp, #4]
 8005b02:	4284      	cmp	r4, r0
 8005b04:	d803      	bhi.n	8005b0e <_realloc_r+0x36>
 8005b06:	0035      	movs	r5, r6
 8005b08:	0843      	lsrs	r3, r0, #1
 8005b0a:	42a3      	cmp	r3, r4
 8005b0c:	d3ee      	bcc.n	8005aec <_realloc_r+0x14>
 8005b0e:	0021      	movs	r1, r4
 8005b10:	0038      	movs	r0, r7
 8005b12:	f7ff ff6b 	bl	80059ec <_malloc_r>
 8005b16:	1e05      	subs	r5, r0, #0
 8005b18:	d0e8      	beq.n	8005aec <_realloc_r+0x14>
 8005b1a:	9b01      	ldr	r3, [sp, #4]
 8005b1c:	0022      	movs	r2, r4
 8005b1e:	429c      	cmp	r4, r3
 8005b20:	d900      	bls.n	8005b24 <_realloc_r+0x4c>
 8005b22:	001a      	movs	r2, r3
 8005b24:	0031      	movs	r1, r6
 8005b26:	0028      	movs	r0, r5
 8005b28:	f7ff fbc0 	bl	80052ac <memcpy>
 8005b2c:	0031      	movs	r1, r6
 8005b2e:	0038      	movs	r0, r7
 8005b30:	f7ff fef0 	bl	8005914 <_free_r>
 8005b34:	e7da      	b.n	8005aec <_realloc_r+0x14>
	...

08005b38 <_sbrk_r>:
 8005b38:	2300      	movs	r3, #0
 8005b3a:	b570      	push	{r4, r5, r6, lr}
 8005b3c:	4d06      	ldr	r5, [pc, #24]	; (8005b58 <_sbrk_r+0x20>)
 8005b3e:	0004      	movs	r4, r0
 8005b40:	0008      	movs	r0, r1
 8005b42:	602b      	str	r3, [r5, #0]
 8005b44:	f7fb fdb8 	bl	80016b8 <_sbrk>
 8005b48:	1c43      	adds	r3, r0, #1
 8005b4a:	d103      	bne.n	8005b54 <_sbrk_r+0x1c>
 8005b4c:	682b      	ldr	r3, [r5, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d000      	beq.n	8005b54 <_sbrk_r+0x1c>
 8005b52:	6023      	str	r3, [r4, #0]
 8005b54:	bd70      	pop	{r4, r5, r6, pc}
 8005b56:	46c0      	nop			; (mov r8, r8)
 8005b58:	20000494 	.word	0x20000494

08005b5c <__malloc_lock>:
 8005b5c:	b510      	push	{r4, lr}
 8005b5e:	4802      	ldr	r0, [pc, #8]	; (8005b68 <__malloc_lock+0xc>)
 8005b60:	f000 f814 	bl	8005b8c <__retarget_lock_acquire_recursive>
 8005b64:	bd10      	pop	{r4, pc}
 8005b66:	46c0      	nop			; (mov r8, r8)
 8005b68:	20000498 	.word	0x20000498

08005b6c <__malloc_unlock>:
 8005b6c:	b510      	push	{r4, lr}
 8005b6e:	4802      	ldr	r0, [pc, #8]	; (8005b78 <__malloc_unlock+0xc>)
 8005b70:	f000 f80d 	bl	8005b8e <__retarget_lock_release_recursive>
 8005b74:	bd10      	pop	{r4, pc}
 8005b76:	46c0      	nop			; (mov r8, r8)
 8005b78:	20000498 	.word	0x20000498

08005b7c <_malloc_usable_size_r>:
 8005b7c:	1f0b      	subs	r3, r1, #4
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	1f18      	subs	r0, r3, #4
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	da01      	bge.n	8005b8a <_malloc_usable_size_r+0xe>
 8005b86:	580b      	ldr	r3, [r1, r0]
 8005b88:	18c0      	adds	r0, r0, r3
 8005b8a:	4770      	bx	lr

08005b8c <__retarget_lock_acquire_recursive>:
 8005b8c:	4770      	bx	lr

08005b8e <__retarget_lock_release_recursive>:
 8005b8e:	4770      	bx	lr

08005b90 <_init>:
 8005b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b92:	46c0      	nop			; (mov r8, r8)
 8005b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b96:	bc08      	pop	{r3}
 8005b98:	469e      	mov	lr, r3
 8005b9a:	4770      	bx	lr

08005b9c <_fini>:
 8005b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9e:	46c0      	nop			; (mov r8, r8)
 8005ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ba2:	bc08      	pop	{r3}
 8005ba4:	469e      	mov	lr, r3
 8005ba6:	4770      	bx	lr
