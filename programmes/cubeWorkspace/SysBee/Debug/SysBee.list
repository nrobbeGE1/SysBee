
SysBee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d90  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08002e50  08002e50  00012e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f50  08002f50  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f50  08002f50  00012f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f58  08002f58  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f58  08002f58  00012f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f5c  08002f5c  00012f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000000c  08002f6c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08002f6c  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d8d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019d2  00000000  00000000  00029dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  0002b798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006e8  00000000  00000000  0002bf18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013ab2  00000000  00000000  0002c600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a2dc  00000000  00000000  000400b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d781  00000000  00000000  0004a38e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c7b0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019e0  00000000  00000000  000c7b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002e38 	.word	0x08002e38

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002e38 	.word	0x08002e38

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4647      	mov	r7, r8
 8000276:	b580      	push	{r7, lr}
 8000278:	0007      	movs	r7, r0
 800027a:	4699      	mov	r9, r3
 800027c:	0c3b      	lsrs	r3, r7, #16
 800027e:	469c      	mov	ip, r3
 8000280:	0413      	lsls	r3, r2, #16
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0400      	lsls	r0, r0, #16
 800028c:	0c14      	lsrs	r4, r2, #16
 800028e:	0c00      	lsrs	r0, r0, #16
 8000290:	4345      	muls	r5, r0
 8000292:	434b      	muls	r3, r1
 8000294:	4360      	muls	r0, r4
 8000296:	4361      	muls	r1, r4
 8000298:	18c0      	adds	r0, r0, r3
 800029a:	0c2c      	lsrs	r4, r5, #16
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4372      	muls	r2, r6
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	4463      	add	r3, ip
 80002b6:	042d      	lsls	r5, r5, #16
 80002b8:	0c2d      	lsrs	r5, r5, #16
 80002ba:	18c9      	adds	r1, r1, r3
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	1889      	adds	r1, r1, r2
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8ba 	bl	8000464 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8b5 	bl	8000464 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	469b      	mov	fp, r3
 8000302:	d433      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000304:	465a      	mov	r2, fp
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83a      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e078      	b.n	8000410 <__udivmoddi4+0x144>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e075      	b.n	8000416 <__udivmoddi4+0x14a>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e028      	b.n	8000396 <__udivmoddi4+0xca>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	2320      	movs	r3, #32
 8000370:	1a9b      	subs	r3, r3, r2
 8000372:	4652      	mov	r2, sl
 8000374:	40da      	lsrs	r2, r3
 8000376:	4641      	mov	r1, r8
 8000378:	0013      	movs	r3, r2
 800037a:	464a      	mov	r2, r9
 800037c:	408a      	lsls	r2, r1
 800037e:	0017      	movs	r7, r2
 8000380:	4642      	mov	r2, r8
 8000382:	431f      	orrs	r7, r3
 8000384:	4653      	mov	r3, sl
 8000386:	4093      	lsls	r3, r2
 8000388:	001e      	movs	r6, r3
 800038a:	42af      	cmp	r7, r5
 800038c:	d9c4      	bls.n	8000318 <__udivmoddi4+0x4c>
 800038e:	2200      	movs	r2, #0
 8000390:	2300      	movs	r3, #0
 8000392:	9200      	str	r2, [sp, #0]
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	4643      	mov	r3, r8
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0d9      	beq.n	8000350 <__udivmoddi4+0x84>
 800039c:	07fb      	lsls	r3, r7, #31
 800039e:	0872      	lsrs	r2, r6, #1
 80003a0:	431a      	orrs	r2, r3
 80003a2:	4646      	mov	r6, r8
 80003a4:	087b      	lsrs	r3, r7, #1
 80003a6:	e00e      	b.n	80003c6 <__udivmoddi4+0xfa>
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	d101      	bne.n	80003b0 <__udivmoddi4+0xe4>
 80003ac:	42a2      	cmp	r2, r4
 80003ae:	d80c      	bhi.n	80003ca <__udivmoddi4+0xfe>
 80003b0:	1aa4      	subs	r4, r4, r2
 80003b2:	419d      	sbcs	r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	1924      	adds	r4, r4, r4
 80003b8:	416d      	adcs	r5, r5
 80003ba:	2100      	movs	r1, #0
 80003bc:	3e01      	subs	r6, #1
 80003be:	1824      	adds	r4, r4, r0
 80003c0:	414d      	adcs	r5, r1
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d006      	beq.n	80003d4 <__udivmoddi4+0x108>
 80003c6:	42ab      	cmp	r3, r5
 80003c8:	d9ee      	bls.n	80003a8 <__udivmoddi4+0xdc>
 80003ca:	3e01      	subs	r6, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2e00      	cmp	r6, #0
 80003d2:	d1f8      	bne.n	80003c6 <__udivmoddi4+0xfa>
 80003d4:	9800      	ldr	r0, [sp, #0]
 80003d6:	9901      	ldr	r1, [sp, #4]
 80003d8:	465b      	mov	r3, fp
 80003da:	1900      	adds	r0, r0, r4
 80003dc:	4169      	adcs	r1, r5
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db24      	blt.n	800042c <__udivmoddi4+0x160>
 80003e2:	002b      	movs	r3, r5
 80003e4:	465a      	mov	r2, fp
 80003e6:	4644      	mov	r4, r8
 80003e8:	40d3      	lsrs	r3, r2
 80003ea:	002a      	movs	r2, r5
 80003ec:	40e2      	lsrs	r2, r4
 80003ee:	001c      	movs	r4, r3
 80003f0:	465b      	mov	r3, fp
 80003f2:	0015      	movs	r5, r2
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db2a      	blt.n	800044e <__udivmoddi4+0x182>
 80003f8:	0026      	movs	r6, r4
 80003fa:	409e      	lsls	r6, r3
 80003fc:	0033      	movs	r3, r6
 80003fe:	0026      	movs	r6, r4
 8000400:	4647      	mov	r7, r8
 8000402:	40be      	lsls	r6, r7
 8000404:	0032      	movs	r2, r6
 8000406:	1a80      	subs	r0, r0, r2
 8000408:	4199      	sbcs	r1, r3
 800040a:	9000      	str	r0, [sp, #0]
 800040c:	9101      	str	r1, [sp, #4]
 800040e:	e79f      	b.n	8000350 <__udivmoddi4+0x84>
 8000410:	42a3      	cmp	r3, r4
 8000412:	d8bc      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000414:	e783      	b.n	800031e <__udivmoddi4+0x52>
 8000416:	4642      	mov	r2, r8
 8000418:	2320      	movs	r3, #32
 800041a:	2100      	movs	r1, #0
 800041c:	1a9b      	subs	r3, r3, r2
 800041e:	2200      	movs	r2, #0
 8000420:	9100      	str	r1, [sp, #0]
 8000422:	9201      	str	r2, [sp, #4]
 8000424:	2201      	movs	r2, #1
 8000426:	40da      	lsrs	r2, r3
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	e786      	b.n	800033a <__udivmoddi4+0x6e>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	4646      	mov	r6, r8
 8000436:	409a      	lsls	r2, r3
 8000438:	0023      	movs	r3, r4
 800043a:	40f3      	lsrs	r3, r6
 800043c:	4644      	mov	r4, r8
 800043e:	4313      	orrs	r3, r2
 8000440:	002a      	movs	r2, r5
 8000442:	40e2      	lsrs	r2, r4
 8000444:	001c      	movs	r4, r3
 8000446:	465b      	mov	r3, fp
 8000448:	0015      	movs	r5, r2
 800044a:	2b00      	cmp	r3, #0
 800044c:	dad4      	bge.n	80003f8 <__udivmoddi4+0x12c>
 800044e:	4642      	mov	r2, r8
 8000450:	002f      	movs	r7, r5
 8000452:	2320      	movs	r3, #32
 8000454:	0026      	movs	r6, r4
 8000456:	4097      	lsls	r7, r2
 8000458:	1a9b      	subs	r3, r3, r2
 800045a:	40de      	lsrs	r6, r3
 800045c:	003b      	movs	r3, r7
 800045e:	4333      	orrs	r3, r6
 8000460:	e7cd      	b.n	80003fe <__udivmoddi4+0x132>
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__clzdi2>:
 8000464:	b510      	push	{r4, lr}
 8000466:	2900      	cmp	r1, #0
 8000468:	d103      	bne.n	8000472 <__clzdi2+0xe>
 800046a:	f000 f807 	bl	800047c <__clzsi2>
 800046e:	3020      	adds	r0, #32
 8000470:	e002      	b.n	8000478 <__clzdi2+0x14>
 8000472:	0008      	movs	r0, r1
 8000474:	f000 f802 	bl	800047c <__clzsi2>
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__clzsi2>:
 800047c:	211c      	movs	r1, #28
 800047e:	2301      	movs	r3, #1
 8000480:	041b      	lsls	r3, r3, #16
 8000482:	4298      	cmp	r0, r3
 8000484:	d301      	bcc.n	800048a <__clzsi2+0xe>
 8000486:	0c00      	lsrs	r0, r0, #16
 8000488:	3910      	subs	r1, #16
 800048a:	0a1b      	lsrs	r3, r3, #8
 800048c:	4298      	cmp	r0, r3
 800048e:	d301      	bcc.n	8000494 <__clzsi2+0x18>
 8000490:	0a00      	lsrs	r0, r0, #8
 8000492:	3908      	subs	r1, #8
 8000494:	091b      	lsrs	r3, r3, #4
 8000496:	4298      	cmp	r0, r3
 8000498:	d301      	bcc.n	800049e <__clzsi2+0x22>
 800049a:	0900      	lsrs	r0, r0, #4
 800049c:	3904      	subs	r1, #4
 800049e:	a202      	add	r2, pc, #8	; (adr r2, 80004a8 <__clzsi2+0x2c>)
 80004a0:	5c10      	ldrb	r0, [r2, r0]
 80004a2:	1840      	adds	r0, r0, r1
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	02020304 	.word	0x02020304
 80004ac:	01010101 	.word	0x01010101
	...

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b087      	sub	sp, #28
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fbad 	bl	8000c1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f825 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 f8e1 	bl	800068c <MX_GPIO_Init>
  MX_DMA_Init();
 80004ca:	f000 f8c1 	bl	8000650 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004ce:	f000 f88b 	bl	80005e8 <MX_USART2_UART_Init>
  /*if (HAL_OK != HAL_UART_Transmit_DMA(&huart1, "\xF0\xF0\xF0\xF0", 4))     	// Fire Transmission DMA
  	{
  		Error_Handler();
  	}*/
  //*message = "Xbee - Test DMA RX TX...\r\n ";
  uint8_t aTextInfoStart[] = "\r\nXbEE - config...\r\n";
 80004d2:	003b      	movs	r3, r7
 80004d4:	4a0b      	ldr	r2, [pc, #44]	; (8000504 <main+0x4c>)
 80004d6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80004d8:	c313      	stmia	r3!, {r0, r1, r4}
 80004da:	ca03      	ldmia	r2!, {r0, r1}
 80004dc:	c303      	stmia	r3!, {r0, r1}
 80004de:	7812      	ldrb	r2, [r2, #0]
 80004e0:	701a      	strb	r2, [r3, #0]

  HAL_UART_Transmit(&huart2, aTextInfoStart, strlen(aTextInfoStart),HAL_MAX_DELAY);
 80004e2:	003b      	movs	r3, r7
 80004e4:	0018      	movs	r0, r3
 80004e6:	f7ff fe0f 	bl	8000108 <strlen>
 80004ea:	0003      	movs	r3, r0
 80004ec:	b29a      	uxth	r2, r3
 80004ee:	2301      	movs	r3, #1
 80004f0:	425b      	negs	r3, r3
 80004f2:	0039      	movs	r1, r7
 80004f4:	4804      	ldr	r0, [pc, #16]	; (8000508 <main+0x50>)
 80004f6:	f001 ff61 	bl	80023bc <HAL_UART_Transmit>
  if (XBEE_CMD_MODE_OK != XbeeConfig())
  {
	  Error_Handler();
  }*/
 // XbeeSendFrame();
  xbee_send_string("bla");
 80004fa:	4b04      	ldr	r3, [pc, #16]	; (800050c <main+0x54>)
 80004fc:	0018      	movs	r0, r3
 80004fe:	f000 fa73 	bl	80009e8 <xbee_send_string>
//  XbeeConfig();
//  HAL_Delay(3000);
//  lirexbee();

  while (1)
 8000502:	e7fe      	b.n	8000502 <main+0x4a>
 8000504:	08002e54 	.word	0x08002e54
 8000508:	20000028 	.word	0x20000028
 800050c:	08002e50 	.word	0x08002e50

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b09f      	sub	sp, #124	; 0x7c
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	2440      	movs	r4, #64	; 0x40
 8000518:	193b      	adds	r3, r7, r4
 800051a:	0018      	movs	r0, r3
 800051c:	2338      	movs	r3, #56	; 0x38
 800051e:	001a      	movs	r2, r3
 8000520:	2100      	movs	r1, #0
 8000522:	f002 fc80 	bl	8002e26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000526:	232c      	movs	r3, #44	; 0x2c
 8000528:	18fb      	adds	r3, r7, r3
 800052a:	0018      	movs	r0, r3
 800052c:	2314      	movs	r3, #20
 800052e:	001a      	movs	r2, r3
 8000530:	2100      	movs	r1, #0
 8000532:	f002 fc78 	bl	8002e26 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	0018      	movs	r0, r3
 800053a:	2328      	movs	r3, #40	; 0x28
 800053c:	001a      	movs	r2, r3
 800053e:	2100      	movs	r1, #0
 8000540:	f002 fc71 	bl	8002e26 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000544:	4b26      	ldr	r3, [pc, #152]	; (80005e0 <SystemClock_Config+0xd0>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a26      	ldr	r2, [pc, #152]	; (80005e4 <SystemClock_Config+0xd4>)
 800054a:	401a      	ands	r2, r3
 800054c:	4b24      	ldr	r3, [pc, #144]	; (80005e0 <SystemClock_Config+0xd0>)
 800054e:	2180      	movs	r1, #128	; 0x80
 8000550:	0109      	lsls	r1, r1, #4
 8000552:	430a      	orrs	r2, r1
 8000554:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000556:	0021      	movs	r1, r4
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2210      	movs	r2, #16
 800055c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2201      	movs	r2, #1
 8000562:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2200      	movs	r2, #0
 8000568:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	22a0      	movs	r2, #160	; 0xa0
 800056e:	0212      	lsls	r2, r2, #8
 8000570:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2200      	movs	r2, #0
 8000576:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000578:	187b      	adds	r3, r7, r1
 800057a:	0018      	movs	r0, r3
 800057c:	f000 ff5e 	bl	800143c <HAL_RCC_OscConfig>
 8000580:	1e03      	subs	r3, r0, #0
 8000582:	d001      	beq.n	8000588 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000584:	f000 f940 	bl	8000808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000588:	212c      	movs	r1, #44	; 0x2c
 800058a:	187b      	adds	r3, r7, r1
 800058c:	220f      	movs	r2, #15
 800058e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2200      	movs	r2, #0
 8000594:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2200      	movs	r2, #0
 80005a0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2200      	movs	r2, #0
 80005a6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2100      	movs	r1, #0
 80005ac:	0018      	movs	r0, r3
 80005ae:	f001 fb19 	bl	8001be4 <HAL_RCC_ClockConfig>
 80005b2:	1e03      	subs	r3, r0, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005b6:	f000 f927 	bl	8000808 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2202      	movs	r2, #2
 80005be:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	0018      	movs	r0, r3
 80005ca:	f001 fd2f 	bl	800202c <HAL_RCCEx_PeriphCLKConfig>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005d2:	f000 f919 	bl	8000808 <Error_Handler>
  }
}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	46bd      	mov	sp, r7
 80005da:	b01f      	add	sp, #124	; 0x7c
 80005dc:	bd90      	pop	{r4, r7, pc}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	40007000 	.word	0x40007000
 80005e4:	ffffe7ff 	.word	0xffffe7ff

080005e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005ec:	4b16      	ldr	r3, [pc, #88]	; (8000648 <MX_USART2_UART_Init+0x60>)
 80005ee:	4a17      	ldr	r2, [pc, #92]	; (800064c <MX_USART2_UART_Init+0x64>)
 80005f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <MX_USART2_UART_Init+0x60>)
 80005f4:	22e1      	movs	r2, #225	; 0xe1
 80005f6:	0252      	lsls	r2, r2, #9
 80005f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005fa:	4b13      	ldr	r3, [pc, #76]	; (8000648 <MX_USART2_UART_Init+0x60>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_USART2_UART_Init+0x60>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <MX_USART2_UART_Init+0x60>)
 8000608:	2200      	movs	r2, #0
 800060a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800060c:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_USART2_UART_Init+0x60>)
 800060e:	220c      	movs	r2, #12
 8000610:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000612:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <MX_USART2_UART_Init+0x60>)
 8000614:	2200      	movs	r2, #0
 8000616:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_USART2_UART_Init+0x60>)
 800061a:	2200      	movs	r2, #0
 800061c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800061e:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <MX_USART2_UART_Init+0x60>)
 8000620:	2200      	movs	r2, #0
 8000622:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_MSBFIRST_INIT;
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_USART2_UART_Init+0x60>)
 8000626:	2280      	movs	r2, #128	; 0x80
 8000628:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.MSBFirst = UART_ADVFEATURE_MSBFIRST_ENABLE;
 800062a:	4b07      	ldr	r3, [pc, #28]	; (8000648 <MX_USART2_UART_Init+0x60>)
 800062c:	2280      	movs	r2, #128	; 0x80
 800062e:	0312      	lsls	r2, r2, #12
 8000630:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <MX_USART2_UART_Init+0x60>)
 8000634:	0018      	movs	r0, r3
 8000636:	f001 fe6d 	bl	8002314 <HAL_UART_Init>
 800063a:	1e03      	subs	r3, r0, #0
 800063c:	d001      	beq.n	8000642 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800063e:	f000 f8e3 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000028 	.word	0x20000028
 800064c:	40004400 	.word	0x40004400

08000650 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_DMA_Init+0x38>)
 8000658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <MX_DMA_Init+0x38>)
 800065c:	2101      	movs	r1, #1
 800065e:	430a      	orrs	r2, r1
 8000660:	631a      	str	r2, [r3, #48]	; 0x30
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_DMA_Init+0x38>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	2201      	movs	r2, #1
 8000668:	4013      	ands	r3, r2
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	2100      	movs	r1, #0
 8000672:	200b      	movs	r0, #11
 8000674:	f000 fbee 	bl	8000e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000678:	200b      	movs	r0, #11
 800067a:	f000 fc00 	bl	8000e7e <HAL_NVIC_EnableIRQ>

}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	b002      	add	sp, #8
 8000684:	bd80      	pop	{r7, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	40021000 	.word	0x40021000

0800068c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800068c:	b590      	push	{r4, r7, lr}
 800068e:	b08b      	sub	sp, #44	; 0x2c
 8000690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	2414      	movs	r4, #20
 8000694:	193b      	adds	r3, r7, r4
 8000696:	0018      	movs	r0, r3
 8000698:	2314      	movs	r3, #20
 800069a:	001a      	movs	r2, r3
 800069c:	2100      	movs	r1, #0
 800069e:	f002 fbc2 	bl	8002e26 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a2:	4b54      	ldr	r3, [pc, #336]	; (80007f4 <MX_GPIO_Init+0x168>)
 80006a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006a6:	4b53      	ldr	r3, [pc, #332]	; (80007f4 <MX_GPIO_Init+0x168>)
 80006a8:	2104      	movs	r1, #4
 80006aa:	430a      	orrs	r2, r1
 80006ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80006ae:	4b51      	ldr	r3, [pc, #324]	; (80007f4 <MX_GPIO_Init+0x168>)
 80006b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b2:	2204      	movs	r2, #4
 80006b4:	4013      	ands	r3, r2
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ba:	4b4e      	ldr	r3, [pc, #312]	; (80007f4 <MX_GPIO_Init+0x168>)
 80006bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006be:	4b4d      	ldr	r3, [pc, #308]	; (80007f4 <MX_GPIO_Init+0x168>)
 80006c0:	2180      	movs	r1, #128	; 0x80
 80006c2:	430a      	orrs	r2, r1
 80006c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80006c6:	4b4b      	ldr	r3, [pc, #300]	; (80007f4 <MX_GPIO_Init+0x168>)
 80006c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ca:	2280      	movs	r2, #128	; 0x80
 80006cc:	4013      	ands	r3, r2
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	4b48      	ldr	r3, [pc, #288]	; (80007f4 <MX_GPIO_Init+0x168>)
 80006d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006d6:	4b47      	ldr	r3, [pc, #284]	; (80007f4 <MX_GPIO_Init+0x168>)
 80006d8:	2101      	movs	r1, #1
 80006da:	430a      	orrs	r2, r1
 80006dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80006de:	4b45      	ldr	r3, [pc, #276]	; (80007f4 <MX_GPIO_Init+0x168>)
 80006e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006e2:	2201      	movs	r2, #1
 80006e4:	4013      	ands	r3, r2
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ea:	4b42      	ldr	r3, [pc, #264]	; (80007f4 <MX_GPIO_Init+0x168>)
 80006ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006ee:	4b41      	ldr	r3, [pc, #260]	; (80007f4 <MX_GPIO_Init+0x168>)
 80006f0:	2102      	movs	r1, #2
 80006f2:	430a      	orrs	r2, r1
 80006f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80006f6:	4b3f      	ldr	r3, [pc, #252]	; (80007f4 <MX_GPIO_Init+0x168>)
 80006f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006fa:	2202      	movs	r2, #2
 80006fc:	4013      	ands	r3, r2
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, GPIO_PIN_RESET);
 8000702:	2380      	movs	r3, #128	; 0x80
 8000704:	019b      	lsls	r3, r3, #6
 8000706:	483c      	ldr	r0, [pc, #240]	; (80007f8 <MX_GPIO_Init+0x16c>)
 8000708:	2200      	movs	r2, #0
 800070a:	0019      	movs	r1, r3
 800070c:	f000 fe78 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, S2_Pin|S0_Pin, GPIO_PIN_RESET);
 8000710:	4b3a      	ldr	r3, [pc, #232]	; (80007fc <MX_GPIO_Init+0x170>)
 8000712:	2200      	movs	r2, #0
 8000714:	2103      	movs	r1, #3
 8000716:	0018      	movs	r0, r3
 8000718:	f000 fe72 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, S1_Pin|LED_EN_Pin, GPIO_PIN_RESET);
 800071c:	23a0      	movs	r3, #160	; 0xa0
 800071e:	05db      	lsls	r3, r3, #23
 8000720:	2200      	movs	r2, #0
 8000722:	2121      	movs	r1, #33	; 0x21
 8000724:	0018      	movs	r0, r3
 8000726:	f000 fe6b 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R_Pin|LED_V_Pin, GPIO_PIN_RESET);
 800072a:	4935      	ldr	r1, [pc, #212]	; (8000800 <MX_GPIO_Init+0x174>)
 800072c:	4b35      	ldr	r3, [pc, #212]	; (8000804 <MX_GPIO_Init+0x178>)
 800072e:	2200      	movs	r2, #0
 8000730:	0018      	movs	r0, r3
 8000732:	f000 fe65 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : S3_Pin */
  GPIO_InitStruct.Pin = S3_Pin;
 8000736:	193b      	adds	r3, r7, r4
 8000738:	2280      	movs	r2, #128	; 0x80
 800073a:	0192      	lsls	r2, r2, #6
 800073c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	193b      	adds	r3, r7, r4
 8000740:	2201      	movs	r2, #1
 8000742:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	193b      	adds	r3, r7, r4
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(S3_GPIO_Port, &GPIO_InitStruct);
 8000750:	193b      	adds	r3, r7, r4
 8000752:	4a29      	ldr	r2, [pc, #164]	; (80007f8 <MX_GPIO_Init+0x16c>)
 8000754:	0019      	movs	r1, r3
 8000756:	0010      	movs	r0, r2
 8000758:	f000 fcd4 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S0_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S0_Pin;
 800075c:	193b      	adds	r3, r7, r4
 800075e:	2203      	movs	r2, #3
 8000760:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	193b      	adds	r3, r7, r4
 8000764:	2201      	movs	r2, #1
 8000766:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	193b      	adds	r3, r7, r4
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	193b      	adds	r3, r7, r4
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000774:	193b      	adds	r3, r7, r4
 8000776:	4a21      	ldr	r2, [pc, #132]	; (80007fc <MX_GPIO_Init+0x170>)
 8000778:	0019      	movs	r1, r3
 800077a:	0010      	movs	r0, r2
 800077c:	f000 fcc2 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pins : S1_Pin LED_EN_Pin */
  GPIO_InitStruct.Pin = S1_Pin|LED_EN_Pin;
 8000780:	193b      	adds	r3, r7, r4
 8000782:	2221      	movs	r2, #33	; 0x21
 8000784:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2201      	movs	r2, #1
 800078a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000798:	193a      	adds	r2, r7, r4
 800079a:	23a0      	movs	r3, #160	; 0xa0
 800079c:	05db      	lsls	r3, r3, #23
 800079e:	0011      	movs	r1, r2
 80007a0:	0018      	movs	r0, r3
 80007a2:	f000 fcaf 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUX1_Pin MUX2_Pin */
  GPIO_InitStruct.Pin = MUX1_Pin|MUX2_Pin;
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	2212      	movs	r2, #18
 80007aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	2200      	movs	r2, #0
 80007b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	193b      	adds	r3, r7, r4
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b8:	193a      	adds	r2, r7, r4
 80007ba:	23a0      	movs	r3, #160	; 0xa0
 80007bc:	05db      	lsls	r3, r3, #23
 80007be:	0011      	movs	r1, r2
 80007c0:	0018      	movs	r0, r3
 80007c2:	f000 fc9f 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_R_Pin LED_V_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_V_Pin;
 80007c6:	0021      	movs	r1, r4
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	4a0d      	ldr	r2, [pc, #52]	; (8000800 <MX_GPIO_Init+0x174>)
 80007cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2201      	movs	r2, #1
 80007d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	4a08      	ldr	r2, [pc, #32]	; (8000804 <MX_GPIO_Init+0x178>)
 80007e4:	0019      	movs	r1, r3
 80007e6:	0010      	movs	r0, r2
 80007e8:	f000 fc8c 	bl	8001104 <HAL_GPIO_Init>

}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b00b      	add	sp, #44	; 0x2c
 80007f2:	bd90      	pop	{r4, r7, pc}
 80007f4:	40021000 	.word	0x40021000
 80007f8:	50000800 	.word	0x50000800
 80007fc:	50001c00 	.word	0x50001c00
 8000800:	00000404 	.word	0x00000404
 8000804:	50000400 	.word	0x50000400

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	  HAL_GPIO_WritePin(LED_V_GPIO_Port, LED_V_Pin, GPIO_PIN_SET);
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	00db      	lsls	r3, r3, #3
 8000810:	4803      	ldr	r0, [pc, #12]	; (8000820 <Error_Handler+0x18>)
 8000812:	2201      	movs	r2, #1
 8000814:	0019      	movs	r1, r3
 8000816:	f000 fdf3 	bl	8001400 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081a:	b672      	cpsid	i
}
 800081c:	46c0      	nop			; (mov r8, r8)

  //sprintf(texte,"%d",traqueur);
  //HAL_UART_Transmit(&huart2, texte, strlen(texte),HAL_MAX_DELAY);
  __disable_irq();
  while (1)
 800081e:	e7fe      	b.n	800081e <Error_Handler+0x16>
 8000820:	50000400 	.word	0x50000400

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <HAL_MspInit+0x24>)
 800082a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <HAL_MspInit+0x24>)
 800082e:	2101      	movs	r1, #1
 8000830:	430a      	orrs	r2, r1
 8000832:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000834:	4b04      	ldr	r3, [pc, #16]	; (8000848 <HAL_MspInit+0x24>)
 8000836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000838:	4b03      	ldr	r3, [pc, #12]	; (8000848 <HAL_MspInit+0x24>)
 800083a:	2180      	movs	r1, #128	; 0x80
 800083c:	0549      	lsls	r1, r1, #21
 800083e:	430a      	orrs	r2, r1
 8000840:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40021000 	.word	0x40021000

0800084c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b089      	sub	sp, #36	; 0x24
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	240c      	movs	r4, #12
 8000856:	193b      	adds	r3, r7, r4
 8000858:	0018      	movs	r0, r3
 800085a:	2314      	movs	r3, #20
 800085c:	001a      	movs	r2, r3
 800085e:	2100      	movs	r1, #0
 8000860:	f002 fae1 	bl	8002e26 <memset>
  if(huart->Instance==USART2)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a41      	ldr	r2, [pc, #260]	; (8000970 <HAL_UART_MspInit+0x124>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d000      	beq.n	8000870 <HAL_UART_MspInit+0x24>
 800086e:	e07b      	b.n	8000968 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000870:	4b40      	ldr	r3, [pc, #256]	; (8000974 <HAL_UART_MspInit+0x128>)
 8000872:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000874:	4b3f      	ldr	r3, [pc, #252]	; (8000974 <HAL_UART_MspInit+0x128>)
 8000876:	2180      	movs	r1, #128	; 0x80
 8000878:	0289      	lsls	r1, r1, #10
 800087a:	430a      	orrs	r2, r1
 800087c:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b3d      	ldr	r3, [pc, #244]	; (8000974 <HAL_UART_MspInit+0x128>)
 8000880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000882:	4b3c      	ldr	r3, [pc, #240]	; (8000974 <HAL_UART_MspInit+0x128>)
 8000884:	2101      	movs	r1, #1
 8000886:	430a      	orrs	r2, r1
 8000888:	62da      	str	r2, [r3, #44]	; 0x2c
 800088a:	4b3a      	ldr	r3, [pc, #232]	; (8000974 <HAL_UART_MspInit+0x128>)
 800088c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800088e:	2201      	movs	r2, #1
 8000890:	4013      	ands	r3, r2
 8000892:	60bb      	str	r3, [r7, #8]
 8000894:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8000896:	0021      	movs	r1, r4
 8000898:	187b      	adds	r3, r7, r1
 800089a:	220c      	movs	r2, #12
 800089c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2202      	movs	r2, #2
 80008a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2203      	movs	r2, #3
 80008ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2204      	movs	r2, #4
 80008b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b6:	187a      	adds	r2, r7, r1
 80008b8:	23a0      	movs	r3, #160	; 0xa0
 80008ba:	05db      	lsls	r3, r3, #23
 80008bc:	0011      	movs	r1, r2
 80008be:	0018      	movs	r0, r3
 80008c0:	f000 fc20 	bl	8001104 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80008c4:	4b2c      	ldr	r3, [pc, #176]	; (8000978 <HAL_UART_MspInit+0x12c>)
 80008c6:	4a2d      	ldr	r2, [pc, #180]	; (800097c <HAL_UART_MspInit+0x130>)
 80008c8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_4;
 80008ca:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <HAL_UART_MspInit+0x12c>)
 80008cc:	2204      	movs	r2, #4
 80008ce:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008d0:	4b29      	ldr	r3, [pc, #164]	; (8000978 <HAL_UART_MspInit+0x12c>)
 80008d2:	2210      	movs	r2, #16
 80008d4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008d6:	4b28      	ldr	r3, [pc, #160]	; (8000978 <HAL_UART_MspInit+0x12c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008dc:	4b26      	ldr	r3, [pc, #152]	; (8000978 <HAL_UART_MspInit+0x12c>)
 80008de:	2280      	movs	r2, #128	; 0x80
 80008e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008e2:	4b25      	ldr	r3, [pc, #148]	; (8000978 <HAL_UART_MspInit+0x12c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <HAL_UART_MspInit+0x12c>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80008ee:	4b22      	ldr	r3, [pc, #136]	; (8000978 <HAL_UART_MspInit+0x12c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008f4:	4b20      	ldr	r3, [pc, #128]	; (8000978 <HAL_UART_MspInit+0x12c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80008fa:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <HAL_UART_MspInit+0x12c>)
 80008fc:	0018      	movs	r0, r3
 80008fe:	f000 fadb 	bl	8000eb8 <HAL_DMA_Init>
 8000902:	1e03      	subs	r3, r0, #0
 8000904:	d001      	beq.n	800090a <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000906:	f7ff ff7f 	bl	8000808 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4a1a      	ldr	r2, [pc, #104]	; (8000978 <HAL_UART_MspInit+0x12c>)
 800090e:	66da      	str	r2, [r3, #108]	; 0x6c
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <HAL_UART_MspInit+0x12c>)
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8000916:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <HAL_UART_MspInit+0x134>)
 8000918:	4a1a      	ldr	r2, [pc, #104]	; (8000984 <HAL_UART_MspInit+0x138>)
 800091a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 800091c:	4b18      	ldr	r3, [pc, #96]	; (8000980 <HAL_UART_MspInit+0x134>)
 800091e:	2204      	movs	r2, #4
 8000920:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000922:	4b17      	ldr	r3, [pc, #92]	; (8000980 <HAL_UART_MspInit+0x134>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000928:	4b15      	ldr	r3, [pc, #84]	; (8000980 <HAL_UART_MspInit+0x134>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800092e:	4b14      	ldr	r3, [pc, #80]	; (8000980 <HAL_UART_MspInit+0x134>)
 8000930:	2280      	movs	r2, #128	; 0x80
 8000932:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <HAL_UART_MspInit+0x134>)
 8000936:	2200      	movs	r2, #0
 8000938:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <HAL_UART_MspInit+0x134>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <HAL_UART_MspInit+0x134>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <HAL_UART_MspInit+0x134>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <HAL_UART_MspInit+0x134>)
 800094e:	0018      	movs	r0, r3
 8000950:	f000 fab2 	bl	8000eb8 <HAL_DMA_Init>
 8000954:	1e03      	subs	r3, r0, #0
 8000956:	d001      	beq.n	800095c <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000958:	f7ff ff56 	bl	8000808 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <HAL_UART_MspInit+0x134>)
 8000960:	671a      	str	r2, [r3, #112]	; 0x70
 8000962:	4b07      	ldr	r3, [pc, #28]	; (8000980 <HAL_UART_MspInit+0x134>)
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000968:	46c0      	nop			; (mov r8, r8)
 800096a:	46bd      	mov	sp, r7
 800096c:	b009      	add	sp, #36	; 0x24
 800096e:	bd90      	pop	{r4, r7, pc}
 8000970:	40004400 	.word	0x40004400
 8000974:	40021000 	.word	0x40021000
 8000978:	200000ac 	.word	0x200000ac
 800097c:	40020044 	.word	0x40020044
 8000980:	200000f4 	.word	0x200000f4
 8000984:	40020058 	.word	0x40020058

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800098c:	e7fe      	b.n	800098c <NMI_Handler+0x4>

0800098e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <HardFault_Handler+0x4>

08000994 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ac:	f000 f98a 	bl	8000cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 80009be:	0018      	movs	r0, r3
 80009c0:	f000 faf2 	bl	8000fa8 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 80009c6:	0018      	movs	r0, r3
 80009c8:	f000 faee 	bl	8000fa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	200000ac 	.word	0x200000ac
 80009d8:	200000f4 	.word	0x200000f4

080009dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <xbee_send_string>:
	}

	*var = new_var;
}*/

void xbee_send_string(uint8_t * string){
 80009e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ea:	b0cf      	sub	sp, #316	; 0x13c
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	struct frame tx_frame = {0};
 80009f0:	4b71      	ldr	r3, [pc, #452]	; (8000bb8 <xbee_send_string+0x1d0>)
 80009f2:	269c      	movs	r6, #156	; 0x9c
 80009f4:	0076      	lsls	r6, r6, #1
 80009f6:	199b      	adds	r3, r3, r6
 80009f8:	19db      	adds	r3, r3, r7
 80009fa:	0018      	movs	r0, r3
 80009fc:	2390      	movs	r3, #144	; 0x90
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	001a      	movs	r2, r3
 8000a02:	2100      	movs	r1, #0
 8000a04:	f002 fa0f 	bl	8002e26 <memset>
	tx_frame.length = 0x0E + strlen(string);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f7ff fb7c 	bl	8000108 <strlen>
 8000a10:	0003      	movs	r3, r0
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	330e      	adds	r3, #14
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	4b67      	ldr	r3, [pc, #412]	; (8000bb8 <xbee_send_string+0x1d0>)
 8000a1a:	199b      	adds	r3, r3, r6
 8000a1c:	19db      	adds	r3, r3, r7
 8000a1e:	801a      	strh	r2, [r3, #0]
	//invert_lsB_msB((uint64_t*)&tx_frame.length, 2); //utilisée sur le F446RE, le L073CZ a un paramètre MSBFirst, réglé à 1 dans le .ioc
	tx_frame.type = 0x10;
 8000a20:	4b65      	ldr	r3, [pc, #404]	; (8000bb8 <xbee_send_string+0x1d0>)
 8000a22:	199b      	adds	r3, r3, r6
 8000a24:	19db      	adds	r3, r3, r7
 8000a26:	2210      	movs	r2, #16
 8000a28:	709a      	strb	r2, [r3, #2]
	tx_frame.id = 0x01;
 8000a2a:	4b63      	ldr	r3, [pc, #396]	; (8000bb8 <xbee_send_string+0x1d0>)
 8000a2c:	199b      	adds	r3, r3, r6
 8000a2e:	19db      	adds	r3, r3, r7
 8000a30:	2201      	movs	r2, #1
 8000a32:	70da      	strb	r2, [r3, #3]
	tx_frame.address64 = 0xFFFF;
 8000a34:	4b60      	ldr	r3, [pc, #384]	; (8000bb8 <xbee_send_string+0x1d0>)
 8000a36:	199b      	adds	r3, r3, r6
 8000a38:	19d9      	adds	r1, r3, r7
 8000a3a:	4a60      	ldr	r2, [pc, #384]	; (8000bbc <xbee_send_string+0x1d4>)
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	608a      	str	r2, [r1, #8]
 8000a40:	60cb      	str	r3, [r1, #12]
	//invert_lsB_msB((uint64_t*)&tx_frame.address64, 8); //utilisée sur le F446RE, le L073CZ a un paramètre MSBFirst, réglé à 1 dans le .ioc
	tx_frame.address16 = 0xFFFE;
 8000a42:	4b5d      	ldr	r3, [pc, #372]	; (8000bb8 <xbee_send_string+0x1d0>)
 8000a44:	199b      	adds	r3, r3, r6
 8000a46:	19db      	adds	r3, r3, r7
 8000a48:	2202      	movs	r2, #2
 8000a4a:	4252      	negs	r2, r2
 8000a4c:	821a      	strh	r2, [r3, #16]
	//invert_lsB_msB((uint64_t*)&tx_frame.address16, 2); //utilisée sur le F446RE, le L073CZ a un paramètre MSBFirst, réglé à 1 dans le .ioc
	memcpy(tx_frame.content, string, strlen(string));
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	0018      	movs	r0, r3
 8000a52:	f7ff fb59 	bl	8000108 <strlen>
 8000a56:	0002      	movs	r2, r0
 8000a58:	6879      	ldr	r1, [r7, #4]
 8000a5a:	2608      	movs	r6, #8
 8000a5c:	19bb      	adds	r3, r7, r6
 8000a5e:	3313      	adds	r3, #19
 8000a60:	0018      	movs	r0, r3
 8000a62:	f002 f9d7 	bl	8002e14 <memcpy>

	uint64_t sum = 0;
 8000a66:	2200      	movs	r2, #0
 8000a68:	2300      	movs	r3, #0
 8000a6a:	2198      	movs	r1, #152	; 0x98
 8000a6c:	0049      	lsls	r1, r1, #1
 8000a6e:	1879      	adds	r1, r7, r1
 8000a70:	600a      	str	r2, [r1, #0]
 8000a72:	604b      	str	r3, [r1, #4]
	uint16_t frame_length;
	frame_length = 275;
 8000a74:	2394      	movs	r3, #148	; 0x94
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	18fb      	adds	r3, r7, r3
 8000a7a:	2214      	movs	r2, #20
 8000a7c:	32ff      	adds	r2, #255	; 0xff
 8000a7e:	801a      	strh	r2, [r3, #0]
	uint8_t * ptr = (void *)&tx_frame+2;
 8000a80:	19bb      	adds	r3, r7, r6
 8000a82:	3302      	adds	r3, #2
 8000a84:	2296      	movs	r2, #150	; 0x96
 8000a86:	0052      	lsls	r2, r2, #1
 8000a88:	18ba      	adds	r2, r7, r2
 8000a8a:	6013      	str	r3, [r2, #0]
	for(uint16_t i=0; i<frame_length-2; i++){
 8000a8c:	2395      	movs	r3, #149	; 0x95
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	18fb      	adds	r3, r7, r3
 8000a92:	2200      	movs	r2, #0
 8000a94:	801a      	strh	r2, [r3, #0]
 8000a96:	e01d      	b.n	8000ad4 <xbee_send_string+0xec>
		sum += *ptr;
 8000a98:	2196      	movs	r1, #150	; 0x96
 8000a9a:	0049      	lsls	r1, r1, #1
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	001c      	movs	r4, r3
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	001d      	movs	r5, r3
 8000aa8:	2098      	movs	r0, #152	; 0x98
 8000aaa:	0040      	lsls	r0, r0, #1
 8000aac:	183b      	adds	r3, r7, r0
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	1912      	adds	r2, r2, r4
 8000ab4:	416b      	adcs	r3, r5
 8000ab6:	1838      	adds	r0, r7, r0
 8000ab8:	6002      	str	r2, [r0, #0]
 8000aba:	6043      	str	r3, [r0, #4]
		ptr++;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	187a      	adds	r2, r7, r1
 8000ac4:	6013      	str	r3, [r2, #0]
	for(uint16_t i=0; i<frame_length-2; i++){
 8000ac6:	2195      	movs	r1, #149	; 0x95
 8000ac8:	0049      	lsls	r1, r1, #1
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	881a      	ldrh	r2, [r3, #0]
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	3201      	adds	r2, #1
 8000ad2:	801a      	strh	r2, [r3, #0]
 8000ad4:	2395      	movs	r3, #149	; 0x95
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	881a      	ldrh	r2, [r3, #0]
 8000adc:	2394      	movs	r3, #148	; 0x94
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	18fb      	adds	r3, r7, r3
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	3b02      	subs	r3, #2
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	dbd6      	blt.n	8000a98 <xbee_send_string+0xb0>
	}

	tx_frame.check_sum = 0xFF - (sum & 0xFF);
 8000aea:	2398      	movs	r3, #152	; 0x98
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	1c13      	adds	r3, r2, #0
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	43db      	mvns	r3, r3
 8000afa:	b2d9      	uxtb	r1, r3
 8000afc:	4b2e      	ldr	r3, [pc, #184]	; (8000bb8 <xbee_send_string+0x1d0>)
 8000afe:	229c      	movs	r2, #156	; 0x9c
 8000b00:	0052      	lsls	r2, r2, #1
 8000b02:	189b      	adds	r3, r3, r2
 8000b04:	19da      	adds	r2, r3, r7
 8000b06:	238c      	movs	r3, #140	; 0x8c
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	54d1      	strb	r1, [r2, r3]


	HAL_UART_Transmit(&huart1, "~", 1, 100);
 8000b0c:	492c      	ldr	r1, [pc, #176]	; (8000bc0 <xbee_send_string+0x1d8>)
 8000b0e:	482d      	ldr	r0, [pc, #180]	; (8000bc4 <xbee_send_string+0x1dc>)
 8000b10:	2364      	movs	r3, #100	; 0x64
 8000b12:	2201      	movs	r2, #1
 8000b14:	f001 fc52 	bl	80023bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)&tx_frame.length, 2, 100);
 8000b18:	2408      	movs	r4, #8
 8000b1a:	1939      	adds	r1, r7, r4
 8000b1c:	4829      	ldr	r0, [pc, #164]	; (8000bc4 <xbee_send_string+0x1dc>)
 8000b1e:	2364      	movs	r3, #100	; 0x64
 8000b20:	2202      	movs	r2, #2
 8000b22:	f001 fc4b 	bl	80023bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, &tx_frame.type, 1, 100);
 8000b26:	193b      	adds	r3, r7, r4
 8000b28:	1c99      	adds	r1, r3, #2
 8000b2a:	4826      	ldr	r0, [pc, #152]	; (8000bc4 <xbee_send_string+0x1dc>)
 8000b2c:	2364      	movs	r3, #100	; 0x64
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f001 fc44 	bl	80023bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, &tx_frame.id, 1, 100);
 8000b34:	193b      	adds	r3, r7, r4
 8000b36:	1cd9      	adds	r1, r3, #3
 8000b38:	4822      	ldr	r0, [pc, #136]	; (8000bc4 <xbee_send_string+0x1dc>)
 8000b3a:	2364      	movs	r3, #100	; 0x64
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f001 fc3d 	bl	80023bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, &tx_frame.address64, 8, 100);
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	3308      	adds	r3, #8
 8000b46:	0019      	movs	r1, r3
 8000b48:	481e      	ldr	r0, [pc, #120]	; (8000bc4 <xbee_send_string+0x1dc>)
 8000b4a:	2364      	movs	r3, #100	; 0x64
 8000b4c:	2208      	movs	r2, #8
 8000b4e:	f001 fc35 	bl	80023bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, &tx_frame.address16, 2, 100);
 8000b52:	193b      	adds	r3, r7, r4
 8000b54:	3310      	adds	r3, #16
 8000b56:	0019      	movs	r1, r3
 8000b58:	481a      	ldr	r0, [pc, #104]	; (8000bc4 <xbee_send_string+0x1dc>)
 8000b5a:	2364      	movs	r3, #100	; 0x64
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	f001 fc2d 	bl	80023bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, &tx_frame.content_index, 1, 100);
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	3314      	adds	r3, #20
 8000b66:	33ff      	adds	r3, #255	; 0xff
 8000b68:	0019      	movs	r1, r3
 8000b6a:	4816      	ldr	r0, [pc, #88]	; (8000bc4 <xbee_send_string+0x1dc>)
 8000b6c:	2364      	movs	r3, #100	; 0x64
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f001 fc24 	bl	80023bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, &tx_frame.option, 1, 100);
 8000b74:	193b      	adds	r3, r7, r4
 8000b76:	3312      	adds	r3, #18
 8000b78:	0019      	movs	r1, r3
 8000b7a:	4812      	ldr	r0, [pc, #72]	; (8000bc4 <xbee_send_string+0x1dc>)
 8000b7c:	2364      	movs	r3, #100	; 0x64
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f001 fc1c 	bl	80023bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, &tx_frame.content, strlen(string), 100);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	0018      	movs	r0, r3
 8000b88:	f7ff fabe 	bl	8000108 <strlen>
 8000b8c:	0003      	movs	r3, r0
 8000b8e:	b29a      	uxth	r2, r3
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	3313      	adds	r3, #19
 8000b94:	0019      	movs	r1, r3
 8000b96:	480b      	ldr	r0, [pc, #44]	; (8000bc4 <xbee_send_string+0x1dc>)
 8000b98:	2364      	movs	r3, #100	; 0x64
 8000b9a:	f001 fc0f 	bl	80023bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, &tx_frame.check_sum, 1, 100);
 8000b9e:	193b      	adds	r3, r7, r4
 8000ba0:	3319      	adds	r3, #25
 8000ba2:	33ff      	adds	r3, #255	; 0xff
 8000ba4:	0019      	movs	r1, r3
 8000ba6:	4807      	ldr	r0, [pc, #28]	; (8000bc4 <xbee_send_string+0x1dc>)
 8000ba8:	2364      	movs	r3, #100	; 0x64
 8000baa:	2201      	movs	r2, #1
 8000bac:	f001 fc06 	bl	80023bc <HAL_UART_Transmit>
}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b04f      	add	sp, #316	; 0x13c
 8000bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bb8:	fffffed0 	.word	0xfffffed0
 8000bbc:	0000ffff 	.word	0x0000ffff
 8000bc0:	08002eb4 	.word	0x08002eb4
 8000bc4:	2000013c 	.word	0x2000013c

08000bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000bca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bcc:	480d      	ldr	r0, [pc, #52]	; (8000c04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bce:	490e      	ldr	r1, [pc, #56]	; (8000c08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd0:	4a0e      	ldr	r2, [pc, #56]	; (8000c0c <LoopForever+0xe>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd4:	e002      	b.n	8000bdc <LoopCopyDataInit>

08000bd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bda:	3304      	adds	r3, #4

08000bdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be0:	d3f9      	bcc.n	8000bd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be2:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be4:	4c0b      	ldr	r4, [pc, #44]	; (8000c14 <LoopForever+0x16>)
  movs r3, #0
 8000be6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be8:	e001      	b.n	8000bee <LoopFillZerobss>

08000bea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bec:	3204      	adds	r2, #4

08000bee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf0:	d3fb      	bcc.n	8000bea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bf2:	f7ff fef3 	bl	80009dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f002 f8e9 	bl	8002dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfa:	f7ff fc5d 	bl	80004b8 <main>

08000bfe <LoopForever>:

LoopForever:
    b LoopForever
 8000bfe:	e7fe      	b.n	8000bfe <LoopForever>
   ldr   r0, =_estack
 8000c00:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c0c:	08002f60 	.word	0x08002f60
  ldr r2, =_sbss
 8000c10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c14:	200001c4 	.word	0x200001c4

08000c18 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <ADC1_COMP_IRQHandler>
	...

08000c1c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c28:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <HAL_Init+0x3c>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <HAL_Init+0x3c>)
 8000c2e:	2140      	movs	r1, #64	; 0x40
 8000c30:	430a      	orrs	r2, r1
 8000c32:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c34:	2003      	movs	r0, #3
 8000c36:	f000 f811 	bl	8000c5c <HAL_InitTick>
 8000c3a:	1e03      	subs	r3, r0, #0
 8000c3c:	d003      	beq.n	8000c46 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000c3e:	1dfb      	adds	r3, r7, #7
 8000c40:	2201      	movs	r2, #1
 8000c42:	701a      	strb	r2, [r3, #0]
 8000c44:	e001      	b.n	8000c4a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c46:	f7ff fded 	bl	8000824 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
}
 8000c4e:	0018      	movs	r0, r3
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b002      	add	sp, #8
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	40022000 	.word	0x40022000

08000c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c5c:	b590      	push	{r4, r7, lr}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c64:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <HAL_InitTick+0x5c>)
 8000c66:	681c      	ldr	r4, [r3, #0]
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <HAL_InitTick+0x60>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	0019      	movs	r1, r3
 8000c6e:	23fa      	movs	r3, #250	; 0xfa
 8000c70:	0098      	lsls	r0, r3, #2
 8000c72:	f7ff fa51 	bl	8000118 <__udivsi3>
 8000c76:	0003      	movs	r3, r0
 8000c78:	0019      	movs	r1, r3
 8000c7a:	0020      	movs	r0, r4
 8000c7c:	f7ff fa4c 	bl	8000118 <__udivsi3>
 8000c80:	0003      	movs	r3, r0
 8000c82:	0018      	movs	r0, r3
 8000c84:	f000 f90b 	bl	8000e9e <HAL_SYSTICK_Config>
 8000c88:	1e03      	subs	r3, r0, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e00f      	b.n	8000cb0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b03      	cmp	r3, #3
 8000c94:	d80b      	bhi.n	8000cae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c96:	6879      	ldr	r1, [r7, #4]
 8000c98:	2301      	movs	r3, #1
 8000c9a:	425b      	negs	r3, r3
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f000 f8d8 	bl	8000e54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_InitTick+0x64>)
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000caa:	2300      	movs	r3, #0
 8000cac:	e000      	b.n	8000cb0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
}
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	b003      	add	sp, #12
 8000cb6:	bd90      	pop	{r4, r7, pc}
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000008 	.word	0x20000008
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <HAL_IncTick+0x1c>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	001a      	movs	r2, r3
 8000cce:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <HAL_IncTick+0x20>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	18d2      	adds	r2, r2, r3
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <HAL_IncTick+0x20>)
 8000cd6:	601a      	str	r2, [r3, #0]
}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	20000008 	.word	0x20000008
 8000ce4:	200001c0 	.word	0x200001c0

08000ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  return uwTick;
 8000cec:	4b02      	ldr	r3, [pc, #8]	; (8000cf8 <HAL_GetTick+0x10>)
 8000cee:	681b      	ldr	r3, [r3, #0]
}
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	200001c0 	.word	0x200001c0

08000cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	0002      	movs	r2, r0
 8000d04:	1dfb      	adds	r3, r7, #7
 8000d06:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	1dfb      	adds	r3, r7, #7
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b7f      	cmp	r3, #127	; 0x7f
 8000d0e:	d809      	bhi.n	8000d24 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d10:	1dfb      	adds	r3, r7, #7
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	001a      	movs	r2, r3
 8000d16:	231f      	movs	r3, #31
 8000d18:	401a      	ands	r2, r3
 8000d1a:	4b04      	ldr	r3, [pc, #16]	; (8000d2c <__NVIC_EnableIRQ+0x30>)
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	4091      	lsls	r1, r2
 8000d20:	000a      	movs	r2, r1
 8000d22:	601a      	str	r2, [r3, #0]
  }
}
 8000d24:	46c0      	nop			; (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b002      	add	sp, #8
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	e000e100 	.word	0xe000e100

08000d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	0002      	movs	r2, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d3e:	1dfb      	adds	r3, r7, #7
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b7f      	cmp	r3, #127	; 0x7f
 8000d44:	d828      	bhi.n	8000d98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d46:	4a2f      	ldr	r2, [pc, #188]	; (8000e04 <__NVIC_SetPriority+0xd4>)
 8000d48:	1dfb      	adds	r3, r7, #7
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	b25b      	sxtb	r3, r3
 8000d4e:	089b      	lsrs	r3, r3, #2
 8000d50:	33c0      	adds	r3, #192	; 0xc0
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	589b      	ldr	r3, [r3, r2]
 8000d56:	1dfa      	adds	r2, r7, #7
 8000d58:	7812      	ldrb	r2, [r2, #0]
 8000d5a:	0011      	movs	r1, r2
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	400a      	ands	r2, r1
 8000d60:	00d2      	lsls	r2, r2, #3
 8000d62:	21ff      	movs	r1, #255	; 0xff
 8000d64:	4091      	lsls	r1, r2
 8000d66:	000a      	movs	r2, r1
 8000d68:	43d2      	mvns	r2, r2
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	019b      	lsls	r3, r3, #6
 8000d72:	22ff      	movs	r2, #255	; 0xff
 8000d74:	401a      	ands	r2, r3
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	4003      	ands	r3, r0
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d84:	481f      	ldr	r0, [pc, #124]	; (8000e04 <__NVIC_SetPriority+0xd4>)
 8000d86:	1dfb      	adds	r3, r7, #7
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	089b      	lsrs	r3, r3, #2
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	33c0      	adds	r3, #192	; 0xc0
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d96:	e031      	b.n	8000dfc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d98:	4a1b      	ldr	r2, [pc, #108]	; (8000e08 <__NVIC_SetPriority+0xd8>)
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	0019      	movs	r1, r3
 8000da0:	230f      	movs	r3, #15
 8000da2:	400b      	ands	r3, r1
 8000da4:	3b08      	subs	r3, #8
 8000da6:	089b      	lsrs	r3, r3, #2
 8000da8:	3306      	adds	r3, #6
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	18d3      	adds	r3, r2, r3
 8000dae:	3304      	adds	r3, #4
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	1dfa      	adds	r2, r7, #7
 8000db4:	7812      	ldrb	r2, [r2, #0]
 8000db6:	0011      	movs	r1, r2
 8000db8:	2203      	movs	r2, #3
 8000dba:	400a      	ands	r2, r1
 8000dbc:	00d2      	lsls	r2, r2, #3
 8000dbe:	21ff      	movs	r1, #255	; 0xff
 8000dc0:	4091      	lsls	r1, r2
 8000dc2:	000a      	movs	r2, r1
 8000dc4:	43d2      	mvns	r2, r2
 8000dc6:	401a      	ands	r2, r3
 8000dc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	019b      	lsls	r3, r3, #6
 8000dce:	22ff      	movs	r2, #255	; 0xff
 8000dd0:	401a      	ands	r2, r3
 8000dd2:	1dfb      	adds	r3, r7, #7
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	2303      	movs	r3, #3
 8000dda:	4003      	ands	r3, r0
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000de0:	4809      	ldr	r0, [pc, #36]	; (8000e08 <__NVIC_SetPriority+0xd8>)
 8000de2:	1dfb      	adds	r3, r7, #7
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	001c      	movs	r4, r3
 8000de8:	230f      	movs	r3, #15
 8000dea:	4023      	ands	r3, r4
 8000dec:	3b08      	subs	r3, #8
 8000dee:	089b      	lsrs	r3, r3, #2
 8000df0:	430a      	orrs	r2, r1
 8000df2:	3306      	adds	r3, #6
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	18c3      	adds	r3, r0, r3
 8000df8:	3304      	adds	r3, #4
 8000dfa:	601a      	str	r2, [r3, #0]
}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b003      	add	sp, #12
 8000e02:	bd90      	pop	{r4, r7, pc}
 8000e04:	e000e100 	.word	0xe000e100
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	1e5a      	subs	r2, r3, #1
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	045b      	lsls	r3, r3, #17
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d301      	bcc.n	8000e24 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e20:	2301      	movs	r3, #1
 8000e22:	e010      	b.n	8000e46 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <SysTick_Config+0x44>)
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	425b      	negs	r3, r3
 8000e30:	2103      	movs	r1, #3
 8000e32:	0018      	movs	r0, r3
 8000e34:	f7ff ff7c 	bl	8000d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <SysTick_Config+0x44>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <SysTick_Config+0x44>)
 8000e40:	2207      	movs	r2, #7
 8000e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	0018      	movs	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	b002      	add	sp, #8
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	e000e010 	.word	0xe000e010

08000e54 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	210f      	movs	r1, #15
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	1c02      	adds	r2, r0, #0
 8000e64:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	b25b      	sxtb	r3, r3
 8000e6e:	0011      	movs	r1, r2
 8000e70:	0018      	movs	r0, r3
 8000e72:	f7ff ff5d 	bl	8000d30 <__NVIC_SetPriority>
}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b004      	add	sp, #16
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	0002      	movs	r2, r0
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e8a:	1dfb      	adds	r3, r7, #7
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	b25b      	sxtb	r3, r3
 8000e90:	0018      	movs	r0, r3
 8000e92:	f7ff ff33 	bl	8000cfc <__NVIC_EnableIRQ>
}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b002      	add	sp, #8
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f7ff ffaf 	bl	8000e0c <SysTick_Config>
 8000eae:	0003      	movs	r3, r0
}
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b002      	add	sp, #8
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d101      	bne.n	8000eca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e061      	b.n	8000f8e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a32      	ldr	r2, [pc, #200]	; (8000f98 <HAL_DMA_Init+0xe0>)
 8000ed0:	4694      	mov	ip, r2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	2114      	movs	r1, #20
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f7ff f91e 	bl	8000118 <__udivsi3>
 8000edc:	0003      	movs	r3, r0
 8000ede:	009a      	lsls	r2, r3, #2
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a2d      	ldr	r2, [pc, #180]	; (8000f9c <HAL_DMA_Init+0xe4>)
 8000ee8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2225      	movs	r2, #37	; 0x25
 8000eee:	2102      	movs	r1, #2
 8000ef0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	4a28      	ldr	r2, [pc, #160]	; (8000fa0 <HAL_DMA_Init+0xe8>)
 8000efe:	4013      	ands	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000f0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a1b      	ldr	r3, [r3, #32]
 8000f28:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	01db      	lsls	r3, r3, #7
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d018      	beq.n	8000f76 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <HAL_DMA_Init+0xec>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4c:	211c      	movs	r1, #28
 8000f4e:	400b      	ands	r3, r1
 8000f50:	210f      	movs	r1, #15
 8000f52:	4099      	lsls	r1, r3
 8000f54:	000b      	movs	r3, r1
 8000f56:	43d9      	mvns	r1, r3
 8000f58:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_DMA_Init+0xec>)
 8000f5a:	400a      	ands	r2, r1
 8000f5c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000f5e:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <HAL_DMA_Init+0xec>)
 8000f60:	6819      	ldr	r1, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685a      	ldr	r2, [r3, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6a:	201c      	movs	r0, #28
 8000f6c:	4003      	ands	r3, r0
 8000f6e:	409a      	lsls	r2, r3
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <HAL_DMA_Init+0xec>)
 8000f72:	430a      	orrs	r2, r1
 8000f74:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2225      	movs	r2, #37	; 0x25
 8000f80:	2101      	movs	r1, #1
 8000f82:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2224      	movs	r2, #36	; 0x24
 8000f88:	2100      	movs	r1, #0
 8000f8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	0018      	movs	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b004      	add	sp, #16
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	bffdfff8 	.word	0xbffdfff8
 8000f9c:	40020000 	.word	0x40020000
 8000fa0:	ffff800f 	.word	0xffff800f
 8000fa4:	400200a8 	.word	0x400200a8

08000fa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc4:	221c      	movs	r2, #28
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	2204      	movs	r2, #4
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	0013      	movs	r3, r2
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d026      	beq.n	8001022 <HAL_DMA_IRQHandler+0x7a>
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	2204      	movs	r2, #4
 8000fd8:	4013      	ands	r3, r2
 8000fda:	d022      	beq.n	8001022 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	2220      	movs	r2, #32
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	d107      	bne.n	8000ff8 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2104      	movs	r1, #4
 8000ff4:	438a      	bics	r2, r1
 8000ff6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffc:	221c      	movs	r2, #28
 8000ffe:	401a      	ands	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	2104      	movs	r1, #4
 8001006:	4091      	lsls	r1, r2
 8001008:	000a      	movs	r2, r1
 800100a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	2b00      	cmp	r3, #0
 8001012:	d100      	bne.n	8001016 <HAL_DMA_IRQHandler+0x6e>
 8001014:	e071      	b.n	80010fa <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	0010      	movs	r0, r2
 800101e:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8001020:	e06b      	b.n	80010fa <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	221c      	movs	r2, #28
 8001028:	4013      	ands	r3, r2
 800102a:	2202      	movs	r2, #2
 800102c:	409a      	lsls	r2, r3
 800102e:	0013      	movs	r3, r2
 8001030:	68fa      	ldr	r2, [r7, #12]
 8001032:	4013      	ands	r3, r2
 8001034:	d02d      	beq.n	8001092 <HAL_DMA_IRQHandler+0xea>
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	2202      	movs	r2, #2
 800103a:	4013      	ands	r3, r2
 800103c:	d029      	beq.n	8001092 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2220      	movs	r2, #32
 8001046:	4013      	ands	r3, r2
 8001048:	d10b      	bne.n	8001062 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	210a      	movs	r1, #10
 8001056:	438a      	bics	r2, r1
 8001058:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2225      	movs	r2, #37	; 0x25
 800105e:	2101      	movs	r1, #1
 8001060:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	221c      	movs	r2, #28
 8001068:	401a      	ands	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	2102      	movs	r1, #2
 8001070:	4091      	lsls	r1, r2
 8001072:	000a      	movs	r2, r1
 8001074:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2224      	movs	r2, #36	; 0x24
 800107a:	2100      	movs	r1, #0
 800107c:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001082:	2b00      	cmp	r3, #0
 8001084:	d039      	beq.n	80010fa <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	0010      	movs	r0, r2
 800108e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001090:	e033      	b.n	80010fa <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	221c      	movs	r2, #28
 8001098:	4013      	ands	r3, r2
 800109a:	2208      	movs	r2, #8
 800109c:	409a      	lsls	r2, r3
 800109e:	0013      	movs	r3, r2
 80010a0:	68fa      	ldr	r2, [r7, #12]
 80010a2:	4013      	ands	r3, r2
 80010a4:	d02a      	beq.n	80010fc <HAL_DMA_IRQHandler+0x154>
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	2208      	movs	r2, #8
 80010aa:	4013      	ands	r3, r2
 80010ac:	d026      	beq.n	80010fc <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	210e      	movs	r1, #14
 80010ba:	438a      	bics	r2, r1
 80010bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	221c      	movs	r2, #28
 80010c4:	401a      	ands	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	2101      	movs	r1, #1
 80010cc:	4091      	lsls	r1, r2
 80010ce:	000a      	movs	r2, r1
 80010d0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2225      	movs	r2, #37	; 0x25
 80010dc:	2101      	movs	r1, #1
 80010de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2224      	movs	r2, #36	; 0x24
 80010e4:	2100      	movs	r1, #0
 80010e6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d005      	beq.n	80010fc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	0010      	movs	r0, r2
 80010f8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	46c0      	nop			; (mov r8, r8)
}
 80010fe:	46bd      	mov	sp, r7
 8001100:	b004      	add	sp, #16
 8001102:	bd80      	pop	{r7, pc}

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800111a:	e155      	b.n	80013c8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2101      	movs	r1, #1
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	4091      	lsls	r1, r2
 8001126:	000a      	movs	r2, r1
 8001128:	4013      	ands	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d100      	bne.n	8001134 <HAL_GPIO_Init+0x30>
 8001132:	e146      	b.n	80013c2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2203      	movs	r2, #3
 800113a:	4013      	ands	r3, r2
 800113c:	2b01      	cmp	r3, #1
 800113e:	d005      	beq.n	800114c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2203      	movs	r2, #3
 8001146:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001148:	2b02      	cmp	r3, #2
 800114a:	d130      	bne.n	80011ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	409a      	lsls	r2, r3
 800115a:	0013      	movs	r3, r2
 800115c:	43da      	mvns	r2, r3
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	409a      	lsls	r2, r3
 800116e:	0013      	movs	r3, r2
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001182:	2201      	movs	r2, #1
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
 8001188:	0013      	movs	r3, r2
 800118a:	43da      	mvns	r2, r3
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	091b      	lsrs	r3, r3, #4
 8001198:	2201      	movs	r2, #1
 800119a:	401a      	ands	r2, r3
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	409a      	lsls	r2, r3
 80011a0:	0013      	movs	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	2203      	movs	r2, #3
 80011b4:	4013      	ands	r3, r2
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d017      	beq.n	80011ea <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	409a      	lsls	r2, r3
 80011c8:	0013      	movs	r3, r2
 80011ca:	43da      	mvns	r2, r3
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	409a      	lsls	r2, r3
 80011dc:	0013      	movs	r3, r2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2203      	movs	r2, #3
 80011f0:	4013      	ands	r3, r2
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d123      	bne.n	800123e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	08da      	lsrs	r2, r3, #3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3208      	adds	r2, #8
 80011fe:	0092      	lsls	r2, r2, #2
 8001200:	58d3      	ldr	r3, [r2, r3]
 8001202:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	2207      	movs	r2, #7
 8001208:	4013      	ands	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	220f      	movs	r2, #15
 800120e:	409a      	lsls	r2, r3
 8001210:	0013      	movs	r3, r2
 8001212:	43da      	mvns	r2, r3
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	691a      	ldr	r2, [r3, #16]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	2107      	movs	r1, #7
 8001222:	400b      	ands	r3, r1
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	409a      	lsls	r2, r3
 8001228:	0013      	movs	r3, r2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	08da      	lsrs	r2, r3, #3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3208      	adds	r2, #8
 8001238:	0092      	lsls	r2, r2, #2
 800123a:	6939      	ldr	r1, [r7, #16]
 800123c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2203      	movs	r2, #3
 800124a:	409a      	lsls	r2, r3
 800124c:	0013      	movs	r3, r2
 800124e:	43da      	mvns	r2, r3
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2203      	movs	r2, #3
 800125c:	401a      	ands	r2, r3
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	409a      	lsls	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	23c0      	movs	r3, #192	; 0xc0
 8001278:	029b      	lsls	r3, r3, #10
 800127a:	4013      	ands	r3, r2
 800127c:	d100      	bne.n	8001280 <HAL_GPIO_Init+0x17c>
 800127e:	e0a0      	b.n	80013c2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001280:	4b57      	ldr	r3, [pc, #348]	; (80013e0 <HAL_GPIO_Init+0x2dc>)
 8001282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001284:	4b56      	ldr	r3, [pc, #344]	; (80013e0 <HAL_GPIO_Init+0x2dc>)
 8001286:	2101      	movs	r1, #1
 8001288:	430a      	orrs	r2, r1
 800128a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800128c:	4a55      	ldr	r2, [pc, #340]	; (80013e4 <HAL_GPIO_Init+0x2e0>)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	3302      	adds	r3, #2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	589b      	ldr	r3, [r3, r2]
 8001298:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	2203      	movs	r2, #3
 800129e:	4013      	ands	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	220f      	movs	r2, #15
 80012a4:	409a      	lsls	r2, r3
 80012a6:	0013      	movs	r3, r2
 80012a8:	43da      	mvns	r2, r3
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	23a0      	movs	r3, #160	; 0xa0
 80012b4:	05db      	lsls	r3, r3, #23
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d01f      	beq.n	80012fa <HAL_GPIO_Init+0x1f6>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4a      	ldr	r2, [pc, #296]	; (80013e8 <HAL_GPIO_Init+0x2e4>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d019      	beq.n	80012f6 <HAL_GPIO_Init+0x1f2>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a49      	ldr	r2, [pc, #292]	; (80013ec <HAL_GPIO_Init+0x2e8>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d013      	beq.n	80012f2 <HAL_GPIO_Init+0x1ee>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a48      	ldr	r2, [pc, #288]	; (80013f0 <HAL_GPIO_Init+0x2ec>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d00d      	beq.n	80012ee <HAL_GPIO_Init+0x1ea>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a47      	ldr	r2, [pc, #284]	; (80013f4 <HAL_GPIO_Init+0x2f0>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d007      	beq.n	80012ea <HAL_GPIO_Init+0x1e6>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a46      	ldr	r2, [pc, #280]	; (80013f8 <HAL_GPIO_Init+0x2f4>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d101      	bne.n	80012e6 <HAL_GPIO_Init+0x1e2>
 80012e2:	2305      	movs	r3, #5
 80012e4:	e00a      	b.n	80012fc <HAL_GPIO_Init+0x1f8>
 80012e6:	2306      	movs	r3, #6
 80012e8:	e008      	b.n	80012fc <HAL_GPIO_Init+0x1f8>
 80012ea:	2304      	movs	r3, #4
 80012ec:	e006      	b.n	80012fc <HAL_GPIO_Init+0x1f8>
 80012ee:	2303      	movs	r3, #3
 80012f0:	e004      	b.n	80012fc <HAL_GPIO_Init+0x1f8>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e002      	b.n	80012fc <HAL_GPIO_Init+0x1f8>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <HAL_GPIO_Init+0x1f8>
 80012fa:	2300      	movs	r3, #0
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	2103      	movs	r1, #3
 8001300:	400a      	ands	r2, r1
 8001302:	0092      	lsls	r2, r2, #2
 8001304:	4093      	lsls	r3, r2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800130c:	4935      	ldr	r1, [pc, #212]	; (80013e4 <HAL_GPIO_Init+0x2e0>)
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3302      	adds	r3, #2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800131a:	4b38      	ldr	r3, [pc, #224]	; (80013fc <HAL_GPIO_Init+0x2f8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	43da      	mvns	r2, r3
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	2380      	movs	r3, #128	; 0x80
 8001330:	025b      	lsls	r3, r3, #9
 8001332:	4013      	ands	r3, r2
 8001334:	d003      	beq.n	800133e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800133e:	4b2f      	ldr	r3, [pc, #188]	; (80013fc <HAL_GPIO_Init+0x2f8>)
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001344:	4b2d      	ldr	r3, [pc, #180]	; (80013fc <HAL_GPIO_Init+0x2f8>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	43da      	mvns	r2, r3
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	029b      	lsls	r3, r3, #10
 800135c:	4013      	ands	r3, r2
 800135e:	d003      	beq.n	8001368 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001368:	4b24      	ldr	r3, [pc, #144]	; (80013fc <HAL_GPIO_Init+0x2f8>)
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136e:	4b23      	ldr	r3, [pc, #140]	; (80013fc <HAL_GPIO_Init+0x2f8>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	43da      	mvns	r2, r3
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	035b      	lsls	r3, r3, #13
 8001386:	4013      	ands	r3, r2
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001392:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <HAL_GPIO_Init+0x2f8>)
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001398:	4b18      	ldr	r3, [pc, #96]	; (80013fc <HAL_GPIO_Init+0x2f8>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	43da      	mvns	r2, r3
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	2380      	movs	r3, #128	; 0x80
 80013ae:	039b      	lsls	r3, r3, #14
 80013b0:	4013      	ands	r3, r2
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <HAL_GPIO_Init+0x2f8>)
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3301      	adds	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	40da      	lsrs	r2, r3
 80013d0:	1e13      	subs	r3, r2, #0
 80013d2:	d000      	beq.n	80013d6 <HAL_GPIO_Init+0x2d2>
 80013d4:	e6a2      	b.n	800111c <HAL_GPIO_Init+0x18>
  }
}
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	46c0      	nop			; (mov r8, r8)
 80013da:	46bd      	mov	sp, r7
 80013dc:	b006      	add	sp, #24
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40010000 	.word	0x40010000
 80013e8:	50000400 	.word	0x50000400
 80013ec:	50000800 	.word	0x50000800
 80013f0:	50000c00 	.word	0x50000c00
 80013f4:	50001000 	.word	0x50001000
 80013f8:	50001c00 	.word	0x50001c00
 80013fc:	40010400 	.word	0x40010400

08001400 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	0008      	movs	r0, r1
 800140a:	0011      	movs	r1, r2
 800140c:	1cbb      	adds	r3, r7, #2
 800140e:	1c02      	adds	r2, r0, #0
 8001410:	801a      	strh	r2, [r3, #0]
 8001412:	1c7b      	adds	r3, r7, #1
 8001414:	1c0a      	adds	r2, r1, #0
 8001416:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001418:	1c7b      	adds	r3, r7, #1
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d004      	beq.n	800142a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001420:	1cbb      	adds	r3, r7, #2
 8001422:	881a      	ldrh	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001428:	e003      	b.n	8001432 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800142a:	1cbb      	adds	r3, r7, #2
 800142c:	881a      	ldrh	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	46bd      	mov	sp, r7
 8001436:	b002      	add	sp, #8
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800143c:	b5b0      	push	{r4, r5, r7, lr}
 800143e:	b08a      	sub	sp, #40	; 0x28
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d102      	bne.n	8001450 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	f000 fbbf 	bl	8001bce <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001450:	4bc9      	ldr	r3, [pc, #804]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	220c      	movs	r2, #12
 8001456:	4013      	ands	r3, r2
 8001458:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800145a:	4bc7      	ldr	r3, [pc, #796]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 800145c:	68da      	ldr	r2, [r3, #12]
 800145e:	2380      	movs	r3, #128	; 0x80
 8001460:	025b      	lsls	r3, r3, #9
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2201      	movs	r2, #1
 800146c:	4013      	ands	r3, r2
 800146e:	d100      	bne.n	8001472 <HAL_RCC_OscConfig+0x36>
 8001470:	e07e      	b.n	8001570 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	2b08      	cmp	r3, #8
 8001476:	d007      	beq.n	8001488 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	2b0c      	cmp	r3, #12
 800147c:	d112      	bne.n	80014a4 <HAL_RCC_OscConfig+0x68>
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	025b      	lsls	r3, r3, #9
 8001484:	429a      	cmp	r2, r3
 8001486:	d10d      	bne.n	80014a4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001488:	4bbb      	ldr	r3, [pc, #748]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	029b      	lsls	r3, r3, #10
 8001490:	4013      	ands	r3, r2
 8001492:	d100      	bne.n	8001496 <HAL_RCC_OscConfig+0x5a>
 8001494:	e06b      	b.n	800156e <HAL_RCC_OscConfig+0x132>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d167      	bne.n	800156e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	f000 fb95 	bl	8001bce <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685a      	ldr	r2, [r3, #4]
 80014a8:	2380      	movs	r3, #128	; 0x80
 80014aa:	025b      	lsls	r3, r3, #9
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d107      	bne.n	80014c0 <HAL_RCC_OscConfig+0x84>
 80014b0:	4bb1      	ldr	r3, [pc, #708]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4bb0      	ldr	r3, [pc, #704]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 80014b6:	2180      	movs	r1, #128	; 0x80
 80014b8:	0249      	lsls	r1, r1, #9
 80014ba:	430a      	orrs	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	e027      	b.n	8001510 <HAL_RCC_OscConfig+0xd4>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	23a0      	movs	r3, #160	; 0xa0
 80014c6:	02db      	lsls	r3, r3, #11
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d10e      	bne.n	80014ea <HAL_RCC_OscConfig+0xae>
 80014cc:	4baa      	ldr	r3, [pc, #680]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4ba9      	ldr	r3, [pc, #676]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 80014d2:	2180      	movs	r1, #128	; 0x80
 80014d4:	02c9      	lsls	r1, r1, #11
 80014d6:	430a      	orrs	r2, r1
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	4ba7      	ldr	r3, [pc, #668]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4ba6      	ldr	r3, [pc, #664]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 80014e0:	2180      	movs	r1, #128	; 0x80
 80014e2:	0249      	lsls	r1, r1, #9
 80014e4:	430a      	orrs	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	e012      	b.n	8001510 <HAL_RCC_OscConfig+0xd4>
 80014ea:	4ba3      	ldr	r3, [pc, #652]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4ba2      	ldr	r3, [pc, #648]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 80014f0:	49a2      	ldr	r1, [pc, #648]	; (800177c <HAL_RCC_OscConfig+0x340>)
 80014f2:	400a      	ands	r2, r1
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	4ba0      	ldr	r3, [pc, #640]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	025b      	lsls	r3, r3, #9
 80014fe:	4013      	ands	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4b9c      	ldr	r3, [pc, #624]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b9b      	ldr	r3, [pc, #620]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 800150a:	499d      	ldr	r1, [pc, #628]	; (8001780 <HAL_RCC_OscConfig+0x344>)
 800150c:	400a      	ands	r2, r1
 800150e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d015      	beq.n	8001544 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff fbe6 	bl	8000ce8 <HAL_GetTick>
 800151c:	0003      	movs	r3, r0
 800151e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001520:	e009      	b.n	8001536 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001522:	f7ff fbe1 	bl	8000ce8 <HAL_GetTick>
 8001526:	0002      	movs	r2, r0
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b64      	cmp	r3, #100	; 0x64
 800152e:	d902      	bls.n	8001536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	f000 fb4c 	bl	8001bce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001536:	4b90      	ldr	r3, [pc, #576]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	029b      	lsls	r3, r3, #10
 800153e:	4013      	ands	r3, r2
 8001540:	d0ef      	beq.n	8001522 <HAL_RCC_OscConfig+0xe6>
 8001542:	e015      	b.n	8001570 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff fbd0 	bl	8000ce8 <HAL_GetTick>
 8001548:	0003      	movs	r3, r0
 800154a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800154e:	f7ff fbcb 	bl	8000ce8 <HAL_GetTick>
 8001552:	0002      	movs	r2, r0
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b64      	cmp	r3, #100	; 0x64
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e336      	b.n	8001bce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001560:	4b85      	ldr	r3, [pc, #532]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	2380      	movs	r3, #128	; 0x80
 8001566:	029b      	lsls	r3, r3, #10
 8001568:	4013      	ands	r3, r2
 800156a:	d1f0      	bne.n	800154e <HAL_RCC_OscConfig+0x112>
 800156c:	e000      	b.n	8001570 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2202      	movs	r2, #2
 8001576:	4013      	ands	r3, r2
 8001578:	d100      	bne.n	800157c <HAL_RCC_OscConfig+0x140>
 800157a:	e099      	b.n	80016b0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	2220      	movs	r2, #32
 8001586:	4013      	ands	r3, r2
 8001588:	d009      	beq.n	800159e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800158a:	4b7b      	ldr	r3, [pc, #492]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4b7a      	ldr	r3, [pc, #488]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 8001590:	2120      	movs	r1, #32
 8001592:	430a      	orrs	r2, r1
 8001594:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	2220      	movs	r2, #32
 800159a:	4393      	bics	r3, r2
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	2b04      	cmp	r3, #4
 80015a2:	d005      	beq.n	80015b0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	2b0c      	cmp	r3, #12
 80015a8:	d13e      	bne.n	8001628 <HAL_RCC_OscConfig+0x1ec>
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d13b      	bne.n	8001628 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80015b0:	4b71      	ldr	r3, [pc, #452]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2204      	movs	r2, #4
 80015b6:	4013      	ands	r3, r2
 80015b8:	d004      	beq.n	80015c4 <HAL_RCC_OscConfig+0x188>
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e304      	b.n	8001bce <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c4:	4b6c      	ldr	r3, [pc, #432]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	4a6e      	ldr	r2, [pc, #440]	; (8001784 <HAL_RCC_OscConfig+0x348>)
 80015ca:	4013      	ands	r3, r2
 80015cc:	0019      	movs	r1, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	021a      	lsls	r2, r3, #8
 80015d4:	4b68      	ldr	r3, [pc, #416]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 80015d6:	430a      	orrs	r2, r1
 80015d8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80015da:	4b67      	ldr	r3, [pc, #412]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2209      	movs	r2, #9
 80015e0:	4393      	bics	r3, r2
 80015e2:	0019      	movs	r1, r3
 80015e4:	4b64      	ldr	r3, [pc, #400]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 80015e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e8:	430a      	orrs	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015ec:	f000 fc42 	bl	8001e74 <HAL_RCC_GetSysClockFreq>
 80015f0:	0001      	movs	r1, r0
 80015f2:	4b61      	ldr	r3, [pc, #388]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	091b      	lsrs	r3, r3, #4
 80015f8:	220f      	movs	r2, #15
 80015fa:	4013      	ands	r3, r2
 80015fc:	4a62      	ldr	r2, [pc, #392]	; (8001788 <HAL_RCC_OscConfig+0x34c>)
 80015fe:	5cd3      	ldrb	r3, [r2, r3]
 8001600:	000a      	movs	r2, r1
 8001602:	40da      	lsrs	r2, r3
 8001604:	4b61      	ldr	r3, [pc, #388]	; (800178c <HAL_RCC_OscConfig+0x350>)
 8001606:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001608:	4b61      	ldr	r3, [pc, #388]	; (8001790 <HAL_RCC_OscConfig+0x354>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2513      	movs	r5, #19
 800160e:	197c      	adds	r4, r7, r5
 8001610:	0018      	movs	r0, r3
 8001612:	f7ff fb23 	bl	8000c5c <HAL_InitTick>
 8001616:	0003      	movs	r3, r0
 8001618:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800161a:	197b      	adds	r3, r7, r5
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d046      	beq.n	80016b0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001622:	197b      	adds	r3, r7, r5
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	e2d2      	b.n	8001bce <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	2b00      	cmp	r3, #0
 800162c:	d027      	beq.n	800167e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800162e:	4b52      	ldr	r3, [pc, #328]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2209      	movs	r2, #9
 8001634:	4393      	bics	r3, r2
 8001636:	0019      	movs	r1, r3
 8001638:	4b4f      	ldr	r3, [pc, #316]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 800163a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800163c:	430a      	orrs	r2, r1
 800163e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff fb52 	bl	8000ce8 <HAL_GetTick>
 8001644:	0003      	movs	r3, r0
 8001646:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800164a:	f7ff fb4d 	bl	8000ce8 <HAL_GetTick>
 800164e:	0002      	movs	r2, r0
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e2b8      	b.n	8001bce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800165c:	4b46      	ldr	r3, [pc, #280]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2204      	movs	r2, #4
 8001662:	4013      	ands	r3, r2
 8001664:	d0f1      	beq.n	800164a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001666:	4b44      	ldr	r3, [pc, #272]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	4a46      	ldr	r2, [pc, #280]	; (8001784 <HAL_RCC_OscConfig+0x348>)
 800166c:	4013      	ands	r3, r2
 800166e:	0019      	movs	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	021a      	lsls	r2, r3, #8
 8001676:	4b40      	ldr	r3, [pc, #256]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 8001678:	430a      	orrs	r2, r1
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	e018      	b.n	80016b0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167e:	4b3e      	ldr	r3, [pc, #248]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	4b3d      	ldr	r3, [pc, #244]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 8001684:	2101      	movs	r1, #1
 8001686:	438a      	bics	r2, r1
 8001688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168a:	f7ff fb2d 	bl	8000ce8 <HAL_GetTick>
 800168e:	0003      	movs	r3, r0
 8001690:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001694:	f7ff fb28 	bl	8000ce8 <HAL_GetTick>
 8001698:	0002      	movs	r2, r0
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e293      	b.n	8001bce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016a6:	4b34      	ldr	r3, [pc, #208]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2204      	movs	r2, #4
 80016ac:	4013      	ands	r3, r2
 80016ae:	d1f1      	bne.n	8001694 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2210      	movs	r2, #16
 80016b6:	4013      	ands	r3, r2
 80016b8:	d100      	bne.n	80016bc <HAL_RCC_OscConfig+0x280>
 80016ba:	e0a2      	b.n	8001802 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d140      	bne.n	8001744 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016c2:	4b2d      	ldr	r3, [pc, #180]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	2380      	movs	r3, #128	; 0x80
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4013      	ands	r3, r2
 80016cc:	d005      	beq.n	80016da <HAL_RCC_OscConfig+0x29e>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e279      	b.n	8001bce <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016da:	4b27      	ldr	r3, [pc, #156]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	4a2d      	ldr	r2, [pc, #180]	; (8001794 <HAL_RCC_OscConfig+0x358>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	0019      	movs	r1, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016e8:	4b23      	ldr	r3, [pc, #140]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 80016ea:	430a      	orrs	r2, r1
 80016ec:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ee:	4b22      	ldr	r3, [pc, #136]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	0a19      	lsrs	r1, r3, #8
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	061a      	lsls	r2, r3, #24
 80016fc:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 80016fe:	430a      	orrs	r2, r1
 8001700:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	0b5b      	lsrs	r3, r3, #13
 8001708:	3301      	adds	r3, #1
 800170a:	2280      	movs	r2, #128	; 0x80
 800170c:	0212      	lsls	r2, r2, #8
 800170e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	210f      	movs	r1, #15
 8001718:	400b      	ands	r3, r1
 800171a:	491b      	ldr	r1, [pc, #108]	; (8001788 <HAL_RCC_OscConfig+0x34c>)
 800171c:	5ccb      	ldrb	r3, [r1, r3]
 800171e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <HAL_RCC_OscConfig+0x350>)
 8001722:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001724:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <HAL_RCC_OscConfig+0x354>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2513      	movs	r5, #19
 800172a:	197c      	adds	r4, r7, r5
 800172c:	0018      	movs	r0, r3
 800172e:	f7ff fa95 	bl	8000c5c <HAL_InitTick>
 8001732:	0003      	movs	r3, r0
 8001734:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001736:	197b      	adds	r3, r7, r5
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d061      	beq.n	8001802 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800173e:	197b      	adds	r3, r7, r5
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	e244      	b.n	8001bce <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d040      	beq.n	80017ce <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <HAL_RCC_OscConfig+0x33c>)
 8001752:	2180      	movs	r1, #128	; 0x80
 8001754:	0049      	lsls	r1, r1, #1
 8001756:	430a      	orrs	r2, r1
 8001758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175a:	f7ff fac5 	bl	8000ce8 <HAL_GetTick>
 800175e:	0003      	movs	r3, r0
 8001760:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001762:	e019      	b.n	8001798 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001764:	f7ff fac0 	bl	8000ce8 <HAL_GetTick>
 8001768:	0002      	movs	r2, r0
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d912      	bls.n	8001798 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e22b      	b.n	8001bce <HAL_RCC_OscConfig+0x792>
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	40021000 	.word	0x40021000
 800177c:	fffeffff 	.word	0xfffeffff
 8001780:	fffbffff 	.word	0xfffbffff
 8001784:	ffffe0ff 	.word	0xffffe0ff
 8001788:	08002ee4 	.word	0x08002ee4
 800178c:	20000000 	.word	0x20000000
 8001790:	20000004 	.word	0x20000004
 8001794:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001798:	4bca      	ldr	r3, [pc, #808]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4013      	ands	r3, r2
 80017a2:	d0df      	beq.n	8001764 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017a4:	4bc7      	ldr	r3, [pc, #796]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	4ac7      	ldr	r2, [pc, #796]	; (8001ac8 <HAL_RCC_OscConfig+0x68c>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	0019      	movs	r1, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017b2:	4bc4      	ldr	r3, [pc, #784]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 80017b4:	430a      	orrs	r2, r1
 80017b6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017b8:	4bc2      	ldr	r3, [pc, #776]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	021b      	lsls	r3, r3, #8
 80017be:	0a19      	lsrs	r1, r3, #8
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	061a      	lsls	r2, r3, #24
 80017c6:	4bbf      	ldr	r3, [pc, #764]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 80017c8:	430a      	orrs	r2, r1
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	e019      	b.n	8001802 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017ce:	4bbd      	ldr	r3, [pc, #756]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	4bbc      	ldr	r3, [pc, #752]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 80017d4:	49bd      	ldr	r1, [pc, #756]	; (8001acc <HAL_RCC_OscConfig+0x690>)
 80017d6:	400a      	ands	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017da:	f7ff fa85 	bl	8000ce8 <HAL_GetTick>
 80017de:	0003      	movs	r3, r0
 80017e0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017e4:	f7ff fa80 	bl	8000ce8 <HAL_GetTick>
 80017e8:	0002      	movs	r2, r0
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e1eb      	b.n	8001bce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80017f6:	4bb3      	ldr	r3, [pc, #716]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4013      	ands	r3, r2
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2208      	movs	r2, #8
 8001808:	4013      	ands	r3, r2
 800180a:	d036      	beq.n	800187a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d019      	beq.n	8001848 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001814:	4bab      	ldr	r3, [pc, #684]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 8001816:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001818:	4baa      	ldr	r3, [pc, #680]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 800181a:	2101      	movs	r1, #1
 800181c:	430a      	orrs	r2, r1
 800181e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001820:	f7ff fa62 	bl	8000ce8 <HAL_GetTick>
 8001824:	0003      	movs	r3, r0
 8001826:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800182a:	f7ff fa5d 	bl	8000ce8 <HAL_GetTick>
 800182e:	0002      	movs	r2, r0
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e1c8      	b.n	8001bce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800183c:	4ba1      	ldr	r3, [pc, #644]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 800183e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001840:	2202      	movs	r2, #2
 8001842:	4013      	ands	r3, r2
 8001844:	d0f1      	beq.n	800182a <HAL_RCC_OscConfig+0x3ee>
 8001846:	e018      	b.n	800187a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001848:	4b9e      	ldr	r3, [pc, #632]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 800184a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800184c:	4b9d      	ldr	r3, [pc, #628]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 800184e:	2101      	movs	r1, #1
 8001850:	438a      	bics	r2, r1
 8001852:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001854:	f7ff fa48 	bl	8000ce8 <HAL_GetTick>
 8001858:	0003      	movs	r3, r0
 800185a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800185e:	f7ff fa43 	bl	8000ce8 <HAL_GetTick>
 8001862:	0002      	movs	r2, r0
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e1ae      	b.n	8001bce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001870:	4b94      	ldr	r3, [pc, #592]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 8001872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001874:	2202      	movs	r2, #2
 8001876:	4013      	ands	r3, r2
 8001878:	d1f1      	bne.n	800185e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2204      	movs	r2, #4
 8001880:	4013      	ands	r3, r2
 8001882:	d100      	bne.n	8001886 <HAL_RCC_OscConfig+0x44a>
 8001884:	e0ae      	b.n	80019e4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001886:	2023      	movs	r0, #35	; 0x23
 8001888:	183b      	adds	r3, r7, r0
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800188e:	4b8d      	ldr	r3, [pc, #564]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 8001890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001892:	2380      	movs	r3, #128	; 0x80
 8001894:	055b      	lsls	r3, r3, #21
 8001896:	4013      	ands	r3, r2
 8001898:	d109      	bne.n	80018ae <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800189a:	4b8a      	ldr	r3, [pc, #552]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 800189c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800189e:	4b89      	ldr	r3, [pc, #548]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 80018a0:	2180      	movs	r1, #128	; 0x80
 80018a2:	0549      	lsls	r1, r1, #21
 80018a4:	430a      	orrs	r2, r1
 80018a6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80018a8:	183b      	adds	r3, r7, r0
 80018aa:	2201      	movs	r2, #1
 80018ac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ae:	4b88      	ldr	r3, [pc, #544]	; (8001ad0 <HAL_RCC_OscConfig+0x694>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	2380      	movs	r3, #128	; 0x80
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4013      	ands	r3, r2
 80018b8:	d11a      	bne.n	80018f0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ba:	4b85      	ldr	r3, [pc, #532]	; (8001ad0 <HAL_RCC_OscConfig+0x694>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	4b84      	ldr	r3, [pc, #528]	; (8001ad0 <HAL_RCC_OscConfig+0x694>)
 80018c0:	2180      	movs	r1, #128	; 0x80
 80018c2:	0049      	lsls	r1, r1, #1
 80018c4:	430a      	orrs	r2, r1
 80018c6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018c8:	f7ff fa0e 	bl	8000ce8 <HAL_GetTick>
 80018cc:	0003      	movs	r3, r0
 80018ce:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018d2:	f7ff fa09 	bl	8000ce8 <HAL_GetTick>
 80018d6:	0002      	movs	r2, r0
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b64      	cmp	r3, #100	; 0x64
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e174      	b.n	8001bce <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e4:	4b7a      	ldr	r3, [pc, #488]	; (8001ad0 <HAL_RCC_OscConfig+0x694>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	4013      	ands	r3, r2
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d107      	bne.n	800190c <HAL_RCC_OscConfig+0x4d0>
 80018fc:	4b71      	ldr	r3, [pc, #452]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 80018fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001900:	4b70      	ldr	r3, [pc, #448]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 8001902:	2180      	movs	r1, #128	; 0x80
 8001904:	0049      	lsls	r1, r1, #1
 8001906:	430a      	orrs	r2, r1
 8001908:	651a      	str	r2, [r3, #80]	; 0x50
 800190a:	e031      	b.n	8001970 <HAL_RCC_OscConfig+0x534>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10c      	bne.n	800192e <HAL_RCC_OscConfig+0x4f2>
 8001914:	4b6b      	ldr	r3, [pc, #428]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 8001916:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001918:	4b6a      	ldr	r3, [pc, #424]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 800191a:	496c      	ldr	r1, [pc, #432]	; (8001acc <HAL_RCC_OscConfig+0x690>)
 800191c:	400a      	ands	r2, r1
 800191e:	651a      	str	r2, [r3, #80]	; 0x50
 8001920:	4b68      	ldr	r3, [pc, #416]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 8001922:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001924:	4b67      	ldr	r3, [pc, #412]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 8001926:	496b      	ldr	r1, [pc, #428]	; (8001ad4 <HAL_RCC_OscConfig+0x698>)
 8001928:	400a      	ands	r2, r1
 800192a:	651a      	str	r2, [r3, #80]	; 0x50
 800192c:	e020      	b.n	8001970 <HAL_RCC_OscConfig+0x534>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	23a0      	movs	r3, #160	; 0xa0
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	429a      	cmp	r2, r3
 8001938:	d10e      	bne.n	8001958 <HAL_RCC_OscConfig+0x51c>
 800193a:	4b62      	ldr	r3, [pc, #392]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 800193c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800193e:	4b61      	ldr	r3, [pc, #388]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 8001940:	2180      	movs	r1, #128	; 0x80
 8001942:	00c9      	lsls	r1, r1, #3
 8001944:	430a      	orrs	r2, r1
 8001946:	651a      	str	r2, [r3, #80]	; 0x50
 8001948:	4b5e      	ldr	r3, [pc, #376]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 800194a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800194c:	4b5d      	ldr	r3, [pc, #372]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 800194e:	2180      	movs	r1, #128	; 0x80
 8001950:	0049      	lsls	r1, r1, #1
 8001952:	430a      	orrs	r2, r1
 8001954:	651a      	str	r2, [r3, #80]	; 0x50
 8001956:	e00b      	b.n	8001970 <HAL_RCC_OscConfig+0x534>
 8001958:	4b5a      	ldr	r3, [pc, #360]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 800195a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800195c:	4b59      	ldr	r3, [pc, #356]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 800195e:	495b      	ldr	r1, [pc, #364]	; (8001acc <HAL_RCC_OscConfig+0x690>)
 8001960:	400a      	ands	r2, r1
 8001962:	651a      	str	r2, [r3, #80]	; 0x50
 8001964:	4b57      	ldr	r3, [pc, #348]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 8001966:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001968:	4b56      	ldr	r3, [pc, #344]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 800196a:	495a      	ldr	r1, [pc, #360]	; (8001ad4 <HAL_RCC_OscConfig+0x698>)
 800196c:	400a      	ands	r2, r1
 800196e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d015      	beq.n	80019a4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001978:	f7ff f9b6 	bl	8000ce8 <HAL_GetTick>
 800197c:	0003      	movs	r3, r0
 800197e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001980:	e009      	b.n	8001996 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001982:	f7ff f9b1 	bl	8000ce8 <HAL_GetTick>
 8001986:	0002      	movs	r2, r0
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	4a52      	ldr	r2, [pc, #328]	; (8001ad8 <HAL_RCC_OscConfig+0x69c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e11b      	b.n	8001bce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001996:	4b4b      	ldr	r3, [pc, #300]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 8001998:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4013      	ands	r3, r2
 80019a0:	d0ef      	beq.n	8001982 <HAL_RCC_OscConfig+0x546>
 80019a2:	e014      	b.n	80019ce <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a4:	f7ff f9a0 	bl	8000ce8 <HAL_GetTick>
 80019a8:	0003      	movs	r3, r0
 80019aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019ac:	e009      	b.n	80019c2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ae:	f7ff f99b 	bl	8000ce8 <HAL_GetTick>
 80019b2:	0002      	movs	r2, r0
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	4a47      	ldr	r2, [pc, #284]	; (8001ad8 <HAL_RCC_OscConfig+0x69c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e105      	b.n	8001bce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019c2:	4b40      	ldr	r3, [pc, #256]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 80019c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019c6:	2380      	movs	r3, #128	; 0x80
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4013      	ands	r3, r2
 80019cc:	d1ef      	bne.n	80019ae <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019ce:	2323      	movs	r3, #35	; 0x23
 80019d0:	18fb      	adds	r3, r7, r3
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d105      	bne.n	80019e4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d8:	4b3a      	ldr	r3, [pc, #232]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 80019da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019dc:	4b39      	ldr	r3, [pc, #228]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 80019de:	493f      	ldr	r1, [pc, #252]	; (8001adc <HAL_RCC_OscConfig+0x6a0>)
 80019e0:	400a      	ands	r2, r1
 80019e2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2220      	movs	r2, #32
 80019ea:	4013      	ands	r3, r2
 80019ec:	d049      	beq.n	8001a82 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d026      	beq.n	8001a44 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80019f6:	4b33      	ldr	r3, [pc, #204]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	4b32      	ldr	r3, [pc, #200]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 80019fc:	2101      	movs	r1, #1
 80019fe:	430a      	orrs	r2, r1
 8001a00:	609a      	str	r2, [r3, #8]
 8001a02:	4b30      	ldr	r3, [pc, #192]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 8001a04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a06:	4b2f      	ldr	r3, [pc, #188]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 8001a08:	2101      	movs	r1, #1
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a0e:	4b34      	ldr	r3, [pc, #208]	; (8001ae0 <HAL_RCC_OscConfig+0x6a4>)
 8001a10:	6a1a      	ldr	r2, [r3, #32]
 8001a12:	4b33      	ldr	r3, [pc, #204]	; (8001ae0 <HAL_RCC_OscConfig+0x6a4>)
 8001a14:	2180      	movs	r1, #128	; 0x80
 8001a16:	0189      	lsls	r1, r1, #6
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1c:	f7ff f964 	bl	8000ce8 <HAL_GetTick>
 8001a20:	0003      	movs	r3, r0
 8001a22:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a26:	f7ff f95f 	bl	8000ce8 <HAL_GetTick>
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e0ca      	b.n	8001bce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a38:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d0f1      	beq.n	8001a26 <HAL_RCC_OscConfig+0x5ea>
 8001a42:	e01e      	b.n	8001a82 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001a44:	4b1f      	ldr	r3, [pc, #124]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	4b1e      	ldr	r3, [pc, #120]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	438a      	bics	r2, r1
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	4b23      	ldr	r3, [pc, #140]	; (8001ae0 <HAL_RCC_OscConfig+0x6a4>)
 8001a52:	6a1a      	ldr	r2, [r3, #32]
 8001a54:	4b22      	ldr	r3, [pc, #136]	; (8001ae0 <HAL_RCC_OscConfig+0x6a4>)
 8001a56:	4923      	ldr	r1, [pc, #140]	; (8001ae4 <HAL_RCC_OscConfig+0x6a8>)
 8001a58:	400a      	ands	r2, r1
 8001a5a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff f944 	bl	8000ce8 <HAL_GetTick>
 8001a60:	0003      	movs	r3, r0
 8001a62:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a66:	f7ff f93f 	bl	8000ce8 <HAL_GetTick>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e0aa      	b.n	8001bce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a78:	4b12      	ldr	r3, [pc, #72]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d1f1      	bne.n	8001a66 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d100      	bne.n	8001a8c <HAL_RCC_OscConfig+0x650>
 8001a8a:	e09f      	b.n	8001bcc <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	2b0c      	cmp	r3, #12
 8001a90:	d100      	bne.n	8001a94 <HAL_RCC_OscConfig+0x658>
 8001a92:	e078      	b.n	8001b86 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d159      	bne.n	8001b50 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <HAL_RCC_OscConfig+0x688>)
 8001aa2:	4911      	ldr	r1, [pc, #68]	; (8001ae8 <HAL_RCC_OscConfig+0x6ac>)
 8001aa4:	400a      	ands	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa8:	f7ff f91e 	bl	8000ce8 <HAL_GetTick>
 8001aac:	0003      	movs	r3, r0
 8001aae:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ab0:	e01c      	b.n	8001aec <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab2:	f7ff f919 	bl	8000ce8 <HAL_GetTick>
 8001ab6:	0002      	movs	r2, r0
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d915      	bls.n	8001aec <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e084      	b.n	8001bce <HAL_RCC_OscConfig+0x792>
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	ffff1fff 	.word	0xffff1fff
 8001acc:	fffffeff 	.word	0xfffffeff
 8001ad0:	40007000 	.word	0x40007000
 8001ad4:	fffffbff 	.word	0xfffffbff
 8001ad8:	00001388 	.word	0x00001388
 8001adc:	efffffff 	.word	0xefffffff
 8001ae0:	40010000 	.word	0x40010000
 8001ae4:	ffffdfff 	.word	0xffffdfff
 8001ae8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001aec:	4b3a      	ldr	r3, [pc, #232]	; (8001bd8 <HAL_RCC_OscConfig+0x79c>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	2380      	movs	r3, #128	; 0x80
 8001af2:	049b      	lsls	r3, r3, #18
 8001af4:	4013      	ands	r3, r2
 8001af6:	d1dc      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af8:	4b37      	ldr	r3, [pc, #220]	; (8001bd8 <HAL_RCC_OscConfig+0x79c>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	4a37      	ldr	r2, [pc, #220]	; (8001bdc <HAL_RCC_OscConfig+0x7a0>)
 8001afe:	4013      	ands	r3, r2
 8001b00:	0019      	movs	r1, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b10:	431a      	orrs	r2, r3
 8001b12:	4b31      	ldr	r3, [pc, #196]	; (8001bd8 <HAL_RCC_OscConfig+0x79c>)
 8001b14:	430a      	orrs	r2, r1
 8001b16:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b18:	4b2f      	ldr	r3, [pc, #188]	; (8001bd8 <HAL_RCC_OscConfig+0x79c>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b2e      	ldr	r3, [pc, #184]	; (8001bd8 <HAL_RCC_OscConfig+0x79c>)
 8001b1e:	2180      	movs	r1, #128	; 0x80
 8001b20:	0449      	lsls	r1, r1, #17
 8001b22:	430a      	orrs	r2, r1
 8001b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b26:	f7ff f8df 	bl	8000ce8 <HAL_GetTick>
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b30:	f7ff f8da 	bl	8000ce8 <HAL_GetTick>
 8001b34:	0002      	movs	r2, r0
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e045      	b.n	8001bce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b42:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <HAL_RCC_OscConfig+0x79c>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	049b      	lsls	r3, r3, #18
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0x6f4>
 8001b4e:	e03d      	b.n	8001bcc <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b50:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <HAL_RCC_OscConfig+0x79c>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <HAL_RCC_OscConfig+0x79c>)
 8001b56:	4922      	ldr	r1, [pc, #136]	; (8001be0 <HAL_RCC_OscConfig+0x7a4>)
 8001b58:	400a      	ands	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff f8c4 	bl	8000ce8 <HAL_GetTick>
 8001b60:	0003      	movs	r3, r0
 8001b62:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b66:	f7ff f8bf 	bl	8000ce8 <HAL_GetTick>
 8001b6a:	0002      	movs	r2, r0
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e02a      	b.n	8001bce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b78:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <HAL_RCC_OscConfig+0x79c>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	049b      	lsls	r3, r3, #18
 8001b80:	4013      	ands	r3, r2
 8001b82:	d1f0      	bne.n	8001b66 <HAL_RCC_OscConfig+0x72a>
 8001b84:	e022      	b.n	8001bcc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d101      	bne.n	8001b92 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e01d      	b.n	8001bce <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b92:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <HAL_RCC_OscConfig+0x79c>)
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	025b      	lsls	r3, r3, #9
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d10f      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	23f0      	movs	r3, #240	; 0xf0
 8001bac:	039b      	lsls	r3, r3, #14
 8001bae:	401a      	ands	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d107      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	23c0      	movs	r3, #192	; 0xc0
 8001bbc:	041b      	lsls	r3, r3, #16
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	0018      	movs	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	b00a      	add	sp, #40	; 0x28
 8001bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	ff02ffff 	.word	0xff02ffff
 8001be0:	feffffff 	.word	0xfeffffff

08001be4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be4:	b5b0      	push	{r4, r5, r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e128      	b.n	8001e4a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bf8:	4b96      	ldr	r3, [pc, #600]	; (8001e54 <HAL_RCC_ClockConfig+0x270>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	4013      	ands	r3, r2
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d91e      	bls.n	8001c44 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c06:	4b93      	ldr	r3, [pc, #588]	; (8001e54 <HAL_RCC_ClockConfig+0x270>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	4393      	bics	r3, r2
 8001c0e:	0019      	movs	r1, r3
 8001c10:	4b90      	ldr	r3, [pc, #576]	; (8001e54 <HAL_RCC_ClockConfig+0x270>)
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c18:	f7ff f866 	bl	8000ce8 <HAL_GetTick>
 8001c1c:	0003      	movs	r3, r0
 8001c1e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c20:	e009      	b.n	8001c36 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c22:	f7ff f861 	bl	8000ce8 <HAL_GetTick>
 8001c26:	0002      	movs	r2, r0
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	4a8a      	ldr	r2, [pc, #552]	; (8001e58 <HAL_RCC_ClockConfig+0x274>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e109      	b.n	8001e4a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c36:	4b87      	ldr	r3, [pc, #540]	; (8001e54 <HAL_RCC_ClockConfig+0x270>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d1ee      	bne.n	8001c22 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2202      	movs	r2, #2
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	d009      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c4e:	4b83      	ldr	r3, [pc, #524]	; (8001e5c <HAL_RCC_ClockConfig+0x278>)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	22f0      	movs	r2, #240	; 0xf0
 8001c54:	4393      	bics	r3, r2
 8001c56:	0019      	movs	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	4b7f      	ldr	r3, [pc, #508]	; (8001e5c <HAL_RCC_ClockConfig+0x278>)
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2201      	movs	r2, #1
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d100      	bne.n	8001c6e <HAL_RCC_ClockConfig+0x8a>
 8001c6c:	e089      	b.n	8001d82 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d107      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c76:	4b79      	ldr	r3, [pc, #484]	; (8001e5c <HAL_RCC_ClockConfig+0x278>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	2380      	movs	r3, #128	; 0x80
 8001c7c:	029b      	lsls	r3, r3, #10
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d120      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e0e1      	b.n	8001e4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d107      	bne.n	8001c9e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c8e:	4b73      	ldr	r3, [pc, #460]	; (8001e5c <HAL_RCC_ClockConfig+0x278>)
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	049b      	lsls	r3, r3, #18
 8001c96:	4013      	ands	r3, r2
 8001c98:	d114      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e0d5      	b.n	8001e4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d106      	bne.n	8001cb4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ca6:	4b6d      	ldr	r3, [pc, #436]	; (8001e5c <HAL_RCC_ClockConfig+0x278>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2204      	movs	r2, #4
 8001cac:	4013      	ands	r3, r2
 8001cae:	d109      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0ca      	b.n	8001e4a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001cb4:	4b69      	ldr	r3, [pc, #420]	; (8001e5c <HAL_RCC_ClockConfig+0x278>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0c2      	b.n	8001e4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cc4:	4b65      	ldr	r3, [pc, #404]	; (8001e5c <HAL_RCC_ClockConfig+0x278>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	2203      	movs	r2, #3
 8001cca:	4393      	bics	r3, r2
 8001ccc:	0019      	movs	r1, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	4b62      	ldr	r3, [pc, #392]	; (8001e5c <HAL_RCC_ClockConfig+0x278>)
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cd8:	f7ff f806 	bl	8000ce8 <HAL_GetTick>
 8001cdc:	0003      	movs	r3, r0
 8001cde:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d111      	bne.n	8001d0c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ce8:	e009      	b.n	8001cfe <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cea:	f7fe fffd 	bl	8000ce8 <HAL_GetTick>
 8001cee:	0002      	movs	r2, r0
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	4a58      	ldr	r2, [pc, #352]	; (8001e58 <HAL_RCC_ClockConfig+0x274>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e0a5      	b.n	8001e4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cfe:	4b57      	ldr	r3, [pc, #348]	; (8001e5c <HAL_RCC_ClockConfig+0x278>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	220c      	movs	r2, #12
 8001d04:	4013      	ands	r3, r2
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d1ef      	bne.n	8001cea <HAL_RCC_ClockConfig+0x106>
 8001d0a:	e03a      	b.n	8001d82 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d111      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d14:	e009      	b.n	8001d2a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d16:	f7fe ffe7 	bl	8000ce8 <HAL_GetTick>
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	4a4d      	ldr	r2, [pc, #308]	; (8001e58 <HAL_RCC_ClockConfig+0x274>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e08f      	b.n	8001e4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d2a:	4b4c      	ldr	r3, [pc, #304]	; (8001e5c <HAL_RCC_ClockConfig+0x278>)
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	220c      	movs	r2, #12
 8001d30:	4013      	ands	r3, r2
 8001d32:	2b0c      	cmp	r3, #12
 8001d34:	d1ef      	bne.n	8001d16 <HAL_RCC_ClockConfig+0x132>
 8001d36:	e024      	b.n	8001d82 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d11b      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d40:	e009      	b.n	8001d56 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d42:	f7fe ffd1 	bl	8000ce8 <HAL_GetTick>
 8001d46:	0002      	movs	r2, r0
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	4a42      	ldr	r2, [pc, #264]	; (8001e58 <HAL_RCC_ClockConfig+0x274>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e079      	b.n	8001e4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d56:	4b41      	ldr	r3, [pc, #260]	; (8001e5c <HAL_RCC_ClockConfig+0x278>)
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d1ef      	bne.n	8001d42 <HAL_RCC_ClockConfig+0x15e>
 8001d62:	e00e      	b.n	8001d82 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d64:	f7fe ffc0 	bl	8000ce8 <HAL_GetTick>
 8001d68:	0002      	movs	r2, r0
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	4a3a      	ldr	r2, [pc, #232]	; (8001e58 <HAL_RCC_ClockConfig+0x274>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e068      	b.n	8001e4a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d78:	4b38      	ldr	r3, [pc, #224]	; (8001e5c <HAL_RCC_ClockConfig+0x278>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	220c      	movs	r2, #12
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d1f0      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d82:	4b34      	ldr	r3, [pc, #208]	; (8001e54 <HAL_RCC_ClockConfig+0x270>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2201      	movs	r2, #1
 8001d88:	4013      	ands	r3, r2
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d21e      	bcs.n	8001dce <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d90:	4b30      	ldr	r3, [pc, #192]	; (8001e54 <HAL_RCC_ClockConfig+0x270>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2201      	movs	r2, #1
 8001d96:	4393      	bics	r3, r2
 8001d98:	0019      	movs	r1, r3
 8001d9a:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <HAL_RCC_ClockConfig+0x270>)
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001da2:	f7fe ffa1 	bl	8000ce8 <HAL_GetTick>
 8001da6:	0003      	movs	r3, r0
 8001da8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001daa:	e009      	b.n	8001dc0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dac:	f7fe ff9c 	bl	8000ce8 <HAL_GetTick>
 8001db0:	0002      	movs	r2, r0
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	4a28      	ldr	r2, [pc, #160]	; (8001e58 <HAL_RCC_ClockConfig+0x274>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e044      	b.n	8001e4a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc0:	4b24      	ldr	r3, [pc, #144]	; (8001e54 <HAL_RCC_ClockConfig+0x270>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d1ee      	bne.n	8001dac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d009      	beq.n	8001dec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dd8:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <HAL_RCC_ClockConfig+0x278>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	4a20      	ldr	r2, [pc, #128]	; (8001e60 <HAL_RCC_ClockConfig+0x27c>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	0019      	movs	r1, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	68da      	ldr	r2, [r3, #12]
 8001de6:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <HAL_RCC_ClockConfig+0x278>)
 8001de8:	430a      	orrs	r2, r1
 8001dea:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2208      	movs	r2, #8
 8001df2:	4013      	ands	r3, r2
 8001df4:	d00a      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001df6:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <HAL_RCC_ClockConfig+0x278>)
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	4a1a      	ldr	r2, [pc, #104]	; (8001e64 <HAL_RCC_ClockConfig+0x280>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	0019      	movs	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	00da      	lsls	r2, r3, #3
 8001e06:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HAL_RCC_ClockConfig+0x278>)
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e0c:	f000 f832 	bl	8001e74 <HAL_RCC_GetSysClockFreq>
 8001e10:	0001      	movs	r1, r0
 8001e12:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <HAL_RCC_ClockConfig+0x278>)
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	091b      	lsrs	r3, r3, #4
 8001e18:	220f      	movs	r2, #15
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <HAL_RCC_ClockConfig+0x284>)
 8001e1e:	5cd3      	ldrb	r3, [r2, r3]
 8001e20:	000a      	movs	r2, r1
 8001e22:	40da      	lsrs	r2, r3
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <HAL_RCC_ClockConfig+0x288>)
 8001e26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_RCC_ClockConfig+0x28c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	250b      	movs	r5, #11
 8001e2e:	197c      	adds	r4, r7, r5
 8001e30:	0018      	movs	r0, r3
 8001e32:	f7fe ff13 	bl	8000c5c <HAL_InitTick>
 8001e36:	0003      	movs	r3, r0
 8001e38:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001e3a:	197b      	adds	r3, r7, r5
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d002      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001e42:	197b      	adds	r3, r7, r5
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	e000      	b.n	8001e4a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b004      	add	sp, #16
 8001e50:	bdb0      	pop	{r4, r5, r7, pc}
 8001e52:	46c0      	nop			; (mov r8, r8)
 8001e54:	40022000 	.word	0x40022000
 8001e58:	00001388 	.word	0x00001388
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	fffff8ff 	.word	0xfffff8ff
 8001e64:	ffffc7ff 	.word	0xffffc7ff
 8001e68:	08002ee4 	.word	0x08002ee4
 8001e6c:	20000000 	.word	0x20000000
 8001e70:	20000004 	.word	0x20000004

08001e74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e74:	b5b0      	push	{r4, r5, r7, lr}
 8001e76:	b08e      	sub	sp, #56	; 0x38
 8001e78:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001e7a:	4b4c      	ldr	r3, [pc, #304]	; (8001fac <HAL_RCC_GetSysClockFreq+0x138>)
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e82:	230c      	movs	r3, #12
 8001e84:	4013      	ands	r3, r2
 8001e86:	2b0c      	cmp	r3, #12
 8001e88:	d014      	beq.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x40>
 8001e8a:	d900      	bls.n	8001e8e <HAL_RCC_GetSysClockFreq+0x1a>
 8001e8c:	e07b      	b.n	8001f86 <HAL_RCC_GetSysClockFreq+0x112>
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d002      	beq.n	8001e98 <HAL_RCC_GetSysClockFreq+0x24>
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d00b      	beq.n	8001eae <HAL_RCC_GetSysClockFreq+0x3a>
 8001e96:	e076      	b.n	8001f86 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e98:	4b44      	ldr	r3, [pc, #272]	; (8001fac <HAL_RCC_GetSysClockFreq+0x138>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2210      	movs	r2, #16
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d002      	beq.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001ea2:	4b43      	ldr	r3, [pc, #268]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001ea4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001ea6:	e07c      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001ea8:	4b42      	ldr	r3, [pc, #264]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001eaa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001eac:	e079      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001eae:	4b42      	ldr	r3, [pc, #264]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x144>)
 8001eb0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001eb2:	e076      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eb6:	0c9a      	lsrs	r2, r3, #18
 8001eb8:	230f      	movs	r3, #15
 8001eba:	401a      	ands	r2, r3
 8001ebc:	4b3f      	ldr	r3, [pc, #252]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x148>)
 8001ebe:	5c9b      	ldrb	r3, [r3, r2]
 8001ec0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec4:	0d9a      	lsrs	r2, r3, #22
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	4013      	ands	r3, r2
 8001eca:	3301      	adds	r3, #1
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ece:	4b37      	ldr	r3, [pc, #220]	; (8001fac <HAL_RCC_GetSysClockFreq+0x138>)
 8001ed0:	68da      	ldr	r2, [r3, #12]
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	025b      	lsls	r3, r3, #9
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d01a      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001edc:	61bb      	str	r3, [r7, #24]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	4a35      	ldr	r2, [pc, #212]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	69b8      	ldr	r0, [r7, #24]
 8001ee8:	69f9      	ldr	r1, [r7, #28]
 8001eea:	f7fe f9c1 	bl	8000270 <__aeabi_lmul>
 8001eee:	0002      	movs	r2, r0
 8001ef0:	000b      	movs	r3, r1
 8001ef2:	0010      	movs	r0, r2
 8001ef4:	0019      	movs	r1, r3
 8001ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f7fe f995 	bl	8000230 <__aeabi_uldivmod>
 8001f06:	0002      	movs	r2, r0
 8001f08:	000b      	movs	r3, r1
 8001f0a:	0013      	movs	r3, r2
 8001f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f0e:	e037      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f10:	4b26      	ldr	r3, [pc, #152]	; (8001fac <HAL_RCC_GetSysClockFreq+0x138>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2210      	movs	r2, #16
 8001f16:	4013      	ands	r3, r2
 8001f18:	d01a      	beq.n	8001f50 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	4a23      	ldr	r2, [pc, #140]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f24:	2300      	movs	r3, #0
 8001f26:	68b8      	ldr	r0, [r7, #8]
 8001f28:	68f9      	ldr	r1, [r7, #12]
 8001f2a:	f7fe f9a1 	bl	8000270 <__aeabi_lmul>
 8001f2e:	0002      	movs	r2, r0
 8001f30:	000b      	movs	r3, r1
 8001f32:	0010      	movs	r0, r2
 8001f34:	0019      	movs	r1, r3
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	603b      	str	r3, [r7, #0]
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f7fe f975 	bl	8000230 <__aeabi_uldivmod>
 8001f46:	0002      	movs	r2, r0
 8001f48:	000b      	movs	r3, r1
 8001f4a:	0013      	movs	r3, r2
 8001f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f4e:	e017      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f52:	0018      	movs	r0, r3
 8001f54:	2300      	movs	r3, #0
 8001f56:	0019      	movs	r1, r3
 8001f58:	4a16      	ldr	r2, [pc, #88]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f7fe f988 	bl	8000270 <__aeabi_lmul>
 8001f60:	0002      	movs	r2, r0
 8001f62:	000b      	movs	r3, r1
 8001f64:	0010      	movs	r0, r2
 8001f66:	0019      	movs	r1, r3
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	001c      	movs	r4, r3
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	001d      	movs	r5, r3
 8001f70:	0022      	movs	r2, r4
 8001f72:	002b      	movs	r3, r5
 8001f74:	f7fe f95c 	bl	8000230 <__aeabi_uldivmod>
 8001f78:	0002      	movs	r2, r0
 8001f7a:	000b      	movs	r3, r1
 8001f7c:	0013      	movs	r3, r2
 8001f7e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f84:	e00d      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001f86:	4b09      	ldr	r3, [pc, #36]	; (8001fac <HAL_RCC_GetSysClockFreq+0x138>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	0b5b      	lsrs	r3, r3, #13
 8001f8c:	2207      	movs	r2, #7
 8001f8e:	4013      	ands	r3, r2
 8001f90:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	3301      	adds	r3, #1
 8001f96:	2280      	movs	r2, #128	; 0x80
 8001f98:	0212      	lsls	r2, r2, #8
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	0013      	movs	r3, r2
 8001f9e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fa0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001fa4:	0018      	movs	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	b00e      	add	sp, #56	; 0x38
 8001faa:	bdb0      	pop	{r4, r5, r7, pc}
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	003d0900 	.word	0x003d0900
 8001fb4:	00f42400 	.word	0x00f42400
 8001fb8:	007a1200 	.word	0x007a1200
 8001fbc:	08002efc 	.word	0x08002efc

08001fc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fc4:	4b02      	ldr	r3, [pc, #8]	; (8001fd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
}
 8001fc8:	0018      	movs	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	20000000 	.word	0x20000000

08001fd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fd8:	f7ff fff2 	bl	8001fc0 <HAL_RCC_GetHCLKFreq>
 8001fdc:	0001      	movs	r1, r0
 8001fde:	4b06      	ldr	r3, [pc, #24]	; (8001ff8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	0a1b      	lsrs	r3, r3, #8
 8001fe4:	2207      	movs	r2, #7
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fea:	5cd3      	ldrb	r3, [r2, r3]
 8001fec:	40d9      	lsrs	r1, r3
 8001fee:	000b      	movs	r3, r1
}
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	08002ef4 	.word	0x08002ef4

08002000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002004:	f7ff ffdc 	bl	8001fc0 <HAL_RCC_GetHCLKFreq>
 8002008:	0001      	movs	r1, r0
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_RCC_GetPCLK2Freq+0x24>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	0adb      	lsrs	r3, r3, #11
 8002010:	2207      	movs	r2, #7
 8002012:	4013      	ands	r3, r2
 8002014:	4a04      	ldr	r2, [pc, #16]	; (8002028 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002016:	5cd3      	ldrb	r3, [r2, r3]
 8002018:	40d9      	lsrs	r1, r3
 800201a:	000b      	movs	r3, r1
}
 800201c:	0018      	movs	r0, r3
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	40021000 	.word	0x40021000
 8002028:	08002ef4 	.word	0x08002ef4

0800202c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002034:	2317      	movs	r3, #23
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2220      	movs	r2, #32
 8002042:	4013      	ands	r3, r2
 8002044:	d106      	bne.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	4013      	ands	r3, r2
 8002050:	d100      	bne.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002052:	e0d9      	b.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002054:	4ba4      	ldr	r3, [pc, #656]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	055b      	lsls	r3, r3, #21
 800205c:	4013      	ands	r3, r2
 800205e:	d10a      	bne.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002060:	4ba1      	ldr	r3, [pc, #644]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002064:	4ba0      	ldr	r3, [pc, #640]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002066:	2180      	movs	r1, #128	; 0x80
 8002068:	0549      	lsls	r1, r1, #21
 800206a:	430a      	orrs	r2, r1
 800206c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800206e:	2317      	movs	r3, #23
 8002070:	18fb      	adds	r3, r7, r3
 8002072:	2201      	movs	r2, #1
 8002074:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002076:	4b9d      	ldr	r3, [pc, #628]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4013      	ands	r3, r2
 8002080:	d11a      	bne.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002082:	4b9a      	ldr	r3, [pc, #616]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	4b99      	ldr	r3, [pc, #612]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8002088:	2180      	movs	r1, #128	; 0x80
 800208a:	0049      	lsls	r1, r1, #1
 800208c:	430a      	orrs	r2, r1
 800208e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002090:	f7fe fe2a 	bl	8000ce8 <HAL_GetTick>
 8002094:	0003      	movs	r3, r0
 8002096:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002098:	e008      	b.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209a:	f7fe fe25 	bl	8000ce8 <HAL_GetTick>
 800209e:	0002      	movs	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b64      	cmp	r3, #100	; 0x64
 80020a6:	d901      	bls.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e118      	b.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ac:	4b8f      	ldr	r3, [pc, #572]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	4013      	ands	r3, r2
 80020b6:	d0f0      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80020b8:	4b8b      	ldr	r3, [pc, #556]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	23c0      	movs	r3, #192	; 0xc0
 80020be:	039b      	lsls	r3, r3, #14
 80020c0:	4013      	ands	r3, r2
 80020c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	23c0      	movs	r3, #192	; 0xc0
 80020ca:	039b      	lsls	r3, r3, #14
 80020cc:	4013      	ands	r3, r2
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d107      	bne.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	23c0      	movs	r3, #192	; 0xc0
 80020da:	039b      	lsls	r3, r3, #14
 80020dc:	4013      	ands	r3, r2
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d013      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	23c0      	movs	r3, #192	; 0xc0
 80020ea:	029b      	lsls	r3, r3, #10
 80020ec:	401a      	ands	r2, r3
 80020ee:	23c0      	movs	r3, #192	; 0xc0
 80020f0:	029b      	lsls	r3, r3, #10
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d10a      	bne.n	800210c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80020f6:	4b7c      	ldr	r3, [pc, #496]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	2380      	movs	r3, #128	; 0x80
 80020fc:	029b      	lsls	r3, r3, #10
 80020fe:	401a      	ands	r2, r3
 8002100:	2380      	movs	r3, #128	; 0x80
 8002102:	029b      	lsls	r3, r3, #10
 8002104:	429a      	cmp	r2, r3
 8002106:	d101      	bne.n	800210c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e0e8      	b.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800210c:	4b76      	ldr	r3, [pc, #472]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800210e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002110:	23c0      	movs	r3, #192	; 0xc0
 8002112:	029b      	lsls	r3, r3, #10
 8002114:	4013      	ands	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d049      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	23c0      	movs	r3, #192	; 0xc0
 8002124:	029b      	lsls	r3, r3, #10
 8002126:	4013      	ands	r3, r2
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	429a      	cmp	r2, r3
 800212c:	d004      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2220      	movs	r2, #32
 8002134:	4013      	ands	r3, r2
 8002136:	d10d      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	23c0      	movs	r3, #192	; 0xc0
 800213e:	029b      	lsls	r3, r3, #10
 8002140:	4013      	ands	r3, r2
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	429a      	cmp	r2, r3
 8002146:	d034      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	2380      	movs	r3, #128	; 0x80
 800214e:	011b      	lsls	r3, r3, #4
 8002150:	4013      	ands	r3, r2
 8002152:	d02e      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002154:	4b64      	ldr	r3, [pc, #400]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002158:	4a65      	ldr	r2, [pc, #404]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800215a:	4013      	ands	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800215e:	4b62      	ldr	r3, [pc, #392]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002160:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002162:	4b61      	ldr	r3, [pc, #388]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002164:	2180      	movs	r1, #128	; 0x80
 8002166:	0309      	lsls	r1, r1, #12
 8002168:	430a      	orrs	r2, r1
 800216a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800216c:	4b5e      	ldr	r3, [pc, #376]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800216e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002170:	4b5d      	ldr	r3, [pc, #372]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002172:	4960      	ldr	r1, [pc, #384]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8002174:	400a      	ands	r2, r1
 8002176:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002178:	4b5b      	ldr	r3, [pc, #364]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4013      	ands	r3, r2
 8002186:	d014      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7fe fdae 	bl	8000ce8 <HAL_GetTick>
 800218c:	0003      	movs	r3, r0
 800218e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002190:	e009      	b.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002192:	f7fe fda9 	bl	8000ce8 <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	4a56      	ldr	r2, [pc, #344]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e09b      	b.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021a6:	4b50      	ldr	r3, [pc, #320]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80021a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80021aa:	2380      	movs	r3, #128	; 0x80
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4013      	ands	r3, r2
 80021b0:	d0ef      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	23c0      	movs	r3, #192	; 0xc0
 80021b8:	029b      	lsls	r3, r3, #10
 80021ba:	401a      	ands	r2, r3
 80021bc:	23c0      	movs	r3, #192	; 0xc0
 80021be:	029b      	lsls	r3, r3, #10
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d10c      	bne.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80021c4:	4b48      	ldr	r3, [pc, #288]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a4c      	ldr	r2, [pc, #304]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	0019      	movs	r1, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	23c0      	movs	r3, #192	; 0xc0
 80021d4:	039b      	lsls	r3, r3, #14
 80021d6:	401a      	ands	r2, r3
 80021d8:	4b43      	ldr	r3, [pc, #268]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80021da:	430a      	orrs	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	4b42      	ldr	r3, [pc, #264]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80021e0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	23c0      	movs	r3, #192	; 0xc0
 80021e8:	029b      	lsls	r3, r3, #10
 80021ea:	401a      	ands	r2, r3
 80021ec:	4b3e      	ldr	r3, [pc, #248]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80021ee:	430a      	orrs	r2, r1
 80021f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021f2:	2317      	movs	r3, #23
 80021f4:	18fb      	adds	r3, r7, r3
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d105      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021fc:	4b3a      	ldr	r3, [pc, #232]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80021fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002200:	4b39      	ldr	r3, [pc, #228]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002202:	493f      	ldr	r1, [pc, #252]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002204:	400a      	ands	r2, r1
 8002206:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2201      	movs	r2, #1
 800220e:	4013      	ands	r3, r2
 8002210:	d009      	beq.n	8002226 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002212:	4b35      	ldr	r3, [pc, #212]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002216:	2203      	movs	r2, #3
 8002218:	4393      	bics	r3, r2
 800221a:	0019      	movs	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68da      	ldr	r2, [r3, #12]
 8002220:	4b31      	ldr	r3, [pc, #196]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002222:	430a      	orrs	r2, r1
 8002224:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2202      	movs	r2, #2
 800222c:	4013      	ands	r3, r2
 800222e:	d009      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002230:	4b2d      	ldr	r3, [pc, #180]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002232:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002234:	220c      	movs	r2, #12
 8002236:	4393      	bics	r3, r2
 8002238:	0019      	movs	r1, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002240:	430a      	orrs	r2, r1
 8002242:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2204      	movs	r2, #4
 800224a:	4013      	ands	r3, r2
 800224c:	d009      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800224e:	4b26      	ldr	r3, [pc, #152]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002252:	4a2c      	ldr	r2, [pc, #176]	; (8002304 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8002254:	4013      	ands	r3, r2
 8002256:	0019      	movs	r1, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	4b22      	ldr	r3, [pc, #136]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800225e:	430a      	orrs	r2, r1
 8002260:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2208      	movs	r2, #8
 8002268:	4013      	ands	r3, r2
 800226a:	d009      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800226c:	4b1e      	ldr	r3, [pc, #120]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800226e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002270:	4a25      	ldr	r2, [pc, #148]	; (8002308 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8002272:	4013      	ands	r3, r2
 8002274:	0019      	movs	r1, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	699a      	ldr	r2, [r3, #24]
 800227a:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800227c:	430a      	orrs	r2, r1
 800227e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	4013      	ands	r3, r2
 800228a:	d009      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800228c:	4b16      	ldr	r3, [pc, #88]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800228e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002290:	4a17      	ldr	r2, [pc, #92]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8002292:	4013      	ands	r3, r2
 8002294:	0019      	movs	r1, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	69da      	ldr	r2, [r3, #28]
 800229a:	4b13      	ldr	r3, [pc, #76]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800229c:	430a      	orrs	r2, r1
 800229e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2240      	movs	r2, #64	; 0x40
 80022a6:	4013      	ands	r3, r2
 80022a8:	d009      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022aa:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80022ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ae:	4a17      	ldr	r2, [pc, #92]	; (800230c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	0019      	movs	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80022ba:	430a      	orrs	r2, r1
 80022bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2280      	movs	r2, #128	; 0x80
 80022c4:	4013      	ands	r3, r2
 80022c6:	d009      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80022c8:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80022ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022cc:	4a10      	ldr	r2, [pc, #64]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	0019      	movs	r1, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1a      	ldr	r2, [r3, #32]
 80022d6:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80022d8:	430a      	orrs	r2, r1
 80022da:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	0018      	movs	r0, r3
 80022e0:	46bd      	mov	sp, r7
 80022e2:	b006      	add	sp, #24
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	46c0      	nop			; (mov r8, r8)
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40007000 	.word	0x40007000
 80022f0:	fffcffff 	.word	0xfffcffff
 80022f4:	fff7ffff 	.word	0xfff7ffff
 80022f8:	00001388 	.word	0x00001388
 80022fc:	ffcfffff 	.word	0xffcfffff
 8002300:	efffffff 	.word	0xefffffff
 8002304:	fffff3ff 	.word	0xfffff3ff
 8002308:	ffffcfff 	.word	0xffffcfff
 800230c:	fbffffff 	.word	0xfbffffff
 8002310:	fff3ffff 	.word	0xfff3ffff

08002314 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e044      	b.n	80023b0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800232a:	2b00      	cmp	r3, #0
 800232c:	d107      	bne.n	800233e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2274      	movs	r2, #116	; 0x74
 8002332:	2100      	movs	r1, #0
 8002334:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	0018      	movs	r0, r3
 800233a:	f7fe fa87 	bl	800084c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2224      	movs	r2, #36	; 0x24
 8002342:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2101      	movs	r1, #1
 8002350:	438a      	bics	r2, r1
 8002352:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	0018      	movs	r0, r3
 8002358:	f000 f8d8 	bl	800250c <UART_SetConfig>
 800235c:	0003      	movs	r3, r0
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e024      	b.n	80023b0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	0018      	movs	r0, r3
 8002372:	f000 fb6b 	bl	8002a4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	490d      	ldr	r1, [pc, #52]	; (80023b8 <HAL_UART_Init+0xa4>)
 8002382:	400a      	ands	r2, r1
 8002384:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	212a      	movs	r1, #42	; 0x2a
 8002392:	438a      	bics	r2, r1
 8002394:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2101      	movs	r1, #1
 80023a2:	430a      	orrs	r2, r1
 80023a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	0018      	movs	r0, r3
 80023aa:	f000 fc03 	bl	8002bb4 <UART_CheckIdleState>
 80023ae:	0003      	movs	r3, r0
}
 80023b0:	0018      	movs	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b002      	add	sp, #8
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	ffffb7ff 	.word	0xffffb7ff

080023bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b08a      	sub	sp, #40	; 0x28
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	603b      	str	r3, [r7, #0]
 80023c8:	1dbb      	adds	r3, r7, #6
 80023ca:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023d0:	2b20      	cmp	r3, #32
 80023d2:	d000      	beq.n	80023d6 <HAL_UART_Transmit+0x1a>
 80023d4:	e095      	b.n	8002502 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_UART_Transmit+0x28>
 80023dc:	1dbb      	adds	r3, r7, #6
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e08d      	b.n	8002504 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	015b      	lsls	r3, r3, #5
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d109      	bne.n	8002408 <HAL_UART_Transmit+0x4c>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d105      	bne.n	8002408 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2201      	movs	r2, #1
 8002400:	4013      	ands	r3, r2
 8002402:	d001      	beq.n	8002408 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e07d      	b.n	8002504 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2274      	movs	r2, #116	; 0x74
 800240c:	5c9b      	ldrb	r3, [r3, r2]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d101      	bne.n	8002416 <HAL_UART_Transmit+0x5a>
 8002412:	2302      	movs	r3, #2
 8002414:	e076      	b.n	8002504 <HAL_UART_Transmit+0x148>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2274      	movs	r2, #116	; 0x74
 800241a:	2101      	movs	r1, #1
 800241c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2280      	movs	r2, #128	; 0x80
 8002422:	2100      	movs	r1, #0
 8002424:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2221      	movs	r2, #33	; 0x21
 800242a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800242c:	f7fe fc5c 	bl	8000ce8 <HAL_GetTick>
 8002430:	0003      	movs	r3, r0
 8002432:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	1dba      	adds	r2, r7, #6
 8002438:	2150      	movs	r1, #80	; 0x50
 800243a:	8812      	ldrh	r2, [r2, #0]
 800243c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1dba      	adds	r2, r7, #6
 8002442:	2152      	movs	r1, #82	; 0x52
 8002444:	8812      	ldrh	r2, [r2, #0]
 8002446:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	015b      	lsls	r3, r3, #5
 8002450:	429a      	cmp	r2, r3
 8002452:	d108      	bne.n	8002466 <HAL_UART_Transmit+0xaa>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d104      	bne.n	8002466 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800245c:	2300      	movs	r3, #0
 800245e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	61bb      	str	r3, [r7, #24]
 8002464:	e003      	b.n	800246e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2274      	movs	r2, #116	; 0x74
 8002472:	2100      	movs	r1, #0
 8002474:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002476:	e02c      	b.n	80024d2 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	68f8      	ldr	r0, [r7, #12]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	0013      	movs	r3, r2
 8002482:	2200      	movs	r2, #0
 8002484:	2180      	movs	r1, #128	; 0x80
 8002486:	f000 fbdd 	bl	8002c44 <UART_WaitOnFlagUntilTimeout>
 800248a:	1e03      	subs	r3, r0, #0
 800248c:	d001      	beq.n	8002492 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e038      	b.n	8002504 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10b      	bne.n	80024b0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	881b      	ldrh	r3, [r3, #0]
 800249c:	001a      	movs	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	05d2      	lsls	r2, r2, #23
 80024a4:	0dd2      	lsrs	r2, r2, #23
 80024a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	3302      	adds	r3, #2
 80024ac:	61bb      	str	r3, [r7, #24]
 80024ae:	e007      	b.n	80024c0 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	781a      	ldrb	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3301      	adds	r3, #1
 80024be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2252      	movs	r2, #82	; 0x52
 80024c4:	5a9b      	ldrh	r3, [r3, r2]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	3b01      	subs	r3, #1
 80024ca:	b299      	uxth	r1, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2252      	movs	r2, #82	; 0x52
 80024d0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2252      	movs	r2, #82	; 0x52
 80024d6:	5a9b      	ldrh	r3, [r3, r2]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1cc      	bne.n	8002478 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	68f8      	ldr	r0, [r7, #12]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	0013      	movs	r3, r2
 80024e8:	2200      	movs	r2, #0
 80024ea:	2140      	movs	r1, #64	; 0x40
 80024ec:	f000 fbaa 	bl	8002c44 <UART_WaitOnFlagUntilTimeout>
 80024f0:	1e03      	subs	r3, r0, #0
 80024f2:	d001      	beq.n	80024f8 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e005      	b.n	8002504 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2220      	movs	r2, #32
 80024fc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	e000      	b.n	8002504 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002502:	2302      	movs	r3, #2
  }
}
 8002504:	0018      	movs	r0, r3
 8002506:	46bd      	mov	sp, r7
 8002508:	b008      	add	sp, #32
 800250a:	bd80      	pop	{r7, pc}

0800250c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800250c:	b5b0      	push	{r4, r5, r7, lr}
 800250e:	b08e      	sub	sp, #56	; 0x38
 8002510:	af00      	add	r7, sp, #0
 8002512:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002514:	231a      	movs	r3, #26
 8002516:	2218      	movs	r2, #24
 8002518:	189b      	adds	r3, r3, r2
 800251a:	19db      	adds	r3, r3, r7
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	431a      	orrs	r2, r3
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	431a      	orrs	r2, r3
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	4313      	orrs	r3, r2
 8002536:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4ac3      	ldr	r2, [pc, #780]	; (800284c <UART_SetConfig+0x340>)
 8002540:	4013      	ands	r3, r2
 8002542:	0019      	movs	r1, r3
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800254a:	430a      	orrs	r2, r1
 800254c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	4abe      	ldr	r2, [pc, #760]	; (8002850 <UART_SetConfig+0x344>)
 8002556:	4013      	ands	r3, r2
 8002558:	0019      	movs	r1, r3
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4ab8      	ldr	r2, [pc, #736]	; (8002854 <UART_SetConfig+0x348>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d004      	beq.n	8002580 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800257c:	4313      	orrs	r3, r2
 800257e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	4ab4      	ldr	r2, [pc, #720]	; (8002858 <UART_SetConfig+0x34c>)
 8002588:	4013      	ands	r3, r2
 800258a:	0019      	movs	r1, r3
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002592:	430a      	orrs	r2, r1
 8002594:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4ab0      	ldr	r2, [pc, #704]	; (800285c <UART_SetConfig+0x350>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d131      	bne.n	8002604 <UART_SetConfig+0xf8>
 80025a0:	4baf      	ldr	r3, [pc, #700]	; (8002860 <UART_SetConfig+0x354>)
 80025a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a4:	2203      	movs	r2, #3
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d01d      	beq.n	80025e8 <UART_SetConfig+0xdc>
 80025ac:	d823      	bhi.n	80025f6 <UART_SetConfig+0xea>
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d00c      	beq.n	80025cc <UART_SetConfig+0xc0>
 80025b2:	d820      	bhi.n	80025f6 <UART_SetConfig+0xea>
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <UART_SetConfig+0xb2>
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d00e      	beq.n	80025da <UART_SetConfig+0xce>
 80025bc:	e01b      	b.n	80025f6 <UART_SetConfig+0xea>
 80025be:	231b      	movs	r3, #27
 80025c0:	2218      	movs	r2, #24
 80025c2:	189b      	adds	r3, r3, r2
 80025c4:	19db      	adds	r3, r3, r7
 80025c6:	2201      	movs	r2, #1
 80025c8:	701a      	strb	r2, [r3, #0]
 80025ca:	e0b4      	b.n	8002736 <UART_SetConfig+0x22a>
 80025cc:	231b      	movs	r3, #27
 80025ce:	2218      	movs	r2, #24
 80025d0:	189b      	adds	r3, r3, r2
 80025d2:	19db      	adds	r3, r3, r7
 80025d4:	2202      	movs	r2, #2
 80025d6:	701a      	strb	r2, [r3, #0]
 80025d8:	e0ad      	b.n	8002736 <UART_SetConfig+0x22a>
 80025da:	231b      	movs	r3, #27
 80025dc:	2218      	movs	r2, #24
 80025de:	189b      	adds	r3, r3, r2
 80025e0:	19db      	adds	r3, r3, r7
 80025e2:	2204      	movs	r2, #4
 80025e4:	701a      	strb	r2, [r3, #0]
 80025e6:	e0a6      	b.n	8002736 <UART_SetConfig+0x22a>
 80025e8:	231b      	movs	r3, #27
 80025ea:	2218      	movs	r2, #24
 80025ec:	189b      	adds	r3, r3, r2
 80025ee:	19db      	adds	r3, r3, r7
 80025f0:	2208      	movs	r2, #8
 80025f2:	701a      	strb	r2, [r3, #0]
 80025f4:	e09f      	b.n	8002736 <UART_SetConfig+0x22a>
 80025f6:	231b      	movs	r3, #27
 80025f8:	2218      	movs	r2, #24
 80025fa:	189b      	adds	r3, r3, r2
 80025fc:	19db      	adds	r3, r3, r7
 80025fe:	2210      	movs	r2, #16
 8002600:	701a      	strb	r2, [r3, #0]
 8002602:	e098      	b.n	8002736 <UART_SetConfig+0x22a>
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a96      	ldr	r2, [pc, #600]	; (8002864 <UART_SetConfig+0x358>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d131      	bne.n	8002672 <UART_SetConfig+0x166>
 800260e:	4b94      	ldr	r3, [pc, #592]	; (8002860 <UART_SetConfig+0x354>)
 8002610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002612:	220c      	movs	r2, #12
 8002614:	4013      	ands	r3, r2
 8002616:	2b0c      	cmp	r3, #12
 8002618:	d01d      	beq.n	8002656 <UART_SetConfig+0x14a>
 800261a:	d823      	bhi.n	8002664 <UART_SetConfig+0x158>
 800261c:	2b08      	cmp	r3, #8
 800261e:	d00c      	beq.n	800263a <UART_SetConfig+0x12e>
 8002620:	d820      	bhi.n	8002664 <UART_SetConfig+0x158>
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <UART_SetConfig+0x120>
 8002626:	2b04      	cmp	r3, #4
 8002628:	d00e      	beq.n	8002648 <UART_SetConfig+0x13c>
 800262a:	e01b      	b.n	8002664 <UART_SetConfig+0x158>
 800262c:	231b      	movs	r3, #27
 800262e:	2218      	movs	r2, #24
 8002630:	189b      	adds	r3, r3, r2
 8002632:	19db      	adds	r3, r3, r7
 8002634:	2200      	movs	r2, #0
 8002636:	701a      	strb	r2, [r3, #0]
 8002638:	e07d      	b.n	8002736 <UART_SetConfig+0x22a>
 800263a:	231b      	movs	r3, #27
 800263c:	2218      	movs	r2, #24
 800263e:	189b      	adds	r3, r3, r2
 8002640:	19db      	adds	r3, r3, r7
 8002642:	2202      	movs	r2, #2
 8002644:	701a      	strb	r2, [r3, #0]
 8002646:	e076      	b.n	8002736 <UART_SetConfig+0x22a>
 8002648:	231b      	movs	r3, #27
 800264a:	2218      	movs	r2, #24
 800264c:	189b      	adds	r3, r3, r2
 800264e:	19db      	adds	r3, r3, r7
 8002650:	2204      	movs	r2, #4
 8002652:	701a      	strb	r2, [r3, #0]
 8002654:	e06f      	b.n	8002736 <UART_SetConfig+0x22a>
 8002656:	231b      	movs	r3, #27
 8002658:	2218      	movs	r2, #24
 800265a:	189b      	adds	r3, r3, r2
 800265c:	19db      	adds	r3, r3, r7
 800265e:	2208      	movs	r2, #8
 8002660:	701a      	strb	r2, [r3, #0]
 8002662:	e068      	b.n	8002736 <UART_SetConfig+0x22a>
 8002664:	231b      	movs	r3, #27
 8002666:	2218      	movs	r2, #24
 8002668:	189b      	adds	r3, r3, r2
 800266a:	19db      	adds	r3, r3, r7
 800266c:	2210      	movs	r2, #16
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	e061      	b.n	8002736 <UART_SetConfig+0x22a>
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a7c      	ldr	r2, [pc, #496]	; (8002868 <UART_SetConfig+0x35c>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d106      	bne.n	800268a <UART_SetConfig+0x17e>
 800267c:	231b      	movs	r3, #27
 800267e:	2218      	movs	r2, #24
 8002680:	189b      	adds	r3, r3, r2
 8002682:	19db      	adds	r3, r3, r7
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]
 8002688:	e055      	b.n	8002736 <UART_SetConfig+0x22a>
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a77      	ldr	r2, [pc, #476]	; (800286c <UART_SetConfig+0x360>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d106      	bne.n	80026a2 <UART_SetConfig+0x196>
 8002694:	231b      	movs	r3, #27
 8002696:	2218      	movs	r2, #24
 8002698:	189b      	adds	r3, r3, r2
 800269a:	19db      	adds	r3, r3, r7
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
 80026a0:	e049      	b.n	8002736 <UART_SetConfig+0x22a>
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a6b      	ldr	r2, [pc, #428]	; (8002854 <UART_SetConfig+0x348>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d13e      	bne.n	800272a <UART_SetConfig+0x21e>
 80026ac:	4b6c      	ldr	r3, [pc, #432]	; (8002860 <UART_SetConfig+0x354>)
 80026ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026b0:	23c0      	movs	r3, #192	; 0xc0
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	4013      	ands	r3, r2
 80026b6:	22c0      	movs	r2, #192	; 0xc0
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d027      	beq.n	800270e <UART_SetConfig+0x202>
 80026be:	22c0      	movs	r2, #192	; 0xc0
 80026c0:	0112      	lsls	r2, r2, #4
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d82a      	bhi.n	800271c <UART_SetConfig+0x210>
 80026c6:	2280      	movs	r2, #128	; 0x80
 80026c8:	0112      	lsls	r2, r2, #4
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d011      	beq.n	80026f2 <UART_SetConfig+0x1e6>
 80026ce:	2280      	movs	r2, #128	; 0x80
 80026d0:	0112      	lsls	r2, r2, #4
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d822      	bhi.n	800271c <UART_SetConfig+0x210>
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d004      	beq.n	80026e4 <UART_SetConfig+0x1d8>
 80026da:	2280      	movs	r2, #128	; 0x80
 80026dc:	00d2      	lsls	r2, r2, #3
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00e      	beq.n	8002700 <UART_SetConfig+0x1f4>
 80026e2:	e01b      	b.n	800271c <UART_SetConfig+0x210>
 80026e4:	231b      	movs	r3, #27
 80026e6:	2218      	movs	r2, #24
 80026e8:	189b      	adds	r3, r3, r2
 80026ea:	19db      	adds	r3, r3, r7
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
 80026f0:	e021      	b.n	8002736 <UART_SetConfig+0x22a>
 80026f2:	231b      	movs	r3, #27
 80026f4:	2218      	movs	r2, #24
 80026f6:	189b      	adds	r3, r3, r2
 80026f8:	19db      	adds	r3, r3, r7
 80026fa:	2202      	movs	r2, #2
 80026fc:	701a      	strb	r2, [r3, #0]
 80026fe:	e01a      	b.n	8002736 <UART_SetConfig+0x22a>
 8002700:	231b      	movs	r3, #27
 8002702:	2218      	movs	r2, #24
 8002704:	189b      	adds	r3, r3, r2
 8002706:	19db      	adds	r3, r3, r7
 8002708:	2204      	movs	r2, #4
 800270a:	701a      	strb	r2, [r3, #0]
 800270c:	e013      	b.n	8002736 <UART_SetConfig+0x22a>
 800270e:	231b      	movs	r3, #27
 8002710:	2218      	movs	r2, #24
 8002712:	189b      	adds	r3, r3, r2
 8002714:	19db      	adds	r3, r3, r7
 8002716:	2208      	movs	r2, #8
 8002718:	701a      	strb	r2, [r3, #0]
 800271a:	e00c      	b.n	8002736 <UART_SetConfig+0x22a>
 800271c:	231b      	movs	r3, #27
 800271e:	2218      	movs	r2, #24
 8002720:	189b      	adds	r3, r3, r2
 8002722:	19db      	adds	r3, r3, r7
 8002724:	2210      	movs	r2, #16
 8002726:	701a      	strb	r2, [r3, #0]
 8002728:	e005      	b.n	8002736 <UART_SetConfig+0x22a>
 800272a:	231b      	movs	r3, #27
 800272c:	2218      	movs	r2, #24
 800272e:	189b      	adds	r3, r3, r2
 8002730:	19db      	adds	r3, r3, r7
 8002732:	2210      	movs	r2, #16
 8002734:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a46      	ldr	r2, [pc, #280]	; (8002854 <UART_SetConfig+0x348>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d000      	beq.n	8002742 <UART_SetConfig+0x236>
 8002740:	e09a      	b.n	8002878 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002742:	231b      	movs	r3, #27
 8002744:	2218      	movs	r2, #24
 8002746:	189b      	adds	r3, r3, r2
 8002748:	19db      	adds	r3, r3, r7
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b08      	cmp	r3, #8
 800274e:	d01d      	beq.n	800278c <UART_SetConfig+0x280>
 8002750:	dc20      	bgt.n	8002794 <UART_SetConfig+0x288>
 8002752:	2b04      	cmp	r3, #4
 8002754:	d015      	beq.n	8002782 <UART_SetConfig+0x276>
 8002756:	dc1d      	bgt.n	8002794 <UART_SetConfig+0x288>
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <UART_SetConfig+0x256>
 800275c:	2b02      	cmp	r3, #2
 800275e:	d005      	beq.n	800276c <UART_SetConfig+0x260>
 8002760:	e018      	b.n	8002794 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002762:	f7ff fc37 	bl	8001fd4 <HAL_RCC_GetPCLK1Freq>
 8002766:	0003      	movs	r3, r0
 8002768:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800276a:	e01c      	b.n	80027a6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800276c:	4b3c      	ldr	r3, [pc, #240]	; (8002860 <UART_SetConfig+0x354>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2210      	movs	r2, #16
 8002772:	4013      	ands	r3, r2
 8002774:	d002      	beq.n	800277c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002776:	4b3e      	ldr	r3, [pc, #248]	; (8002870 <UART_SetConfig+0x364>)
 8002778:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800277a:	e014      	b.n	80027a6 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800277c:	4b3d      	ldr	r3, [pc, #244]	; (8002874 <UART_SetConfig+0x368>)
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002780:	e011      	b.n	80027a6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002782:	f7ff fb77 	bl	8001e74 <HAL_RCC_GetSysClockFreq>
 8002786:	0003      	movs	r3, r0
 8002788:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800278a:	e00c      	b.n	80027a6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800278c:	2380      	movs	r3, #128	; 0x80
 800278e:	021b      	lsls	r3, r3, #8
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002792:	e008      	b.n	80027a6 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002798:	231a      	movs	r3, #26
 800279a:	2218      	movs	r2, #24
 800279c:	189b      	adds	r3, r3, r2
 800279e:	19db      	adds	r3, r3, r7
 80027a0:	2201      	movs	r2, #1
 80027a2:	701a      	strb	r2, [r3, #0]
        break;
 80027a4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80027a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d100      	bne.n	80027ae <UART_SetConfig+0x2a2>
 80027ac:	e134      	b.n	8002a18 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	685a      	ldr	r2, [r3, #4]
 80027b2:	0013      	movs	r3, r2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	189b      	adds	r3, r3, r2
 80027b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d305      	bcc.n	80027ca <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80027c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d906      	bls.n	80027d8 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80027ca:	231a      	movs	r3, #26
 80027cc:	2218      	movs	r2, #24
 80027ce:	189b      	adds	r3, r3, r2
 80027d0:	19db      	adds	r3, r3, r7
 80027d2:	2201      	movs	r2, #1
 80027d4:	701a      	strb	r2, [r3, #0]
 80027d6:	e11f      	b.n	8002a18 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80027d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	2300      	movs	r3, #0
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	6939      	ldr	r1, [r7, #16]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	000b      	movs	r3, r1
 80027e6:	0e1b      	lsrs	r3, r3, #24
 80027e8:	0010      	movs	r0, r2
 80027ea:	0205      	lsls	r5, r0, #8
 80027ec:	431d      	orrs	r5, r3
 80027ee:	000b      	movs	r3, r1
 80027f0:	021c      	lsls	r4, r3, #8
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	085b      	lsrs	r3, r3, #1
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	68b8      	ldr	r0, [r7, #8]
 8002800:	68f9      	ldr	r1, [r7, #12]
 8002802:	1900      	adds	r0, r0, r4
 8002804:	4169      	adcs	r1, r5
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	603b      	str	r3, [r7, #0]
 800280c:	2300      	movs	r3, #0
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f7fd fd0c 	bl	8000230 <__aeabi_uldivmod>
 8002818:	0002      	movs	r2, r0
 800281a:	000b      	movs	r3, r1
 800281c:	0013      	movs	r3, r2
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002822:	23c0      	movs	r3, #192	; 0xc0
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	429a      	cmp	r2, r3
 8002828:	d309      	bcc.n	800283e <UART_SetConfig+0x332>
 800282a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800282c:	2380      	movs	r3, #128	; 0x80
 800282e:	035b      	lsls	r3, r3, #13
 8002830:	429a      	cmp	r2, r3
 8002832:	d204      	bcs.n	800283e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800283a:	60da      	str	r2, [r3, #12]
 800283c:	e0ec      	b.n	8002a18 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800283e:	231a      	movs	r3, #26
 8002840:	2218      	movs	r2, #24
 8002842:	189b      	adds	r3, r3, r2
 8002844:	19db      	adds	r3, r3, r7
 8002846:	2201      	movs	r2, #1
 8002848:	701a      	strb	r2, [r3, #0]
 800284a:	e0e5      	b.n	8002a18 <UART_SetConfig+0x50c>
 800284c:	efff69f3 	.word	0xefff69f3
 8002850:	ffffcfff 	.word	0xffffcfff
 8002854:	40004800 	.word	0x40004800
 8002858:	fffff4ff 	.word	0xfffff4ff
 800285c:	40013800 	.word	0x40013800
 8002860:	40021000 	.word	0x40021000
 8002864:	40004400 	.word	0x40004400
 8002868:	40004c00 	.word	0x40004c00
 800286c:	40005000 	.word	0x40005000
 8002870:	003d0900 	.word	0x003d0900
 8002874:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	69da      	ldr	r2, [r3, #28]
 800287c:	2380      	movs	r3, #128	; 0x80
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	429a      	cmp	r2, r3
 8002882:	d000      	beq.n	8002886 <UART_SetConfig+0x37a>
 8002884:	e071      	b.n	800296a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8002886:	231b      	movs	r3, #27
 8002888:	2218      	movs	r2, #24
 800288a:	189b      	adds	r3, r3, r2
 800288c:	19db      	adds	r3, r3, r7
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b08      	cmp	r3, #8
 8002892:	d822      	bhi.n	80028da <UART_SetConfig+0x3ce>
 8002894:	009a      	lsls	r2, r3, #2
 8002896:	4b68      	ldr	r3, [pc, #416]	; (8002a38 <UART_SetConfig+0x52c>)
 8002898:	18d3      	adds	r3, r2, r3
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800289e:	f7ff fb99 	bl	8001fd4 <HAL_RCC_GetPCLK1Freq>
 80028a2:	0003      	movs	r3, r0
 80028a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028a6:	e021      	b.n	80028ec <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028a8:	f7ff fbaa 	bl	8002000 <HAL_RCC_GetPCLK2Freq>
 80028ac:	0003      	movs	r3, r0
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028b0:	e01c      	b.n	80028ec <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028b2:	4b62      	ldr	r3, [pc, #392]	; (8002a3c <UART_SetConfig+0x530>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2210      	movs	r2, #16
 80028b8:	4013      	ands	r3, r2
 80028ba:	d002      	beq.n	80028c2 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80028bc:	4b60      	ldr	r3, [pc, #384]	; (8002a40 <UART_SetConfig+0x534>)
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80028c0:	e014      	b.n	80028ec <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80028c2:	4b60      	ldr	r3, [pc, #384]	; (8002a44 <UART_SetConfig+0x538>)
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028c6:	e011      	b.n	80028ec <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028c8:	f7ff fad4 	bl	8001e74 <HAL_RCC_GetSysClockFreq>
 80028cc:	0003      	movs	r3, r0
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028d0:	e00c      	b.n	80028ec <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028d2:	2380      	movs	r3, #128	; 0x80
 80028d4:	021b      	lsls	r3, r3, #8
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028d8:	e008      	b.n	80028ec <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80028da:	2300      	movs	r3, #0
 80028dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80028de:	231a      	movs	r3, #26
 80028e0:	2218      	movs	r2, #24
 80028e2:	189b      	adds	r3, r3, r2
 80028e4:	19db      	adds	r3, r3, r7
 80028e6:	2201      	movs	r2, #1
 80028e8:	701a      	strb	r2, [r3, #0]
        break;
 80028ea:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80028ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d100      	bne.n	80028f4 <UART_SetConfig+0x3e8>
 80028f2:	e091      	b.n	8002a18 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80028f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f6:	005a      	lsls	r2, r3, #1
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	085b      	lsrs	r3, r3, #1
 80028fe:	18d2      	adds	r2, r2, r3
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	0019      	movs	r1, r3
 8002906:	0010      	movs	r0, r2
 8002908:	f7fd fc06 	bl	8000118 <__udivsi3>
 800290c:	0003      	movs	r3, r0
 800290e:	b29b      	uxth	r3, r3
 8002910:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002914:	2b0f      	cmp	r3, #15
 8002916:	d921      	bls.n	800295c <UART_SetConfig+0x450>
 8002918:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800291a:	2380      	movs	r3, #128	; 0x80
 800291c:	025b      	lsls	r3, r3, #9
 800291e:	429a      	cmp	r2, r3
 8002920:	d21c      	bcs.n	800295c <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002924:	b29a      	uxth	r2, r3
 8002926:	200e      	movs	r0, #14
 8002928:	2418      	movs	r4, #24
 800292a:	1903      	adds	r3, r0, r4
 800292c:	19db      	adds	r3, r3, r7
 800292e:	210f      	movs	r1, #15
 8002930:	438a      	bics	r2, r1
 8002932:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002936:	085b      	lsrs	r3, r3, #1
 8002938:	b29b      	uxth	r3, r3
 800293a:	2207      	movs	r2, #7
 800293c:	4013      	ands	r3, r2
 800293e:	b299      	uxth	r1, r3
 8002940:	1903      	adds	r3, r0, r4
 8002942:	19db      	adds	r3, r3, r7
 8002944:	1902      	adds	r2, r0, r4
 8002946:	19d2      	adds	r2, r2, r7
 8002948:	8812      	ldrh	r2, [r2, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	1902      	adds	r2, r0, r4
 8002954:	19d2      	adds	r2, r2, r7
 8002956:	8812      	ldrh	r2, [r2, #0]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	e05d      	b.n	8002a18 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800295c:	231a      	movs	r3, #26
 800295e:	2218      	movs	r2, #24
 8002960:	189b      	adds	r3, r3, r2
 8002962:	19db      	adds	r3, r3, r7
 8002964:	2201      	movs	r2, #1
 8002966:	701a      	strb	r2, [r3, #0]
 8002968:	e056      	b.n	8002a18 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800296a:	231b      	movs	r3, #27
 800296c:	2218      	movs	r2, #24
 800296e:	189b      	adds	r3, r3, r2
 8002970:	19db      	adds	r3, r3, r7
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b08      	cmp	r3, #8
 8002976:	d822      	bhi.n	80029be <UART_SetConfig+0x4b2>
 8002978:	009a      	lsls	r2, r3, #2
 800297a:	4b33      	ldr	r3, [pc, #204]	; (8002a48 <UART_SetConfig+0x53c>)
 800297c:	18d3      	adds	r3, r2, r3
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002982:	f7ff fb27 	bl	8001fd4 <HAL_RCC_GetPCLK1Freq>
 8002986:	0003      	movs	r3, r0
 8002988:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800298a:	e021      	b.n	80029d0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800298c:	f7ff fb38 	bl	8002000 <HAL_RCC_GetPCLK2Freq>
 8002990:	0003      	movs	r3, r0
 8002992:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002994:	e01c      	b.n	80029d0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002996:	4b29      	ldr	r3, [pc, #164]	; (8002a3c <UART_SetConfig+0x530>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2210      	movs	r2, #16
 800299c:	4013      	ands	r3, r2
 800299e:	d002      	beq.n	80029a6 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80029a0:	4b27      	ldr	r3, [pc, #156]	; (8002a40 <UART_SetConfig+0x534>)
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80029a4:	e014      	b.n	80029d0 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 80029a6:	4b27      	ldr	r3, [pc, #156]	; (8002a44 <UART_SetConfig+0x538>)
 80029a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029aa:	e011      	b.n	80029d0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029ac:	f7ff fa62 	bl	8001e74 <HAL_RCC_GetSysClockFreq>
 80029b0:	0003      	movs	r3, r0
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029b4:	e00c      	b.n	80029d0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029b6:	2380      	movs	r3, #128	; 0x80
 80029b8:	021b      	lsls	r3, r3, #8
 80029ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80029bc:	e008      	b.n	80029d0 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 80029be:	2300      	movs	r3, #0
 80029c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80029c2:	231a      	movs	r3, #26
 80029c4:	2218      	movs	r2, #24
 80029c6:	189b      	adds	r3, r3, r2
 80029c8:	19db      	adds	r3, r3, r7
 80029ca:	2201      	movs	r2, #1
 80029cc:	701a      	strb	r2, [r3, #0]
        break;
 80029ce:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80029d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d020      	beq.n	8002a18 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	085a      	lsrs	r2, r3, #1
 80029dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029de:	18d2      	adds	r2, r2, r3
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	0019      	movs	r1, r3
 80029e6:	0010      	movs	r0, r2
 80029e8:	f7fd fb96 	bl	8000118 <__udivsi3>
 80029ec:	0003      	movs	r3, r0
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f4:	2b0f      	cmp	r3, #15
 80029f6:	d909      	bls.n	8002a0c <UART_SetConfig+0x500>
 80029f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029fa:	2380      	movs	r3, #128	; 0x80
 80029fc:	025b      	lsls	r3, r3, #9
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d204      	bcs.n	8002a0c <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	e005      	b.n	8002a18 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8002a0c:	231a      	movs	r3, #26
 8002a0e:	2218      	movs	r2, #24
 8002a10:	189b      	adds	r3, r3, r2
 8002a12:	19db      	adds	r3, r3, r7
 8002a14:	2201      	movs	r2, #1
 8002a16:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	2200      	movs	r2, #0
 8002a22:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002a24:	231a      	movs	r3, #26
 8002a26:	2218      	movs	r2, #24
 8002a28:	189b      	adds	r3, r3, r2
 8002a2a:	19db      	adds	r3, r3, r7
 8002a2c:	781b      	ldrb	r3, [r3, #0]
}
 8002a2e:	0018      	movs	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	b00e      	add	sp, #56	; 0x38
 8002a34:	bdb0      	pop	{r4, r5, r7, pc}
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	08002f08 	.word	0x08002f08
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	003d0900 	.word	0x003d0900
 8002a44:	00f42400 	.word	0x00f42400
 8002a48:	08002f2c 	.word	0x08002f2c

08002a4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	2201      	movs	r2, #1
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d00b      	beq.n	8002a76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	4a4a      	ldr	r2, [pc, #296]	; (8002b90 <UART_AdvFeatureConfig+0x144>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	0019      	movs	r1, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d00b      	beq.n	8002a98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	4a43      	ldr	r2, [pc, #268]	; (8002b94 <UART_AdvFeatureConfig+0x148>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	0019      	movs	r1, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	2204      	movs	r2, #4
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d00b      	beq.n	8002aba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4a3b      	ldr	r2, [pc, #236]	; (8002b98 <UART_AdvFeatureConfig+0x14c>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	0019      	movs	r1, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	2208      	movs	r2, #8
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	d00b      	beq.n	8002adc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4a34      	ldr	r2, [pc, #208]	; (8002b9c <UART_AdvFeatureConfig+0x150>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	0019      	movs	r1, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	2210      	movs	r2, #16
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d00b      	beq.n	8002afe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4a2c      	ldr	r2, [pc, #176]	; (8002ba0 <UART_AdvFeatureConfig+0x154>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	0019      	movs	r1, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	430a      	orrs	r2, r1
 8002afc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	2220      	movs	r2, #32
 8002b04:	4013      	ands	r3, r2
 8002b06:	d00b      	beq.n	8002b20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	4a25      	ldr	r2, [pc, #148]	; (8002ba4 <UART_AdvFeatureConfig+0x158>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	0019      	movs	r1, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	2240      	movs	r2, #64	; 0x40
 8002b26:	4013      	ands	r3, r2
 8002b28:	d01d      	beq.n	8002b66 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	4a1d      	ldr	r2, [pc, #116]	; (8002ba8 <UART_AdvFeatureConfig+0x15c>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	0019      	movs	r1, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	035b      	lsls	r3, r3, #13
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d10b      	bne.n	8002b66 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	4a15      	ldr	r2, [pc, #84]	; (8002bac <UART_AdvFeatureConfig+0x160>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	0019      	movs	r1, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	2280      	movs	r2, #128	; 0x80
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	d00b      	beq.n	8002b88 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	4a0e      	ldr	r2, [pc, #56]	; (8002bb0 <UART_AdvFeatureConfig+0x164>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	0019      	movs	r1, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	605a      	str	r2, [r3, #4]
  }
}
 8002b88:	46c0      	nop			; (mov r8, r8)
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b002      	add	sp, #8
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	fffdffff 	.word	0xfffdffff
 8002b94:	fffeffff 	.word	0xfffeffff
 8002b98:	fffbffff 	.word	0xfffbffff
 8002b9c:	ffff7fff 	.word	0xffff7fff
 8002ba0:	ffffefff 	.word	0xffffefff
 8002ba4:	ffffdfff 	.word	0xffffdfff
 8002ba8:	ffefffff 	.word	0xffefffff
 8002bac:	ff9fffff 	.word	0xff9fffff
 8002bb0:	fff7ffff 	.word	0xfff7ffff

08002bb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2280      	movs	r2, #128	; 0x80
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002bc4:	f7fe f890 	bl	8000ce8 <HAL_GetTick>
 8002bc8:	0003      	movs	r3, r0
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2208      	movs	r2, #8
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b08      	cmp	r3, #8
 8002bd8:	d10c      	bne.n	8002bf4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2280      	movs	r2, #128	; 0x80
 8002bde:	0391      	lsls	r1, r2, #14
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	4a17      	ldr	r2, [pc, #92]	; (8002c40 <UART_CheckIdleState+0x8c>)
 8002be4:	9200      	str	r2, [sp, #0]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f000 f82c 	bl	8002c44 <UART_WaitOnFlagUntilTimeout>
 8002bec:	1e03      	subs	r3, r0, #0
 8002bee:	d001      	beq.n	8002bf4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e021      	b.n	8002c38 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2204      	movs	r2, #4
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b04      	cmp	r3, #4
 8002c00:	d10c      	bne.n	8002c1c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2280      	movs	r2, #128	; 0x80
 8002c06:	03d1      	lsls	r1, r2, #15
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	4a0d      	ldr	r2, [pc, #52]	; (8002c40 <UART_CheckIdleState+0x8c>)
 8002c0c:	9200      	str	r2, [sp, #0]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f000 f818 	bl	8002c44 <UART_WaitOnFlagUntilTimeout>
 8002c14:	1e03      	subs	r3, r0, #0
 8002c16:	d001      	beq.n	8002c1c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e00d      	b.n	8002c38 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2220      	movs	r2, #32
 8002c26:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2274      	movs	r2, #116	; 0x74
 8002c32:	2100      	movs	r1, #0
 8002c34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	0018      	movs	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b004      	add	sp, #16
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	01ffffff 	.word	0x01ffffff

08002c44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b094      	sub	sp, #80	; 0x50
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	1dfb      	adds	r3, r7, #7
 8002c52:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c54:	e0a3      	b.n	8002d9e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c58:	3301      	adds	r3, #1
 8002c5a:	d100      	bne.n	8002c5e <UART_WaitOnFlagUntilTimeout+0x1a>
 8002c5c:	e09f      	b.n	8002d9e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c5e:	f7fe f843 	bl	8000ce8 <HAL_GetTick>
 8002c62:	0002      	movs	r2, r0
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d302      	bcc.n	8002c74 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d13d      	bne.n	8002cf0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c74:	f3ef 8310 	mrs	r3, PRIMASK
 8002c78:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c7c:	647b      	str	r3, [r7, #68]	; 0x44
 8002c7e:	2301      	movs	r3, #1
 8002c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c84:	f383 8810 	msr	PRIMASK, r3
}
 8002c88:	46c0      	nop			; (mov r8, r8)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	494c      	ldr	r1, [pc, #304]	; (8002dc8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002c96:	400a      	ands	r2, r1
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c9c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca0:	f383 8810 	msr	PRIMASK, r3
}
 8002ca4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8002caa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cae:	643b      	str	r3, [r7, #64]	; 0x40
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb6:	f383 8810 	msr	PRIMASK, r3
}
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	438a      	bics	r2, r1
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cce:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cd2:	f383 8810 	msr	PRIMASK, r3
}
 8002cd6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2274      	movs	r2, #116	; 0x74
 8002ce8:	2100      	movs	r1, #0
 8002cea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e067      	b.n	8002dc0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d050      	beq.n	8002d9e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	69da      	ldr	r2, [r3, #28]
 8002d02:	2380      	movs	r3, #128	; 0x80
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	401a      	ands	r2, r3
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d146      	bne.n	8002d9e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2280      	movs	r2, #128	; 0x80
 8002d16:	0112      	lsls	r2, r2, #4
 8002d18:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d1e:	613b      	str	r3, [r7, #16]
  return(result);
 8002d20:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d24:	2301      	movs	r3, #1
 8002d26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f383 8810 	msr	PRIMASK, r3
}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4923      	ldr	r1, [pc, #140]	; (8002dc8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002d3c:	400a      	ands	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d42:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	f383 8810 	msr	PRIMASK, r3
}
 8002d4a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d4c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d50:	61fb      	str	r3, [r7, #28]
  return(result);
 8002d52:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d54:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d56:	2301      	movs	r3, #1
 8002d58:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	f383 8810 	msr	PRIMASK, r3
}
 8002d60:	46c0      	nop			; (mov r8, r8)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	438a      	bics	r2, r1
 8002d70:	609a      	str	r2, [r3, #8]
 8002d72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	f383 8810 	msr	PRIMASK, r3
}
 8002d7c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2220      	movs	r2, #32
 8002d82:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2220      	movs	r2, #32
 8002d88:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2280      	movs	r2, #128	; 0x80
 8002d8e:	2120      	movs	r1, #32
 8002d90:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2274      	movs	r2, #116	; 0x74
 8002d96:	2100      	movs	r1, #0
 8002d98:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e010      	b.n	8002dc0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	4013      	ands	r3, r2
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	425a      	negs	r2, r3
 8002dae:	4153      	adcs	r3, r2
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	001a      	movs	r2, r3
 8002db4:	1dfb      	adds	r3, r7, #7
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d100      	bne.n	8002dbe <UART_WaitOnFlagUntilTimeout+0x17a>
 8002dbc:	e74b      	b.n	8002c56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b014      	add	sp, #80	; 0x50
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	fffffe5f 	.word	0xfffffe5f

08002dcc <__libc_init_array>:
 8002dcc:	b570      	push	{r4, r5, r6, lr}
 8002dce:	2600      	movs	r6, #0
 8002dd0:	4d0c      	ldr	r5, [pc, #48]	; (8002e04 <__libc_init_array+0x38>)
 8002dd2:	4c0d      	ldr	r4, [pc, #52]	; (8002e08 <__libc_init_array+0x3c>)
 8002dd4:	1b64      	subs	r4, r4, r5
 8002dd6:	10a4      	asrs	r4, r4, #2
 8002dd8:	42a6      	cmp	r6, r4
 8002dda:	d109      	bne.n	8002df0 <__libc_init_array+0x24>
 8002ddc:	2600      	movs	r6, #0
 8002dde:	f000 f82b 	bl	8002e38 <_init>
 8002de2:	4d0a      	ldr	r5, [pc, #40]	; (8002e0c <__libc_init_array+0x40>)
 8002de4:	4c0a      	ldr	r4, [pc, #40]	; (8002e10 <__libc_init_array+0x44>)
 8002de6:	1b64      	subs	r4, r4, r5
 8002de8:	10a4      	asrs	r4, r4, #2
 8002dea:	42a6      	cmp	r6, r4
 8002dec:	d105      	bne.n	8002dfa <__libc_init_array+0x2e>
 8002dee:	bd70      	pop	{r4, r5, r6, pc}
 8002df0:	00b3      	lsls	r3, r6, #2
 8002df2:	58eb      	ldr	r3, [r5, r3]
 8002df4:	4798      	blx	r3
 8002df6:	3601      	adds	r6, #1
 8002df8:	e7ee      	b.n	8002dd8 <__libc_init_array+0xc>
 8002dfa:	00b3      	lsls	r3, r6, #2
 8002dfc:	58eb      	ldr	r3, [r5, r3]
 8002dfe:	4798      	blx	r3
 8002e00:	3601      	adds	r6, #1
 8002e02:	e7f2      	b.n	8002dea <__libc_init_array+0x1e>
 8002e04:	08002f58 	.word	0x08002f58
 8002e08:	08002f58 	.word	0x08002f58
 8002e0c:	08002f58 	.word	0x08002f58
 8002e10:	08002f5c 	.word	0x08002f5c

08002e14 <memcpy>:
 8002e14:	2300      	movs	r3, #0
 8002e16:	b510      	push	{r4, lr}
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d100      	bne.n	8002e1e <memcpy+0xa>
 8002e1c:	bd10      	pop	{r4, pc}
 8002e1e:	5ccc      	ldrb	r4, [r1, r3]
 8002e20:	54c4      	strb	r4, [r0, r3]
 8002e22:	3301      	adds	r3, #1
 8002e24:	e7f8      	b.n	8002e18 <memcpy+0x4>

08002e26 <memset>:
 8002e26:	0003      	movs	r3, r0
 8002e28:	1882      	adds	r2, r0, r2
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d100      	bne.n	8002e30 <memset+0xa>
 8002e2e:	4770      	bx	lr
 8002e30:	7019      	strb	r1, [r3, #0]
 8002e32:	3301      	adds	r3, #1
 8002e34:	e7f9      	b.n	8002e2a <memset+0x4>
	...

08002e38 <_init>:
 8002e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e3e:	bc08      	pop	{r3}
 8002e40:	469e      	mov	lr, r3
 8002e42:	4770      	bx	lr

08002e44 <_fini>:
 8002e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e4a:	bc08      	pop	{r3}
 8002e4c:	469e      	mov	lr, r3
 8002e4e:	4770      	bx	lr
